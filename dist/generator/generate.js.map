{"version":3,"sources":["../../src/generator/generate.js"],"names":["generate","context","ast","outputFilePath","tokenList"],"mappings":";;;;;;;;;AAAA;;AACA;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,QAAQ,GAAG,OAAOC,OAAP,EAAgB;AAAEC,EAAAA,GAAF;AAAOC,EAAAA,cAAP;AAAuBC,EAAAA;AAAvB,CAAhB,KAAuD;AACtE,MAAID,cAAJ,EAAoB;AAClB,WAAO,2BAAaF,OAAb,EAAsB;AAAEC,MAAAA,GAAF;AAAOC,MAAAA,cAAP;AAAuBC,MAAAA;AAAvB,KAAtB,CAAP;AACD;;AACD,SAAO,6BAAeH,OAAf,EAAwB;AAAEC,IAAAA,GAAF;AAAOE,IAAAA;AAAP,GAAxB,CAAP;AACD,CALD;;eAOeJ,Q","sourcesContent":["import generateFile from './generateFile'\nimport generateString from './generateString'\n\n/**\n * Generates a rules file from the given `ast` or `tokenList` and outputs the\n * rules to the given `outpitFilePath`. If no `outputFilePath` is given, a\n * string is returned.\n *\n * @function\n * @since v0.1.0\n * @category generator\n * @param {Context} context\n * @param {{\n *   ast: AST,\n *   outputFilePath: String,\n *   tokenList: List<Token>\n * }}} options\n * @returns {String}\n * @example\n * import { generate, parse, setupContext } from 'firetree'\n *\n * const context = setupContext()\n *\n * // parse rules into an AST\n * const ast = await parse(context, {\n *   string: 'function () { return true }'\n * })\n *\n * // generate rules and output to file\n * const ast = await generate(context, {\n *   ast,\n *   outputFilePath: 'path/to/firestore.rules'\n * })\n */\nconst generate = async (context, { ast, outputFilePath, tokenList }) => {\n  if (outputFilePath) {\n    return generateFile(context, { ast, outputFilePath, tokenList })\n  }\n  return generateString(context, { ast, tokenList })\n}\n\nexport default generate\n"],"file":"generate.js"}