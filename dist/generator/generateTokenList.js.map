{"version":3,"sources":["../../src/generator/generateTokenList.js"],"names":["generateTokenList","context","ast","accum","node","children","tokenList"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;;;AAEA,MAAMA,iBAAiB,GAAG,CAACC,OAAD,EAAU;AAAEC,EAAAA;AAAF,CAAV,KAAsB;AAC9C;AACA;AACA,SAAO,6BACL,CAACC,KAAD,EAAQC,IAAR,KAAiB;AACf,QAAI,kBAAMA,IAAI,CAACC,QAAX,KAAwB,oBAAQD,IAAI,CAACC,QAAb,CAA5B,EAAoD;AAClD,aAAO,mBAAOF,KAAP,EAAcC,IAAI,CAACE,SAAnB,CAAP;AACD;;AACD,WAAOH,KAAP;AACD,GANI,EAOL,sBAPK,EAQLD,GARK,CAAP;AAUD,CAbD;;eAeeF,iB","sourcesContent":["import { List } from 'immutable'\nimport { concat, isEmpty, isNil } from 'ramda'\n\nimport walkReduceTree from '../ast/walkReduceTree'\n\nconst generateTokenList = (context, { ast }) => {\n  // walk the ast. Find all leaves of the tree and get the tokenList from them.\n  // Concat all leaves together to reform the token list\n  return walkReduceTree(\n    (accum, node) => {\n      if (isNil(node.children) || isEmpty(node.children)) {\n        return concat(accum, node.tokenList)\n      }\n      return accum\n    },\n    List(),\n    ast\n  )\n}\n\nexport default generateTokenList\n"],"file":"generateTokenList.js"}