{"version":3,"sources":["../../src/utils/cacheChain.js"],"names":["makeCacheChain","strongMap","Map","weakMap","WeakMap","makeCacheLink","cacheChain","ref","isWeakKey","value","setCacheKey","key","set","getCacheKey","get","linkCacheKey","link","cache","args","chain","forEach","arg"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA,MAAMA,cAAc,GAAG,OAAO;AAC5BC,EAAAA,SAAS,EAAE,IAAIC,cAAJ,EADiB;AAE5BC,EAAAA,OAAO,EAAE,IAAIC,OAAJ;AAFmB,CAAP,CAAvB;;AAKA,MAAMC,aAAa,GAAG,OAAO;AAC3BC,EAAAA,UAAU,EAAEN,cAAc,EADC;AAE3BO,EAAAA,GAAG,EAAE;AAFsB,CAAP,CAAtB;;AAKA,MAAMC,SAAS,GAAIC,KAAD,IAAW,sBAASA,KAAT,KAAmB,CAAC,4BAAYA,KAAZ,CAAjD;;AAEA,MAAMC,WAAW,GAAG,CAACJ,UAAD,EAAaK,GAAb,EAAkBF,KAAlB,KAA4B;AAC9C,MAAID,SAAS,CAACG,GAAD,CAAb,EAAoB;AAClBL,IAAAA,UAAU,CAACH,OAAX,CAAmBS,GAAnB,CAAuBD,GAAvB,EAA4BF,KAA5B;AACD,GAFD,MAEO;AACLH,IAAAA,UAAU,CAACL,SAAX,GAAuBK,UAAU,CAACL,SAAX,CAAqBW,GAArB,CAAyBD,GAAzB,EAA8BF,KAA9B,CAAvB;AACD;AACF,CAND;;AAQA,MAAMI,WAAW,GAAG,CAACP,UAAD,EAAaK,GAAb,KAAqB;AACvC,MAAIH,SAAS,CAACG,GAAD,CAAb,EAAoB;AAClB,WAAOL,UAAU,CAACH,OAAX,CAAmBW,GAAnB,CAAuBH,GAAvB,CAAP;AACD;;AACD,SAAOL,UAAU,CAACL,SAAX,CAAqBa,GAArB,CAAyBH,GAAzB,CAAP;AACD,CALD;;AAOA,MAAMI,YAAY,GAAG,CAACT,UAAD,EAAaK,GAAb,KAAqB;AACxC,MAAIK,IAAI,GAAGH,WAAW,CAACP,UAAD,EAAaK,GAAb,CAAtB;;AACA,MAAI,CAACK,IAAL,EAAW;AACTA,IAAAA,IAAI,GAAGX,aAAa,EAApB;AACAK,IAAAA,WAAW,CAACJ,UAAD,EAAaK,GAAb,EAAkBK,IAAlB,CAAX;AACD;;AACD,SAAOA,IAAP;AACD,CAPD;;AASA,MAAMC,KAAK,GAAGjB,cAAc,EAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMM,UAAU,GAAG,CAAC,GAAGY,IAAJ,KAAa;AAC9B,MAAIC,KAAK,GAAGF,KAAZ;AACA,MAAID,IAAI,GAAGD,YAAY,CAACI,KAAD,CAAvB;AACAD,EAAAA,IAAI,CAACE,OAAL,CAAcC,GAAD,IAAS;AACpBL,IAAAA,IAAI,GAAGD,YAAY,CAACI,KAAD,EAAQE,GAAR,CAAnB;AACAF,IAAAA,KAAK,GAAGH,IAAI,CAACV,UAAb;AACD,GAHD;AAIA,SAAOU,IAAI,CAACT,GAAZ;AACD,CARD;;eAUeD,U","sourcesContent":["import { Map, isImmutable } from 'immutable'\nimport { isObject } from 'lodash'\n\nconst makeCacheChain = () => ({\n  strongMap: new Map(),\n  weakMap: new WeakMap()\n})\n\nconst makeCacheLink = () => ({\n  cacheChain: makeCacheChain(),\n  ref: {}\n})\n\nconst isWeakKey = (value) => isObject(value) && !isImmutable(value)\n\nconst setCacheKey = (cacheChain, key, value) => {\n  if (isWeakKey(key)) {\n    cacheChain.weakMap.set(key, value)\n  } else {\n    cacheChain.strongMap = cacheChain.strongMap.set(key, value)\n  }\n}\n\nconst getCacheKey = (cacheChain, key) => {\n  if (isWeakKey(key)) {\n    return cacheChain.weakMap.get(key)\n  }\n  return cacheChain.strongMap.get(key)\n}\n\nconst linkCacheKey = (cacheChain, key) => {\n  let link = getCacheKey(cacheChain, key)\n  if (!link) {\n    link = makeCacheLink()\n    setCacheKey(cacheChain, key, link)\n  }\n  return link\n}\n\nconst cache = makeCacheChain()\n\n/**\n * This method generates a specific object instance for use in a WeakMap cache.\n * The object instance is unique based upon the parameters that are passed to\n * the this method.\n *\n * The main use of this method is for generating cache keys for memoization and\n * automatically clearing the cache when a value no longer exists in memory.\n *\n * When a non immutable object is passed as an argument it will be stored into a\n * WeakMap as part of a chain. If that object is ever removed from memory all\n * cache chains connected to the object will automatically be removed from the cache.\n *\n * @private\n * @function\n * @since v0.1.0\n * @category lang.util\n * @param {...*} args The arguments to generate a cache key for\n * @returns {Object} The cache key\n * @example\n *\n *\n */\nconst cacheChain = (...args) => {\n  let chain = cache\n  let link = linkCacheKey(chain)\n  args.forEach((arg) => {\n    link = linkCacheKey(chain, arg)\n    chain = link.cacheChain\n  })\n  return link.ref\n}\n\nexport default cacheChain\n"],"file":"cacheChain.js"}