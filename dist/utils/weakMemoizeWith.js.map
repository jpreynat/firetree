{"version":3,"sources":["../../src/utils/weakMemoizeWith.js"],"names":["weakMemoizeWith","mFn","fn","cache","WeakMap","args","key","has","result","set","get","length"],"mappings":";;;;;;;;;AAAA;;AAEA;;;;AAEA,MAAMA,eAAe,GAAG,mBAAO,CAAP,EAAU,CAACC,GAAD,EAAMC,EAAN,KAAa;AAC7C,QAAMC,KAAK,GAAG,IAAIC,OAAJ,EAAd;AACA,SAAO,mCAAqB,CAAC,GAAGC,IAAJ,KAAa;AACvC,UAAMC,GAAG,GAAGL,GAAG,CAAC,GAAGI,IAAJ,CAAf;;AACA,QAAI,CAACF,KAAK,CAACI,GAAN,CAAUD,GAAV,CAAL,EAAqB;AACnB,YAAME,MAAM,GAAGN,EAAE,CAAC,GAAGG,IAAJ,CAAjB;AACAF,MAAAA,KAAK,CAACM,GAAN,CAAUH,GAAV,EAAeE,MAAf;AACA,aAAOA,MAAP;AACD;;AACD,WAAOL,KAAK,CAACO,GAAN,CAAUJ,GAAV,CAAP;AACD,GARM,EAQJJ,EAAE,CAACS,MARC,CAAP;AASD,CAXuB,CAAxB;eAaeX,e","sourcesContent":["import { curryN } from 'ramda'\n\nimport functionDefineLength from './functionDefineLength'\n\nconst weakMemoizeWith = curryN(2, (mFn, fn) => {\n  const cache = new WeakMap()\n  return functionDefineLength((...args) => {\n    const key = mFn(...args)\n    if (!cache.has(key)) {\n      const result = fn(...args)\n      cache.set(key, result)\n      return result\n    }\n    return cache.get(key)\n  }, fn.length)\n})\n\nexport default weakMemoizeWith\n"],"file":"weakMemoizeWith.js"}