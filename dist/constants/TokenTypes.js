"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WHITESPACE = exports.STRING = exports.OPERATOR_UNARY_PLUS = exports.OPERATOR_UNARY_MINUS = exports.OPERATOR_TILDE = exports.OPERATOR_SEMICOLON = exports.OPERATOR_QUESTION_MARK = exports.OPERATOR_OPEN_PARENTHESIS = exports.OPERATOR_OPEN_CURLY_BRACE = exports.OPERATOR_OPEN_BRACKET = exports.OPERATOR_MULTIPLY = exports.OPERATOR_MODULUS = exports.OPERATOR_LOGICAL_OR = exports.OPERATOR_LOGICAL_NOT = exports.OPERATOR_LOGICAL_AND = exports.OPERATOR_LESS_THAN_EQUAL = exports.OPERATOR_LESS_THAN = exports.OPERATOR_INFINITY = exports.OPERATOR_INEQUALITY = exports.OPERATOR_GREATER_THAN_EQUAL = exports.OPERATOR_GREATER_THAN = exports.OPERATOR_EQUALITY = exports.OPERATOR_DOT = exports.OPERATOR_DOLLAR_SIGN = exports.OPERATOR_DIVIDE = exports.OPERATOR_COMMA = exports.OPERATOR_COLON = exports.OPERATOR_CLOSE_PARENTHESIS = exports.OPERATOR_CLOSE_CURLY_BRACE = exports.OPERATOR_CLOSE_BRACKET = exports.OPERATOR_BACKWARD_SLASH = exports.OPERATOR_AT_SIGN = exports.OPERATOR_ASSIGNMENT = exports.OPERATOR_AMPERSAND = exports.NUMBER = exports.KEYWORD_SERVICE = exports.KEYWORD_RETURN = exports.KEYWORD_MATCH = exports.KEYWORD_LET = exports.KEYWORD_IS = exports.KEYWORD_IN = exports.KEYWORD_IF = exports.KEYWORD_FUNCTION = exports.KEYWORD_ALLOW = exports.IDENTIFIER = exports.COMMENT = exports.BYTES = void 0;
const BYTES = 'Bytes';
exports.BYTES = BYTES;
const COMMENT = 'Comment';
exports.COMMENT = COMMENT;
const IDENTIFIER = 'Identifier';
exports.IDENTIFIER = IDENTIFIER;
const KEYWORD_ALLOW = 'KeywordAllow';
exports.KEYWORD_ALLOW = KEYWORD_ALLOW;
const KEYWORD_FUNCTION = 'KeywordFunction';
exports.KEYWORD_FUNCTION = KEYWORD_FUNCTION;
const KEYWORD_IF = 'KeywordIf';
exports.KEYWORD_IF = KEYWORD_IF;
const KEYWORD_IN = 'KeywordIn';
exports.KEYWORD_IN = KEYWORD_IN;
const KEYWORD_IS = 'KeywordIs';
exports.KEYWORD_IS = KEYWORD_IS;
const KEYWORD_LET = 'KeywordLet';
exports.KEYWORD_LET = KEYWORD_LET;
const KEYWORD_MATCH = 'KeywordMatch';
exports.KEYWORD_MATCH = KEYWORD_MATCH;
const KEYWORD_RETURN = 'KeywordReturn';
exports.KEYWORD_RETURN = KEYWORD_RETURN;
const KEYWORD_SERVICE = 'KeywordService';
exports.KEYWORD_SERVICE = KEYWORD_SERVICE;
const NUMBER = 'Number';
exports.NUMBER = NUMBER;
const OPERATOR_AMPERSAND = 'OperatorAmpersand';
exports.OPERATOR_AMPERSAND = OPERATOR_AMPERSAND;
const OPERATOR_ASSIGNMENT = 'OperatorAssignment';
exports.OPERATOR_ASSIGNMENT = OPERATOR_ASSIGNMENT;
const OPERATOR_AT_SIGN = 'OperatorAtSign';
exports.OPERATOR_AT_SIGN = OPERATOR_AT_SIGN;
const OPERATOR_BACKWARD_SLASH = 'OperatorBackwardSlash';
exports.OPERATOR_BACKWARD_SLASH = OPERATOR_BACKWARD_SLASH;
const OPERATOR_CLOSE_BRACKET = 'OperatorCloseBracket';
exports.OPERATOR_CLOSE_BRACKET = OPERATOR_CLOSE_BRACKET;
const OPERATOR_CLOSE_CURLY_BRACE = 'OperatorCloseCurlyBrace';
exports.OPERATOR_CLOSE_CURLY_BRACE = OPERATOR_CLOSE_CURLY_BRACE;
const OPERATOR_CLOSE_PARENTHESIS = 'OperatorCloseParenthesis';
exports.OPERATOR_CLOSE_PARENTHESIS = OPERATOR_CLOSE_PARENTHESIS;
const OPERATOR_COLON = 'OperatorColon';
exports.OPERATOR_COLON = OPERATOR_COLON;
const OPERATOR_COMMA = 'OperatorComma';
exports.OPERATOR_COMMA = OPERATOR_COMMA;
const OPERATOR_DIVIDE = 'OperatorDivide';
exports.OPERATOR_DIVIDE = OPERATOR_DIVIDE;
const OPERATOR_DOLLAR_SIGN = 'OperatorDollarSign';
exports.OPERATOR_DOLLAR_SIGN = OPERATOR_DOLLAR_SIGN;
const OPERATOR_DOT = 'OperatorDot';
exports.OPERATOR_DOT = OPERATOR_DOT;
const OPERATOR_EQUALITY = 'OperatorEquality';
exports.OPERATOR_EQUALITY = OPERATOR_EQUALITY;
const OPERATOR_GREATER_THAN = 'OperatorGreaterThan';
exports.OPERATOR_GREATER_THAN = OPERATOR_GREATER_THAN;
const OPERATOR_GREATER_THAN_EQUAL = 'OperatorGreaterThanEqual';
exports.OPERATOR_GREATER_THAN_EQUAL = OPERATOR_GREATER_THAN_EQUAL;
const OPERATOR_INEQUALITY = 'OperatorInequality';
exports.OPERATOR_INEQUALITY = OPERATOR_INEQUALITY;
const OPERATOR_INFINITY = 'OperatorInfinity';
exports.OPERATOR_INFINITY = OPERATOR_INFINITY;
const OPERATOR_LESS_THAN = 'OperatorLessThan';
exports.OPERATOR_LESS_THAN = OPERATOR_LESS_THAN;
const OPERATOR_LESS_THAN_EQUAL = 'OperatorLessThanEqual';
exports.OPERATOR_LESS_THAN_EQUAL = OPERATOR_LESS_THAN_EQUAL;
const OPERATOR_LOGICAL_AND = 'OperatorLogicalAnd';
exports.OPERATOR_LOGICAL_AND = OPERATOR_LOGICAL_AND;
const OPERATOR_LOGICAL_NOT = 'OperatorLogicalNot';
exports.OPERATOR_LOGICAL_NOT = OPERATOR_LOGICAL_NOT;
const OPERATOR_LOGICAL_OR = 'OperatorLogicalOr';
exports.OPERATOR_LOGICAL_OR = OPERATOR_LOGICAL_OR;
const OPERATOR_MODULUS = 'OperatorModulus';
exports.OPERATOR_MODULUS = OPERATOR_MODULUS;
const OPERATOR_MULTIPLY = 'OperatorMultiply';
exports.OPERATOR_MULTIPLY = OPERATOR_MULTIPLY;
const OPERATOR_OPEN_BRACKET = 'OperatorOpenBracket';
exports.OPERATOR_OPEN_BRACKET = OPERATOR_OPEN_BRACKET;
const OPERATOR_OPEN_CURLY_BRACE = 'OperatorOpenCurlyBrace';
exports.OPERATOR_OPEN_CURLY_BRACE = OPERATOR_OPEN_CURLY_BRACE;
const OPERATOR_OPEN_PARENTHESIS = 'OperatorOpenParenthesis';
exports.OPERATOR_OPEN_PARENTHESIS = OPERATOR_OPEN_PARENTHESIS;
const OPERATOR_QUESTION_MARK = 'OperatorQuestionMark';
exports.OPERATOR_QUESTION_MARK = OPERATOR_QUESTION_MARK;
const OPERATOR_SEMICOLON = 'OperatorSemicolon';
exports.OPERATOR_SEMICOLON = OPERATOR_SEMICOLON;
const OPERATOR_TILDE = 'OperatorTilde';
exports.OPERATOR_TILDE = OPERATOR_TILDE;
const OPERATOR_UNARY_MINUS = 'OperatorUnaryMinus';
exports.OPERATOR_UNARY_MINUS = OPERATOR_UNARY_MINUS;
const OPERATOR_UNARY_PLUS = 'OperatorUnaryPlus';
exports.OPERATOR_UNARY_PLUS = OPERATOR_UNARY_PLUS;
const STRING = 'String';
exports.STRING = STRING;
const WHITESPACE = 'Whitespace';
exports.WHITESPACE = WHITESPACE;
//# sourceMappingURL=TokenTypes.js.map