{"version":3,"sources":["../../src/constants/TokenTypes.js"],"names":["BYTES","COMMENT","IDENTIFIER","KEYWORD_ALLOW","KEYWORD_FUNCTION","KEYWORD_IF","KEYWORD_IN","KEYWORD_IS","KEYWORD_LET","KEYWORD_MATCH","KEYWORD_RETURN","KEYWORD_SERVICE","NUMBER","OPERATOR_AMPERSAND","OPERATOR_ASSIGNMENT","OPERATOR_AT_SIGN","OPERATOR_BACKWARD_SLASH","OPERATOR_CLOSE_BRACKET","OPERATOR_CLOSE_CURLY_BRACE","OPERATOR_CLOSE_PARENTHESIS","OPERATOR_COLON","OPERATOR_COMMA","OPERATOR_DIVIDE","OPERATOR_DOLLAR_SIGN","OPERATOR_DOT","OPERATOR_EQUALITY","OPERATOR_GREATER_THAN","OPERATOR_GREATER_THAN_EQUAL","OPERATOR_INEQUALITY","OPERATOR_INFINITY","OPERATOR_LESS_THAN","OPERATOR_LESS_THAN_EQUAL","OPERATOR_LOGICAL_AND","OPERATOR_LOGICAL_NOT","OPERATOR_LOGICAL_OR","OPERATOR_MODULUS","OPERATOR_MULTIPLY","OPERATOR_OPEN_BRACKET","OPERATOR_OPEN_CURLY_BRACE","OPERATOR_OPEN_PARENTHESIS","OPERATOR_QUESTION_MARK","OPERATOR_SEMICOLON","OPERATOR_TILDE","OPERATOR_UNARY_MINUS","OPERATOR_UNARY_PLUS","STRING","WHITESPACE"],"mappings":";;;;;;AAAO,MAAMA,KAAK,GAAG,OAAd;;AACA,MAAMC,OAAO,GAAG,SAAhB;;AACA,MAAMC,UAAU,GAAG,YAAnB;;AACA,MAAMC,aAAa,GAAG,cAAtB;;AACA,MAAMC,gBAAgB,GAAG,iBAAzB;;AACA,MAAMC,UAAU,GAAG,WAAnB;;AACA,MAAMC,UAAU,GAAG,WAAnB;;AACA,MAAMC,UAAU,GAAG,WAAnB;;AACA,MAAMC,WAAW,GAAG,YAApB;;AACA,MAAMC,aAAa,GAAG,cAAtB;;AACA,MAAMC,cAAc,GAAG,eAAvB;;AACA,MAAMC,eAAe,GAAG,gBAAxB;;AACA,MAAMC,MAAM,GAAG,QAAf;;AACA,MAAMC,kBAAkB,GAAG,mBAA3B;;AACA,MAAMC,mBAAmB,GAAG,oBAA5B;;AACA,MAAMC,gBAAgB,GAAG,gBAAzB;;AACA,MAAMC,uBAAuB,GAAG,uBAAhC;;AACA,MAAMC,sBAAsB,GAAG,sBAA/B;;AACA,MAAMC,0BAA0B,GAAG,yBAAnC;;AACA,MAAMC,0BAA0B,GAAG,0BAAnC;;AACA,MAAMC,cAAc,GAAG,eAAvB;;AACA,MAAMC,cAAc,GAAG,eAAvB;;AACA,MAAMC,eAAe,GAAG,gBAAxB;;AACA,MAAMC,oBAAoB,GAAG,oBAA7B;;AACA,MAAMC,YAAY,GAAG,aAArB;;AACA,MAAMC,iBAAiB,GAAG,kBAA1B;;AACA,MAAMC,qBAAqB,GAAG,qBAA9B;;AACA,MAAMC,2BAA2B,GAAG,0BAApC;;AACA,MAAMC,mBAAmB,GAAG,oBAA5B;;AACA,MAAMC,iBAAiB,GAAG,kBAA1B;;AACA,MAAMC,kBAAkB,GAAG,kBAA3B;;AACA,MAAMC,wBAAwB,GAAG,uBAAjC;;AACA,MAAMC,oBAAoB,GAAG,oBAA7B;;AACA,MAAMC,oBAAoB,GAAG,oBAA7B;;AACA,MAAMC,mBAAmB,GAAG,mBAA5B;;AACA,MAAMC,gBAAgB,GAAG,iBAAzB;;AACA,MAAMC,iBAAiB,GAAG,kBAA1B;;AACA,MAAMC,qBAAqB,GAAG,qBAA9B;;AACA,MAAMC,yBAAyB,GAAG,wBAAlC;;AACA,MAAMC,yBAAyB,GAAG,yBAAlC;;AACA,MAAMC,sBAAsB,GAAG,sBAA/B;;AACA,MAAMC,kBAAkB,GAAG,mBAA3B;;AACA,MAAMC,cAAc,GAAG,eAAvB;;AACA,MAAMC,oBAAoB,GAAG,oBAA7B;;AACA,MAAMC,mBAAmB,GAAG,mBAA5B;;AACA,MAAMC,MAAM,GAAG,QAAf;;AACA,MAAMC,UAAU,GAAG,YAAnB","sourcesContent":["export const BYTES = 'Bytes'\nexport const COMMENT = 'Comment'\nexport const IDENTIFIER = 'Identifier'\nexport const KEYWORD_ALLOW = 'KeywordAllow'\nexport const KEYWORD_FUNCTION = 'KeywordFunction'\nexport const KEYWORD_IF = 'KeywordIf'\nexport const KEYWORD_IN = 'KeywordIn'\nexport const KEYWORD_IS = 'KeywordIs'\nexport const KEYWORD_LET = 'KeywordLet'\nexport const KEYWORD_MATCH = 'KeywordMatch'\nexport const KEYWORD_RETURN = 'KeywordReturn'\nexport const KEYWORD_SERVICE = 'KeywordService'\nexport const NUMBER = 'Number'\nexport const OPERATOR_AMPERSAND = 'OperatorAmpersand'\nexport const OPERATOR_ASSIGNMENT = 'OperatorAssignment'\nexport const OPERATOR_AT_SIGN = 'OperatorAtSign'\nexport const OPERATOR_BACKWARD_SLASH = 'OperatorBackwardSlash'\nexport const OPERATOR_CLOSE_BRACKET = 'OperatorCloseBracket'\nexport const OPERATOR_CLOSE_CURLY_BRACE = 'OperatorCloseCurlyBrace'\nexport const OPERATOR_CLOSE_PARENTHESIS = 'OperatorCloseParenthesis'\nexport const OPERATOR_COLON = 'OperatorColon'\nexport const OPERATOR_COMMA = 'OperatorComma'\nexport const OPERATOR_DIVIDE = 'OperatorDivide'\nexport const OPERATOR_DOLLAR_SIGN = 'OperatorDollarSign'\nexport const OPERATOR_DOT = 'OperatorDot'\nexport const OPERATOR_EQUALITY = 'OperatorEquality'\nexport const OPERATOR_GREATER_THAN = 'OperatorGreaterThan'\nexport const OPERATOR_GREATER_THAN_EQUAL = 'OperatorGreaterThanEqual'\nexport const OPERATOR_INEQUALITY = 'OperatorInequality'\nexport const OPERATOR_INFINITY = 'OperatorInfinity'\nexport const OPERATOR_LESS_THAN = 'OperatorLessThan'\nexport const OPERATOR_LESS_THAN_EQUAL = 'OperatorLessThanEqual'\nexport const OPERATOR_LOGICAL_AND = 'OperatorLogicalAnd'\nexport const OPERATOR_LOGICAL_NOT = 'OperatorLogicalNot'\nexport const OPERATOR_LOGICAL_OR = 'OperatorLogicalOr'\nexport const OPERATOR_MODULUS = 'OperatorModulus'\nexport const OPERATOR_MULTIPLY = 'OperatorMultiply'\nexport const OPERATOR_OPEN_BRACKET = 'OperatorOpenBracket'\nexport const OPERATOR_OPEN_CURLY_BRACE = 'OperatorOpenCurlyBrace'\nexport const OPERATOR_OPEN_PARENTHESIS = 'OperatorOpenParenthesis'\nexport const OPERATOR_QUESTION_MARK = 'OperatorQuestionMark'\nexport const OPERATOR_SEMICOLON = 'OperatorSemicolon'\nexport const OPERATOR_TILDE = 'OperatorTilde'\nexport const OPERATOR_UNARY_MINUS = 'OperatorUnaryMinus'\nexport const OPERATOR_UNARY_PLUS = 'OperatorUnaryPlus'\nexport const STRING = 'String'\nexport const WHITESPACE = 'Whitespace'\n"],"file":"TokenTypes.js"}