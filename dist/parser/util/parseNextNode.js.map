{"version":3,"sources":["../../../src/parser/util/parseNextNode.js"],"names":["parseNextNode","parsers","context","tokenList","rest","Error","nodeParser","parser","test","lastLineCharacterCount","lineCount","get","value","parse","name"],"mappings":";;;;;;;;;AAAA;;AAEA;;;;AAEA,MAAMA,aAAa,GAAG,kBAAM,CAACC,OAAD,EAAUC,OAAV,EAAmBC,SAAnB,EAA8B,GAAGC,IAAjC,KAA0C;AACpE,MAAI,CAACF,OAAL,EAAc;AACZ,UAAM,IAAIG,KAAJ,CAAU,yBAAV,CAAN;AACD;;AACD,QAAMC,UAAU,GAAG,iBAAMC,MAAD,IAAYA,MAAM,CAACC,IAAP,CAAYN,OAAZ,EAAqBC,SAArB,EAAgC,GAAGC,IAAnC,CAAjB,EAA2DH,OAA3D,CAAnB;;AACA,MAAI,CAACK,UAAL,EAAiB;AACf,UAAM;AAAEG,MAAAA,sBAAF;AAA0BC,MAAAA;AAA1B,QAAwC,mCAAqBR,OAArB,EAA8BC,SAA9B,CAA9C;AACA,UAAM,IAAIE,KAAJ,CACH,qBAAoBF,SAAS,CAACQ,GAAV,CAAc,CAAd,EAAiBC,KAAM,QAAOF,SAAU,IAAGD,sBAAuB,EADnF,CAAN;AAGD;;AACD,MAAI,CAACH,UAAU,CAACO,KAAhB,EAAuB;AACrB,UAAM,IAAIR,KAAJ,CAAW,GAAEC,UAAU,CAACQ,IAAK,gDAA7B,CAAN;AACD;;AACD,SAAOR,UAAU,CAACO,KAAX,CAAiBX,OAAjB,EAA0BC,SAA1B,EAAqC,GAAGC,IAAxC,CAAP;AACD,CAfqB,CAAtB;eAiBeJ,a","sourcesContent":["import { curry, find } from 'ramda'\n\nimport getTokenListPosition from './getTokenListPosition'\n\nconst parseNextNode = curry((parsers, context, tokenList, ...rest) => {\n  if (!context) {\n    throw new Error('context must be defined')\n  }\n  const nodeParser = find((parser) => parser.test(context, tokenList, ...rest), parsers)\n  if (!nodeParser) {\n    const { lastLineCharacterCount, lineCount } = getTokenListPosition(context, tokenList)\n    throw new Error(\n      `Unexpected token '${tokenList.get(0).value}' at ${lineCount}:${lastLineCharacterCount}`\n    )\n  }\n  if (!nodeParser.parse) {\n    throw new Error(`${nodeParser.name} parser does not implement the 'parse' method.`)\n  }\n  return nodeParser.parse(context, tokenList, ...rest)\n})\n\nexport default parseNextNode\n"],"file":"parseNextNode.js"}