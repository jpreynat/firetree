{"version":3,"sources":["../../../src/parser/util/identifyNextNode.js"],"names":["identifyNextNode","identifiers","context","node","rest","Error","nodeIdentifier","JSON","stringify","identify","name"],"mappings":";;;;;;;;;AAAA;;AAEA;;AAEA,MAAMA,gBAAgB,GAAG,kBAAM,CAACC,WAAD,EAAcC,OAAd,EAAuBC,IAAvB,EAA6B,GAAGC,IAAhC,KAAyC;AACtE,MAAI,CAACF,OAAL,EAAc;AACZ,UAAM,IAAIG,KAAJ,CAAU,yBAAV,CAAN;AACD;;AACD,QAAMC,cAAc,GAAG,yBAAeL,WAAf,EAA4BE,IAA5B,CAAvB;;AACA,MAAI,CAACG,cAAL,EAAqB;AACnB,UAAM,IAAID,KAAJ,CAAW,4BAA2BE,IAAI,CAACC,SAAL,CAAeL,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAA8B,GAApE,CAAN;AACD;;AACD,MAAI,CAACG,cAAc,CAACG,QAApB,EAA8B;AAC5B,UAAM,IAAIJ,KAAJ,CAAW,GAAEC,cAAc,CAACI,IAAK,uDAAjC,CAAN;AACD;;AACD,SAAOJ,cAAc,CAACG,QAAf,CAAwBP,OAAxB,EAAiCC,IAAjC,EAAuC,GAAGC,IAA1C,CAAP;AACD,CAZwB,CAAzB;eAceJ,gB","sourcesContent":["import { curry } from 'ramda'\n\nimport { findIdentifier } from '../../ast'\n\nconst identifyNextNode = curry((identifiers, context, node, ...rest) => {\n  if (!context) {\n    throw new Error('context must be defined')\n  }\n  const nodeIdentifier = findIdentifier(identifiers, node)\n  if (!nodeIdentifier) {\n    throw new Error(`Could not identify node '${JSON.stringify(node, null, 2)}'`)\n  }\n  if (!nodeIdentifier.identify) {\n    throw new Error(`${nodeIdentifier.name} identifier does not implement the 'identify' method.`)\n  }\n  return nodeIdentifier.identify(context, node, ...rest)\n})\n\nexport default identifyNextNode\n"],"file":"identifyNextNode.js"}