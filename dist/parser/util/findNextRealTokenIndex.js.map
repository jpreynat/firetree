{"version":3,"sources":["../../../src/parser/util/findNextRealTokenIndex.js"],"names":["findNextRealTokenIndex","tokenList","startIndex","tokenIndex","token","get","type","TokenTypes","WHITESPACE","COMMENT","keySeq","toArray","size"],"mappings":";;;;;;;AAAA;;AAEA;;AAEA,MAAMA,sBAAsB,GAAG,CAACC,SAAD,EAAYC,UAAU,GAAG,CAAzB,KAC7B,iBACGC,UAAD,IAAgB;AACd,QAAMC,KAAK,GAAGH,SAAS,CAACI,GAAV,CAAcF,UAAd,CAAd;AACA,SAAOC,KAAK,CAACE,IAAN,KAAeC,sBAAWC,UAA1B,IAAwCJ,KAAK,CAACE,IAAN,KAAeC,sBAAWE,OAAzE;AACD,CAJH,EAKEP,UAAU,KAAK,CAAf,GACID,SAAS,CAACS,MAAV,GAAmBC,OAAnB,EADJ,GAEI,kBAAMT,UAAN,EAAkBD,SAAS,CAACW,IAA5B,EAAkCX,SAAlC,EAA6CS,MAA7C,GAAsDC,OAAtD,EAPN,CADF;;eAWeX,sB","sourcesContent":["import { find, slice } from 'ramda'\n\nimport { TokenTypes } from '../../constants'\n\nconst findNextRealTokenIndex = (tokenList, startIndex = 0) =>\n  find(\n    (tokenIndex) => {\n      const token = tokenList.get(tokenIndex)\n      return token.type !== TokenTypes.WHITESPACE && token.type !== TokenTypes.COMMENT\n    },\n    startIndex === 0\n      ? tokenList.keySeq().toArray()\n      : slice(startIndex, tokenList.size, tokenList).keySeq().toArray()\n  )\n\nexport default findNextRealTokenIndex\n"],"file":"findNextRealTokenIndex.js"}