{"version":3,"sources":["../../../src/parser/nodes/UnaryMinusOperator.js"],"names":["UnaryMinusOperator","identify","context","node","is","value","type","NodeTypes","OPERATOR","operatorType","OperatorTypes","UNARY_MINUS","parse","tokenList","nextToken","get","Error","Operators","TokenTypes","OPERATOR_UNARY_MINUS","lastLineCharacterCount","lineCount","id","test","ParserTypes"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AACA;;AAEA,MAAMA,kBAAkB,GAAG;AACzBC,EAAAA,QAAQ,EAAE,CAACC,OAAD,EAAUC,IAAV,KAAmBA,IADJ;AAEzBC,EAAAA,EAAE,EAAGC,KAAD,IACFA,KAAK,IAAIA,KAAK,CAACC,IAAN,KAAeC,qBAAUC,QAAlC,IAA8CH,KAAK,CAACI,YAAN,KAAuBC,yBAAcC,WAH5D;AAIzBC,EAAAA,KAAK,EAAE,CAACV,OAAD,EAAUW,SAAV,KAAwB;AAC7B,UAAMC,SAAS,GAAGD,SAAS,CAACE,GAAV,CAAc,CAAd,CAAlB;;AACA,QAAI,CAACD,SAAL,EAAgB;AACd,YAAM,IAAIE,KAAJ,CACH,sBAAqBC,qBAAUN,WAAY,yCADxC,CAAN;AAGD;;AACD,QAAIG,SAAS,CAACR,IAAV,KAAmBY,sBAAWC,oBAAlC,EAAwD;AACtD,YAAM;AAAEC,QAAAA,sBAAF;AAA0BC,QAAAA;AAA1B,UAAwC,gCAAqBnB,OAArB,EAA8BW,SAA9B,CAA9C;AACA,YAAM,IAAIG,KAAJ,CACH,sBAAqBC,qBAAUN,WAAY,yBAC1CE,SAAS,CAACE,GAAV,CAAc,CAAd,EAAiBV,KAClB,QAAOgB,SAAU,IAAGD,sBAAuB,EAHxC,CAAN;AAKD;;AACD,WAAO;AACLE,MAAAA,EAAE,EAAE,eADC;AAELb,MAAAA,YAAY,EAAEC,yBAAcC,WAFvB;AAGLE,MAAAA,SAAS,EAAE,kBAAM,CAAN,EAAS,CAAT,EAAYA,SAAZ,CAHN;AAILP,MAAAA,IAAI,EAAEC,qBAAUC,QAJX;AAKLH,MAAAA,KAAK,EAAES,SAAS,CAACT;AALZ,KAAP;AAOD,GA1BwB;AA2BzBkB,EAAAA,IAAI,EAAE,CAACrB,OAAD,EAAUW,SAAV,KAAwBA,SAAS,CAACE,GAAV,CAAc,CAAd,EAAiBT,IAAjB,KAA0BY,sBAAWC,oBA3B1C;AA4BzBb,EAAAA,IAAI,EAAEkB,uBAAYhB;AA5BO,CAA3B;eA+BeR,kB","sourcesContent":["import { slice } from 'ramda'\nimport { v4 as uuidv4 } from 'uuid'\n\nimport { NodeTypes, OperatorTypes, Operators, ParserTypes, TokenTypes } from '../../constants'\nimport { getTokenListPosition } from '../util'\n\nconst UnaryMinusOperator = {\n  identify: (context, node) => node,\n  is: (value) =>\n    value && value.type === NodeTypes.OPERATOR && value.operatorType === OperatorTypes.UNARY_MINUS,\n  parse: (context, tokenList) => {\n    const nextToken = tokenList.get(0)\n    if (!nextToken) {\n      throw new Error(\n        `Expected operator '${Operators.UNARY_MINUS}'. Instead reached the end of the file.`\n      )\n    }\n    if (nextToken.type !== TokenTypes.OPERATOR_UNARY_MINUS) {\n      const { lastLineCharacterCount, lineCount } = getTokenListPosition(context, tokenList)\n      throw new Error(\n        `Expected operator '${Operators.UNARY_MINUS}'. Instead was given '${\n          tokenList.get(0).value\n        }' at ${lineCount}:${lastLineCharacterCount}`\n      )\n    }\n    return {\n      id: uuidv4(),\n      operatorType: OperatorTypes.UNARY_MINUS,\n      tokenList: slice(0, 1, tokenList),\n      type: NodeTypes.OPERATOR,\n      value: nextToken.value\n    }\n  },\n  test: (context, tokenList) => tokenList.get(0).type === TokenTypes.OPERATOR_UNARY_MINUS,\n  type: ParserTypes.OPERATOR\n}\n\nexport default UnaryMinusOperator\n"],"file":"UnaryMinusOperator.js"}