{"version":3,"sources":["../../../src/parser/nodes/MatchStatement.js"],"names":["parseMatchStatementTokens","parseMatchKeyword","parseWhitespaceAndComments","parsePath","parseBody","createMatchStatement","identifyMatchStatementChildren","expectMatchKeyword","skipWhitespaceAndComments","identifyPath","identifyBody","MatchStatement","identify","context","node","children","is","value","type","NodeTypes","MATCH_STATEMENT","parse","tokenList","test","firstToken","get","TokenTypes","KEYWORD_MATCH","ParserTypes","STATEMENT"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;AAEA,MAAMA,yBAAyB,GAAG,iBAChCC,0BADgC,EAEhCC,mCAFgC,EAGhCC,kBAHgC,EAIhCD,mCAJgC,EAKhCE,kBALgC,EAMhCC,6BANgC,CAAlC;AASA,MAAMC,8BAA8B,GAAG,iBACrCC,2BADqC,EAErCC,kCAFqC,EAGrCC,qBAHqC,EAIrCD,kCAJqC,EAKrCE,qBALqC,CAAvC;AAQA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,QAAQ,EAAE,CAACC,OAAD,EAAUC,IAAV,KACR,mEACKR,8BAA8B,iCAC5BQ,IAD4B;AAE/BD,IAAAA;AAF+B,KADnC;AAKEE,IAAAA,QAAQ,EAAED,IAAI,CAACC;AALjB,KAFmB;AASrBC,EAAAA,EAAE,EAAGC,KAAD,IAAWA,KAAK,IAAIA,KAAK,CAACC,IAAN,KAAeC,qBAAUC,eAT5B;AAUrBC,EAAAA,KAAK,EAAE,CAACR,OAAD,EAAUS,SAAV,KAAwBtB,yBAAyB,CAAC;AAAEe,IAAAA,QAAQ,EAAE,EAAZ;AAAgBF,IAAAA,OAAhB;AAAyBS,IAAAA;AAAzB,GAAD,CAVnC;AAWrBC,EAAAA,IAAI,EAAE,CAACV,OAAD,EAAUS,SAAV,KAAwB;AAC5B,UAAME,UAAU,GAAGF,SAAS,CAACG,GAAV,CAAc,CAAd,CAAnB;AACA,WAAOD,UAAU,CAACN,IAAX,KAAoBQ,sBAAWC,aAAtC;AACD,GAdoB;AAerBT,EAAAA,IAAI,EAAEU,uBAAYC;AAfG,CAAvB;eAkBelB,c","sourcesContent":["import { pipe } from 'ramda'\n\nimport { NodeTypes, ParserTypes, TokenTypes } from '../../constants'\nimport createMatchStatement from '../pipes/createMatchStatement'\nimport expectMatchKeyword from '../pipes/expectMatchKeyword'\nimport identifyBody from '../pipes/identifyBody'\nimport identifyPath from '../pipes/identifyPath'\nimport parseBody from '../pipes/parseBody'\nimport parseMatchKeyword from '../pipes/parseMatchKeyword'\nimport parsePath from '../pipes/parsePath'\nimport parseWhitespaceAndComments from '../pipes/parseWhitespaceAndComments'\nimport skipWhitespaceAndComments from '../pipes/skipWhitespaceAndComments'\n\nconst parseMatchStatementTokens = pipe(\n  parseMatchKeyword,\n  parseWhitespaceAndComments,\n  parsePath,\n  parseWhitespaceAndComments,\n  parseBody,\n  createMatchStatement\n)\n\nconst identifyMatchStatementChildren = pipe(\n  expectMatchKeyword,\n  skipWhitespaceAndComments,\n  identifyPath,\n  skipWhitespaceAndComments,\n  identifyBody\n)\n\nconst MatchStatement = {\n  identify: (context, node) =>\n    createMatchStatement({\n      ...identifyMatchStatementChildren({\n        ...node,\n        context\n      }),\n      children: node.children\n    }),\n  is: (value) => value && value.type === NodeTypes.MATCH_STATEMENT,\n  parse: (context, tokenList) => parseMatchStatementTokens({ children: [], context, tokenList }),\n  test: (context, tokenList) => {\n    const firstToken = tokenList.get(0)\n    return firstToken.type === TokenTypes.KEYWORD_MATCH\n  },\n  type: ParserTypes.STATEMENT\n}\n\nexport default MatchStatement\n"],"file":"MatchStatement.js"}