{"version":3,"sources":["../../../src/parser/nodes/Operator.js"],"names":["Operator","identify","context","node","rest","Operators","type","Error","is","value","NodeTypes","OPERATOR","parse","tokenList","prevExpression","test"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,QAAQ,GAAG;AACfC,EAAAA,QAAQ,EAAE,CAACC,OAAD,EAAUC,IAAV,EAAgB,GAAGC,IAAnB,KAA4B;AACpC,UAAM;AAAEC,MAAAA;AAAF,QAAgBH,OAAtB;AACA,UAAMI,IAAI,GAAG,yBAAeD,SAAf,EAA0BF,IAA1B,CAAb;;AACA,QAAI,CAACG,IAAL,EAAW;AACT,YAAM,IAAIC,KAAJ,CAAW,0CAAyCJ,IAAK,EAAzD,CAAN;AACD;;AACD,WAAOG,IAAI,CAACL,QAAL,CAAcC,OAAd,EAAuBC,IAAvB,EAA6B,GAAGC,IAAhC,CAAP;AACD,GARc;AASfI,EAAAA,EAAE,EAAGC,KAAD,IAAWA,KAAK,CAACH,IAAN,KAAeI,qBAAUC,QATzB;AAUfC,EAAAA,KAAK,EAAE,CAACV,OAAD,EAAUW,SAAV,EAAqBC,cAAc,GAAG,IAAtC,KACL,4BAAcZ,OAAO,CAACG,SAAtB,EAAiCH,OAAjC,EAA0CW,SAA1C,EAAqDC,cAArD,CAXa;AAYfC,EAAAA,IAAI,EAAE,CAACb,OAAD,EAAUW,SAAV,EAAqBC,cAAc,GAAG,IAAtC,KACJ,2BAAaZ,OAAO,CAACG,SAArB,EAAgCH,OAAhC,EAAyCW,SAAzC,EAAoDC,cAApD;AAba,CAAjB;eAgBed,Q","sourcesContent":["import { findIdentifier } from '../../ast'\nimport { NodeTypes } from '../../constants'\nimport parseNextNode from '../util/parseNextNode'\nimport testNextNode from '../util/testNextNode'\n\nconst Operator = {\n  identify: (context, node, ...rest) => {\n    const { Operators } = context\n    const type = findIdentifier(Operators, node)\n    if (!type) {\n      throw new Error(`Could not find Operator Identifier for ${node}`)\n    }\n    return type.identify(context, node, ...rest)\n  },\n  is: (value) => value.type === NodeTypes.OPERATOR,\n  parse: (context, tokenList, prevExpression = null) =>\n    parseNextNode(context.Operators, context, tokenList, prevExpression),\n  test: (context, tokenList, prevExpression = null) =>\n    testNextNode(context.Operators, context, tokenList, prevExpression)\n}\n\nexport default Operator\n"],"file":"Operator.js"}