{"version":3,"sources":["../../../src/parser/nodes/Entry.js"],"names":["parseEntryTokens","parseKey","parseWhitespaceAndComments","parseColonOperator","parseValue","createEntry","identifyEntryChildren","identifyKey","skipWhitespaceAndComments","expectColonOperator","identifyValue","Entry","identify","context","node","children","is","value","type","NodeTypes","ENTRY","parse","tokenList","test"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;AAEA,MAAMA,gBAAgB,GAAG,iBACvBC,iBADuB,EAEvBC,mCAFuB,EAGvBC,2BAHuB,EAIvBD,mCAJuB,EAKvBE,mBALuB,EAMvBC,oBANuB,CAAzB;AASA,MAAMC,qBAAqB,GAAG,iBAC5BC,oBAD4B,EAE5BC,kCAF4B,EAG5BC,4BAH4B,EAI5BD,kCAJ4B,EAK5BE,sBAL4B,CAA9B;AAQA,MAAMC,KAAK,GAAG;AACZC,EAAAA,QAAQ,EAAE,CAACC,OAAD,EAAUC,IAAV,KACR,0DACKR,qBAAqB,iCACnBQ,IADmB;AAEtBD,IAAAA;AAFsB,KAD1B;AAKEE,IAAAA,QAAQ,EAAED,IAAI,CAACC;AALjB,KAFU;AASZC,EAAAA,EAAE,EAAGC,KAAD,IAAWA,KAAK,IAAIA,KAAK,CAACC,IAAN,KAAeC,qBAAUC,KATrC;AAUZC,EAAAA,KAAK,EAAE,CAACR,OAAD,EAAUS,SAAV,KAAwBtB,gBAAgB,CAAC;AAAEe,IAAAA,QAAQ,EAAE,EAAZ;AAAgBF,IAAAA,OAAhB;AAAyBS,IAAAA;AAAzB,GAAD,CAVnC;AAWZC,EAAAA,IAAI,EAAE,MAAM;AAXA,CAAd;eAceZ,K","sourcesContent":["import { pipe } from 'ramda'\n\nimport { NodeTypes } from '../../constants'\nimport createEntry from '../pipes/createEntry'\nimport expectColonOperator from '../pipes/expectColonOperator'\nimport identifyKey from '../pipes/identifyKey'\nimport identifyValue from '../pipes/identifyValue'\nimport parseColonOperator from '../pipes/parseColonOperator'\nimport parseKey from '../pipes/parseKey'\nimport parseValue from '../pipes/parseValue'\nimport parseWhitespaceAndComments from '../pipes/parseWhitespaceAndComments'\nimport skipWhitespaceAndComments from '../pipes/skipWhitespaceAndComments'\n\nconst parseEntryTokens = pipe(\n  parseKey,\n  parseWhitespaceAndComments,\n  parseColonOperator,\n  parseWhitespaceAndComments,\n  parseValue,\n  createEntry\n)\n\nconst identifyEntryChildren = pipe(\n  identifyKey,\n  skipWhitespaceAndComments,\n  expectColonOperator,\n  skipWhitespaceAndComments,\n  identifyValue\n)\n\nconst Entry = {\n  identify: (context, node) =>\n    createEntry({\n      ...identifyEntryChildren({\n        ...node,\n        context\n      }),\n      children: node.children\n    }),\n  is: (value) => value && value.type === NodeTypes.ENTRY,\n  parse: (context, tokenList) => parseEntryTokens({ children: [], context, tokenList }),\n  test: () => false\n}\n\nexport default Entry\n"],"file":"Entry.js"}