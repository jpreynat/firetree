{"version":3,"sources":["../../../src/parser/nodes/FunctionKeyword.js"],"names":["FunctionKeyword","identify","context","node","is","value","type","NodeTypes","KEYWORD","name","Keywords","FUNCTION","parse","tokenList","nextToken","get","Error","TokenTypes","KEYWORD_FUNCTION","lastLineCharacterCount","lineCount","test","firstToken","ParserTypes"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AACA;;;;AAEA,MAAMA,eAAe,GAAG;AACtBC,EAAAA,QAAQ,EAAE,CAACC,OAAD,EAAUC,IAAV,KAAmBA,IADP;AAEtBC,EAAAA,EAAE,EAAGC,KAAD,IAAWA,KAAK,IAAIA,KAAK,CAACC,IAAN,KAAeC,qBAAUC,OAAlC,IAA6CH,KAAK,CAACI,IAAN,KAAeC,oBAASC,QAF9D;AAGtBC,EAAAA,KAAK,EAAE,CAACV,OAAD,EAAUW,SAAV,KAAwB;AAC7B,UAAMC,SAAS,GAAGD,SAAS,CAACE,GAAV,CAAc,CAAd,CAAlB;;AACA,QAAI,CAACD,SAAL,EAAgB;AACd,YAAM,IAAIE,KAAJ,CACH,qBAAoBN,oBAASC,QAAS,yCADnC,CAAN;AAGD;;AACD,QAAIG,SAAS,CAACR,IAAV,KAAmBW,sBAAWC,gBAAlC,EAAoD;AAClD,YAAM;AAAEC,QAAAA,sBAAF;AAA0BC,QAAAA;AAA1B,UAAwC,gCAAqBlB,OAArB,EAA8BW,SAA9B,CAA9C;AACA,YAAM,IAAIG,KAAJ,CACH,qBAAoBN,oBAASC,QAAS,yBACrCE,SAAS,CAACE,GAAV,CAAc,CAAd,EAAiBV,KAClB,QAAOe,SAAU,IAAGD,sBAAuB,EAHxC,CAAN;AAKD;;AACD,WAAO,oCAAsB;AAC3BN,MAAAA,SAAS,EAAE,kBAAM,CAAN,EAAS,CAAT,EAAYA,SAAZ;AADgB,KAAtB,CAAP;AAGD,GArBqB;AAsBtBQ,EAAAA,IAAI,EAAE,CAACnB,OAAD,EAAUW,SAAV,KAAwB;AAC5B,UAAMS,UAAU,GAAGT,SAAS,CAACE,GAAV,CAAc,CAAd,CAAnB;AACA,WAAOO,UAAU,CAAChB,IAAX,KAAoBW,sBAAWC,gBAAtC;AACD,GAzBqB;AA0BtBZ,EAAAA,IAAI,EAAEiB,uBAAYf;AA1BI,CAAxB;eA6BeR,e","sourcesContent":["import { slice } from 'ramda'\n\nimport { Keywords, NodeTypes, ParserTypes, TokenTypes } from '../../constants'\nimport createFunctionKeyword from '../pipes/createFunctionKeyword'\nimport { getTokenListPosition } from '../util'\n\nconst FunctionKeyword = {\n  identify: (context, node) => node,\n  is: (value) => value && value.type === NodeTypes.KEYWORD && value.name === Keywords.FUNCTION,\n  parse: (context, tokenList) => {\n    const nextToken = tokenList.get(0)\n    if (!nextToken) {\n      throw new Error(\n        `Expected keyword '${Keywords.FUNCTION}'. Instead reached the end of the file.`\n      )\n    }\n    if (nextToken.type !== TokenTypes.KEYWORD_FUNCTION) {\n      const { lastLineCharacterCount, lineCount } = getTokenListPosition(context, tokenList)\n      throw new Error(\n        `Expected keyword '${Keywords.FUNCTION}'. Instead was given '${\n          tokenList.get(0).value\n        }' at ${lineCount}:${lastLineCharacterCount}`\n      )\n    }\n    return createFunctionKeyword({\n      tokenList: slice(0, 1, tokenList)\n    })\n  },\n  test: (context, tokenList) => {\n    const firstToken = tokenList.get(0)\n    return firstToken.type === TokenTypes.KEYWORD_FUNCTION\n  },\n  type: ParserTypes.KEYWORD\n}\n\nexport default FunctionKeyword\n"],"file":"FunctionKeyword.js"}