{"version":3,"sources":["../../../src/parser/nodes/PathExpression.js"],"names":["PATH_PART_PARSERS","PathPartExpression","PathPartVariable","PathPartWord","identifyPathExpressionChildren","identifyPathParts","parsePathExpressionTokens","parsePathParts","createPathExpression","PathExpression","identify","context","node","children","is","value","type","NodeTypes","PATH_EXPRESSION","parse","tokenList","test","prevExpression","ParserTypes","EXPRESSION"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;;;;;;;;;AAEA,MAAMA,iBAAiB,GAAG,CAACC,2BAAD,EAAqBC,yBAArB,EAAuCC,qBAAvC,CAA1B;AAEA,MAAMC,8BAA8B,GAAG,iBAAKC,0BAAL,CAAvC;AAEA,MAAMC,yBAAyB,GAAG,iBAAKC,uBAAL,EAAqBC,6BAArB,CAAlC;AAEA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,QAAQ,EAAE,CAACC,OAAD,EAAUC,IAAV,KACR,mEACKR,8BAA8B,iCAC5BQ,IAD4B;AAE/BD,IAAAA;AAF+B,KADnC;AAKEE,IAAAA,QAAQ,EAAED,IAAI,CAACC;AALjB,KAFmB;AASrBC,EAAAA,EAAE,EAAGC,KAAD,IAAWA,KAAK,IAAIA,KAAK,CAACC,IAAN,KAAeC,qBAAUC,eAT5B;AAUrBC,EAAAA,KAAK,EAAE,CAACR,OAAD,EAAUS,SAAV,KAAwBd,yBAAyB,CAAC;AAAEO,IAAAA,QAAQ,EAAE,EAAZ;AAAgBF,IAAAA,OAAhB;AAAyBS,IAAAA;AAAzB,GAAD,CAVnC;AAWrBC,EAAAA,IAAI,EAAE,CAACV,OAAD,EAAUS,SAAV,EAAqBE,cAAc,GAAG,IAAtC,KACJ,wBAAatB,iBAAb,EAAgCW,OAAhC,EAAyCS,SAAzC,EAAoDE,cAApD,CAZmB;AAarBN,EAAAA,IAAI,EAAEO,uBAAYC;AAbG,CAAvB;eAgBef,c","sourcesContent":["import { pipe } from 'ramda'\n\nimport { NodeTypes, ParserTypes } from '../../constants'\nimport createPathExpression from '../pipes/createPathExpression'\nimport identifyPathParts from '../pipes/identifyPathParts'\nimport parsePathParts from '../pipes/parsePathParts'\nimport { testNextNode } from '../util'\n\nimport PathPartExpression from './PathPartExpression'\nimport PathPartVariable from './PathPartVariable'\nimport PathPartWord from './PathPartWord'\n\nconst PATH_PART_PARSERS = [PathPartExpression, PathPartVariable, PathPartWord]\n\nconst identifyPathExpressionChildren = pipe(identifyPathParts)\n\nconst parsePathExpressionTokens = pipe(parsePathParts, createPathExpression)\n\nconst PathExpression = {\n  identify: (context, node) =>\n    createPathExpression({\n      ...identifyPathExpressionChildren({\n        ...node,\n        context\n      }),\n      children: node.children\n    }),\n  is: (value) => value && value.type === NodeTypes.PATH_EXPRESSION,\n  parse: (context, tokenList) => parsePathExpressionTokens({ children: [], context, tokenList }),\n  test: (context, tokenList, prevExpression = null) =>\n    testNextNode(PATH_PART_PARSERS, context, tokenList, prevExpression),\n  type: ParserTypes.EXPRESSION\n}\n\nexport default PathExpression\n"],"file":"PathExpression.js"}