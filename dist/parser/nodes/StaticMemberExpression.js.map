{"version":3,"sources":["../../../src/parser/nodes/StaticMemberExpression.js"],"names":["parseStaticMemberExpressionTokens","parseObject","parseWhitespaceAndComments","parseDotOperator","parseStaticProperty","createStaticMemberExpression","identifyStaticMemberExpressionChildren","identifyObject","skipWhitespaceAndComments","expectDotOperator","identifyStaticProperty","StaticMemberExpression","identify","context","node","children","is","value","type","NodeTypes","STATIC_MEMBER_EXPRESSION","parse","tokenList","prevExpression","test","identifierToken","TokenTypes","IDENTIFIER","operatorToken","OPERATOR_DOT","ParserTypes","EXPRESSION"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;AAEA,MAAMA,iCAAiC,GAAG,iBACxCC,oBADwC,EAExCC,mCAFwC,EAGxCC,yBAHwC,EAIxCD,mCAJwC,EAKxCE,4BALwC,EAMxCC,qCANwC,CAA1C;AASA,MAAMC,sCAAsC,GAAG,iBAC7CC,uBAD6C,EAE7CC,kCAF6C,EAG7CC,0BAH6C,EAI7CD,kCAJ6C,EAK7CE,+BAL6C,CAA/C;AAQA,MAAMC,sBAAsB,GAAG;AAC7BC,EAAAA,QAAQ,EAAE,CAACC,OAAD,EAAUC,IAAV,KACR,2EACKR,sCAAsC,iCACpCQ,IADoC;AAEvCD,IAAAA;AAFuC,KAD3C;AAKEE,IAAAA,QAAQ,EAAED,IAAI,CAACC;AALjB,KAF2B;AAS7BC,EAAAA,EAAE,EAAGC,KAAD,IAAWA,KAAK,IAAIA,KAAK,CAACC,IAAN,KAAeC,qBAAUC,wBATpB;AAU7BC,EAAAA,KAAK,EAAE,CAACR,OAAD,EAAUS,SAAV,EAAqBC,cAAc,GAAG,IAAtC,KACLvB,iCAAiC,CAAC;AAChCe,IAAAA,QAAQ,EAAE,EADsB;AAEhCF,IAAAA,OAFgC;AAGhCU,IAAAA,cAHgC;AAIhCD,IAAAA;AAJgC,GAAD,CAXN;AAiB7BE,EAAAA,IAAI,EAAE,CAACX,OAAD,EAAUS,SAAV,EAAqBC,cAAc,GAAG,IAAtC,KAA+C;AACnD,QAAI,CAACA,cAAL,EAAqB;AACnB,YAAME,eAAe,GAAG,6BAAkBH,SAAlB,CAAxB;;AACA,UAAI,CAACG,eAAD,IAAoBA,eAAe,CAACP,IAAhB,KAAyBQ,sBAAWC,UAA5D,EAAwE;AACtE,eAAO,KAAP;AACD;AACF;;AACD,UAAMC,aAAa,GAAG,6BACpBN,SADoB,EAEpB,kCAAuBA,SAAvB,KAAqCC,cAAc,GAAG,CAAH,GAAO,CAA1D,CAFoB,CAAtB;AAIA,WAAOK,aAAa,IAAIA,aAAa,CAACV,IAAd,KAAuBQ,sBAAWG,YAA1D;AACD,GA7B4B;AA+B7BX,EAAAA,IAAI,EAAEY,uBAAYC;AA/BW,CAA/B;eAkCepB,sB","sourcesContent":["import { pipe } from 'ramda'\n\nimport { NodeTypes, ParserTypes, TokenTypes } from '../../constants'\nimport createStaticMemberExpression from '../pipes/createStaticMemberExpression'\nimport expectDotOperator from '../pipes/expectDotOperator'\nimport identifyObject from '../pipes/identifyObject'\nimport identifyStaticProperty from '../pipes/identifyStaticProperty'\nimport parseDotOperator from '../pipes/parseDotOperator'\nimport parseObject from '../pipes/parseObject'\nimport parseStaticProperty from '../pipes/parseStaticProperty'\nimport parseWhitespaceAndComments from '../pipes/parseWhitespaceAndComments'\nimport skipWhitespaceAndComments from '../pipes/skipWhitespaceAndComments'\nimport { findNextRealToken, findNextRealTokenIndex } from '../util'\n\nconst parseStaticMemberExpressionTokens = pipe(\n  parseObject,\n  parseWhitespaceAndComments,\n  parseDotOperator,\n  parseWhitespaceAndComments,\n  parseStaticProperty,\n  createStaticMemberExpression\n)\n\nconst identifyStaticMemberExpressionChildren = pipe(\n  identifyObject,\n  skipWhitespaceAndComments,\n  expectDotOperator,\n  skipWhitespaceAndComments,\n  identifyStaticProperty\n)\n\nconst StaticMemberExpression = {\n  identify: (context, node) =>\n    createStaticMemberExpression({\n      ...identifyStaticMemberExpressionChildren({\n        ...node,\n        context\n      }),\n      children: node.children\n    }),\n  is: (value) => value && value.type === NodeTypes.STATIC_MEMBER_EXPRESSION,\n  parse: (context, tokenList, prevExpression = null) =>\n    parseStaticMemberExpressionTokens({\n      children: [],\n      context,\n      prevExpression,\n      tokenList\n    }),\n  test: (context, tokenList, prevExpression = null) => {\n    if (!prevExpression) {\n      const identifierToken = findNextRealToken(tokenList)\n      if (!identifierToken || identifierToken.type !== TokenTypes.IDENTIFIER) {\n        return false\n      }\n    }\n    const operatorToken = findNextRealToken(\n      tokenList,\n      findNextRealTokenIndex(tokenList) + (prevExpression ? 0 : 1)\n    )\n    return operatorToken && operatorToken.type === TokenTypes.OPERATOR_DOT\n  },\n\n  type: ParserTypes.EXPRESSION\n}\n\nexport default StaticMemberExpression\n"],"file":"StaticMemberExpression.js"}