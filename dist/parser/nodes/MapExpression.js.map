{"version":3,"sources":["../../../src/parser/nodes/MapExpression.js"],"names":["parseMapExpressionTokens","parseOpenCurlyBraceOperator","parseWhitespaceAndComments","parseEntries","parseCloseCurlyBraceOperator","createMapExpression","identifyMapExpressionChildren","expectOpenCurlyBraceOperator","skipWhitespaceAndComments","identifyEntries","expectCloseCurlyBraceOperator","MapExpression","identify","context","node","children","is","value","type","NodeTypes","MAP_EXPRESSION","parse","tokenList","test","prevExpression","operatorToken","TokenTypes","OPERATOR_OPEN_CURLY_BRACE","ParserTypes","EXPRESSION"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;AAEA,MAAMA,wBAAwB,GAAG,iBAC/BC,oCAD+B,EAE/BC,mCAF+B,EAG/BC,qBAH+B,EAI/BD,mCAJ+B,EAK/BE,qCAL+B,EAM/BC,4BAN+B,CAAjC;AASA,MAAMC,6BAA6B,GAAG,iBACpCC,qCADoC,EAEpCC,kCAFoC,EAGpCC,wBAHoC,EAIpCD,kCAJoC,EAKpCE,sCALoC,CAAtC;AAQA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,QAAQ,EAAE,CAACC,OAAD,EAAUC,IAAV,KACR,kEACKR,6BAA6B,iCAC3BQ,IAD2B;AAE9BD,IAAAA;AAF8B,KADlC;AAKEE,IAAAA,QAAQ,EAAED,IAAI,CAACC;AALjB,KAFkB;AASpBC,EAAAA,EAAE,EAAGC,KAAD,IAAWA,KAAK,IAAIA,KAAK,CAACC,IAAN,KAAeC,qBAAUC,cAT7B;AAUpBC,EAAAA,KAAK,EAAE,CAACR,OAAD,EAAUS,SAAV,KAAwBtB,wBAAwB,CAAC;AAAEe,IAAAA,QAAQ,EAAE,EAAZ;AAAgBF,IAAAA,OAAhB;AAAyBS,IAAAA;AAAzB,GAAD,CAVnC;AAWpBC,EAAAA,IAAI,EAAE,CAACV,OAAD,EAAUS,SAAV,EAAqBE,cAAc,GAAG,IAAtC,KAA+C;AACnD,QAAIA,cAAJ,EAAoB;AAClB,aAAO,KAAP;AACD;;AACD,UAAMC,aAAa,GAAG,6BAAkBH,SAAlB,EAA6B,kCAAuBA,SAAvB,CAA7B,CAAtB;AACA,WAAOG,aAAa,IAAIA,aAAa,CAACP,IAAd,KAAuBQ,sBAAWC,yBAA1D;AACD,GAjBmB;AAkBpBT,EAAAA,IAAI,EAAEU,uBAAYC;AAlBE,CAAtB;eAqBelB,a","sourcesContent":["import { pipe } from 'ramda'\n\nimport { NodeTypes, ParserTypes, TokenTypes } from '../../constants'\nimport createMapExpression from '../pipes/createMapExpression'\nimport expectCloseCurlyBraceOperator from '../pipes/expectCloseCurlyBraceOperator'\nimport expectOpenCurlyBraceOperator from '../pipes/expectOpenCurlyBraceOperator'\nimport identifyEntries from '../pipes/identifyEntries'\nimport parseCloseCurlyBraceOperator from '../pipes/parseCloseCurlyBraceOperator'\nimport parseEntries from '../pipes/parseEntries'\nimport parseOpenCurlyBraceOperator from '../pipes/parseOpenCurlyBraceOperator'\nimport parseWhitespaceAndComments from '../pipes/parseWhitespaceAndComments'\nimport skipWhitespaceAndComments from '../pipes/skipWhitespaceAndComments'\nimport { findNextRealToken, findNextRealTokenIndex } from '../util'\n\nconst parseMapExpressionTokens = pipe(\n  parseOpenCurlyBraceOperator,\n  parseWhitespaceAndComments,\n  parseEntries,\n  parseWhitespaceAndComments,\n  parseCloseCurlyBraceOperator,\n  createMapExpression\n)\n\nconst identifyMapExpressionChildren = pipe(\n  expectOpenCurlyBraceOperator,\n  skipWhitespaceAndComments,\n  identifyEntries,\n  skipWhitespaceAndComments,\n  expectCloseCurlyBraceOperator\n)\n\nconst MapExpression = {\n  identify: (context, node) =>\n    createMapExpression({\n      ...identifyMapExpressionChildren({\n        ...node,\n        context\n      }),\n      children: node.children\n    }),\n  is: (value) => value && value.type === NodeTypes.MAP_EXPRESSION,\n  parse: (context, tokenList) => parseMapExpressionTokens({ children: [], context, tokenList }),\n  test: (context, tokenList, prevExpression = null) => {\n    if (prevExpression) {\n      return false\n    }\n    const operatorToken = findNextRealToken(tokenList, findNextRealTokenIndex(tokenList))\n    return operatorToken && operatorToken.type === TokenTypes.OPERATOR_OPEN_CURLY_BRACE\n  },\n  type: ParserTypes.EXPRESSION\n}\n\nexport default MapExpression\n"],"file":"MapExpression.js"}