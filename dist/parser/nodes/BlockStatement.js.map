{"version":3,"sources":["../../../src/parser/nodes/BlockStatement.js"],"names":["parseBlockStatementTokens","parseOpenCurlyBraceOperator","tokenList","get","type","TokenTypes","OPERATOR_CLOSE_CURLY_BRACE","parseCloseCurlyBraceOperator","createBlockStatement","identifyBlockStatementChildren","expectOpenCurlyBraceOperator","children","CloseCurlyBraceOperator","is","expectCloseCurlyBraceOperator","BlockStatement","identify","context","node","value","NodeTypes","BLOCK_STATEMENT","parse","test","firstToken","OPERATOR_OPEN_CURLY_BRACE"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;;;;;;;;;AAEA,MAAMA,yBAAyB,GAAG,iBAChCC,oCADgC,EAEhC,6BACE,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAmBA,SAAS,CAACC,GAAV,CAAc,CAAd,EAAiBC,IAAjB,KAA0BC,sBAAWC,0BAD1D,CAFgC,EAKhCC,qCALgC,EAMhCC,6BANgC,CAAlC;AASA,MAAMC,8BAA8B,GAAG,iBACrCC,qCADqC,EAErC,gCAAkB,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkBC,iCAAwBC,EAAxB,CAA2B,iBAAKF,QAAL,CAA3B,CAApC,CAFqC,EAGrCG,sCAHqC,CAAvC;AAMA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,QAAQ,EAAE,CAACC,OAAD,EAAUC,IAAV,KACR,mEACKT,8BAA8B,iCAC5BS,IAD4B;AAE/BD,IAAAA;AAF+B,KADnC;AAKEN,IAAAA,QAAQ,EAAEO,IAAI,CAACP;AALjB,KAFmB;AAUrBE,EAAAA,EAAE,EAAGM,KAAD,IAAWA,KAAK,IAAIA,KAAK,CAACf,IAAN,KAAegB,qBAAUC,eAV5B;AAYrBC,EAAAA,KAAK,EAAE,CAACL,OAAD,EAAUf,SAAV,KACLF,yBAAyB,CAAC;AACxBW,IAAAA,QAAQ,EAAE,EADc;AAExBM,IAAAA,OAFwB;AAGxBf,IAAAA;AAHwB,GAAD,CAbN;AAmBrB;AACAqB,EAAAA,IAAI,EAAE,CAACN,OAAD,EAAUf,SAAV,KAAwB;AAC5B,UAAMsB,UAAU,GAAGtB,SAAS,CAACC,GAAV,CAAc,CAAd,CAAnB;AACA,WAAOqB,UAAU,CAACpB,IAAX,KAAoBC,sBAAWoB,yBAAtC;AACD;AAvBoB,CAAvB;eA0BeV,c","sourcesContent":["import { head, pipe } from 'ramda'\n\nimport { NodeTypes, TokenTypes } from '../../constants'\nimport createBlockStatement from '../pipes/createBlockStatement'\nimport expectCloseCurlyBraceOperator from '../pipes/expectCloseCurlyBraceOperator'\nimport expectOpenCurlyBraceOperator from '../pipes/expectOpenCurlyBraceOperator'\nimport identifyBodyUntil from '../pipes/identifyBodyUntil'\nimport parseBodyUntil from '../pipes/parseBodyUntil'\nimport parseCloseCurlyBraceOperator from '../pipes/parseCloseCurlyBraceOperator'\nimport parseOpenCurlyBraceOperator from '../pipes/parseOpenCurlyBraceOperator'\n\nimport CloseCurlyBraceOperator from './CloseCurlyBraceOperator'\n\nconst parseBlockStatementTokens = pipe(\n  parseOpenCurlyBraceOperator,\n  parseBodyUntil(\n    ({ tokenList }) => tokenList.get(0).type !== TokenTypes.OPERATOR_CLOSE_CURLY_BRACE\n  ),\n  parseCloseCurlyBraceOperator,\n  createBlockStatement\n)\n\nconst identifyBlockStatementChildren = pipe(\n  expectOpenCurlyBraceOperator,\n  identifyBodyUntil(({ children }) => CloseCurlyBraceOperator.is(head(children))),\n  expectCloseCurlyBraceOperator\n)\n\nconst BlockStatement = {\n  identify: (context, node) =>\n    createBlockStatement({\n      ...identifyBlockStatementChildren({\n        ...node,\n        context\n      }),\n      children: node.children\n    }),\n\n  is: (value) => value && value.type === NodeTypes.BLOCK_STATEMENT,\n\n  parse: (context, tokenList) =>\n    parseBlockStatementTokens({\n      children: [],\n      context,\n      tokenList\n    }),\n\n  // NOTE BRN: The first token of a Statement cannot be Whitespace or a Comment\n  test: (context, tokenList) => {\n    const firstToken = tokenList.get(0)\n    return firstToken.type === TokenTypes.OPERATOR_OPEN_CURLY_BRACE\n  }\n}\n\nexport default BlockStatement\n"],"file":"BlockStatement.js"}