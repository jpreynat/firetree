{"version":3,"sources":["../../../src/parser/nodes/Comment.js"],"names":["Comment","identify","context","node","is","value","type","NodeTypes","COMMENT","parse","tokenList","nextToken","get","Error","TokenTypes","lastLineCharacterCount","lineCount","test"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AACA;;;;AAEA,MAAMA,OAAO,GAAG;AACdC,EAAAA,QAAQ,EAAE,CAACC,OAAD,EAAUC,IAAV,KAAmBA,IADf;AAEdC,EAAAA,EAAE,EAAGC,KAAD,IAAWA,KAAK,IAAIA,KAAK,CAACC,IAAN,KAAeC,qBAAUC,OAFnC;AAGdC,EAAAA,KAAK,EAAE,CAACP,OAAD,EAAUQ,SAAV,KAAwB;AAC7B,UAAMC,SAAS,GAAGD,SAAS,CAACE,GAAV,CAAc,CAAd,CAAlB;;AACA,QAAI,CAACD,SAAL,EAAgB;AACd,YAAM,IAAIE,KAAJ,CAAU,wDAAV,CAAN;AACD;;AACD,QAAIF,SAAS,CAACL,IAAV,KAAmBQ,sBAAWN,OAAlC,EAA2C;AACzC,YAAM;AAAEO,QAAAA,sBAAF;AAA0BC,QAAAA;AAA1B,UAAwC,mCAAqBd,OAArB,EAA8BQ,SAA9B,CAA9C;AACA,YAAM,IAAIG,KAAJ,CACH,wCACCH,SAAS,CAACE,GAAV,CAAc,CAAd,EAAiBP,KAClB,QAAOW,SAAU,IAAGD,sBAAuB,EAHxC,CAAN;AAKD;;AACD,WAAO,4BAAc;AACnBL,MAAAA,SAAS,EAAE,kBAAM,CAAN,EAAS,CAAT,EAAYA,SAAZ;AADQ,KAAd,CAAP;AAGD,GAnBa;AAoBdO,EAAAA,IAAI,EAAE,CAACf,OAAD,EAAUQ,SAAV,KAAwBA,SAAS,CAACE,GAAV,CAAc,CAAd,EAAiBN,IAAjB,KAA0BQ,sBAAWN;AApBrD,CAAhB;eAuBeR,O","sourcesContent":["import { slice } from 'ramda'\n\nimport { NodeTypes, TokenTypes } from '../../constants'\nimport createComment from '../pipes/createComment'\nimport getTokenListPosition from '../util/getTokenListPosition'\n\nconst Comment = {\n  identify: (context, node) => node,\n  is: (value) => value && value.type === NodeTypes.COMMENT,\n  parse: (context, tokenList) => {\n    const nextToken = tokenList.get(0)\n    if (!nextToken) {\n      throw new Error('Expected Comment. Instead reached the end of the file.')\n    }\n    if (nextToken.type !== TokenTypes.COMMENT) {\n      const { lastLineCharacterCount, lineCount } = getTokenListPosition(context, tokenList)\n      throw new Error(\n        `Expected Comment. Instead was given '${\n          tokenList.get(0).value\n        }' at ${lineCount}:${lastLineCharacterCount}`\n      )\n    }\n    return createComment({\n      tokenList: slice(0, 1, tokenList)\n    })\n  },\n  test: (context, tokenList) => tokenList.get(0).type === TokenTypes.COMMENT\n}\n\nexport default Comment\n"],"file":"Comment.js"}