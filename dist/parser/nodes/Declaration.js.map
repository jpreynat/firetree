{"version":3,"sources":["../../../src/parser/nodes/Declaration.js"],"names":["Declaration","identify","context","node","rest","Declarations","type","Error","is","value","NodeTypes","FUNCTION_DECLARATION","LET_DECLARATION","parse","tokenList","test"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,WAAW,GAAG;AAClBC,EAAAA,QAAQ,EAAE,CAACC,OAAD,EAAUC,IAAV,EAAgB,GAAGC,IAAnB,KAA4B;AACpC,UAAM;AAAEC,MAAAA;AAAF,QAAmBH,OAAzB;AACA,UAAMI,IAAI,GAAG,yBAAeD,YAAf,EAA6BF,IAA7B,CAAb;;AACA,QAAI,CAACG,IAAL,EAAW;AACT,YAAM,IAAIC,KAAJ,CAAW,6CAA4CJ,IAAK,EAA5D,CAAN;AACD;;AACD,WAAOG,IAAI,CAACL,QAAL,CAAcC,OAAd,EAAuBC,IAAvB,EAA6B,GAAGC,IAAhC,CAAP;AACD,GARiB;AASlBI,EAAAA,EAAE,EAAGC,KAAD,IACFA,KAAK,CAACH,IAAN,KAAeI,qBAAUC,oBAAzB,IAAiDF,KAAK,CAACH,IAAN,KAAeI,qBAAUE,eAV1D;AAWlBC,EAAAA,KAAK,EAAE,CAACX,OAAD,EAAUY,SAAV,KAAwB,4BAAcZ,OAAO,CAACG,YAAtB,EAAoCH,OAApC,EAA6CY,SAA7C,CAXb;AAYlB;AACAC,EAAAA,IAAI,EAAE,CAACb,OAAD,EAAUY,SAAV,KAAwB,2BAAaZ,OAAO,CAACG,YAArB,EAAmCH,OAAnC,EAA4CY,SAA5C;AAbZ,CAApB;eAgBed,W","sourcesContent":["import { findIdentifier } from '../../ast'\nimport { NodeTypes } from '../../constants'\nimport parseNextNode from '../util/parseNextNode'\nimport testNextNode from '../util/testNextNode'\n\nconst Declaration = {\n  identify: (context, node, ...rest) => {\n    const { Declarations } = context\n    const type = findIdentifier(Declarations, node)\n    if (!type) {\n      throw new Error(`Could not find Declaration Identifier for ${node}`)\n    }\n    return type.identify(context, node, ...rest)\n  },\n  is: (value) =>\n    value.type === NodeTypes.FUNCTION_DECLARATION || value.type === NodeTypes.LET_DECLARATION,\n  parse: (context, tokenList) => parseNextNode(context.Declarations, context, tokenList),\n  // NOTE BRN: The first token of a Declaration cannot be Whitespace or a Comment\n  test: (context, tokenList) => testNextNode(context.Declarations, context, tokenList)\n}\n\nexport default Declaration\n"],"file":"Declaration.js"}