{"version":3,"sources":["../../../src/parser/nodes/ServiceStatement.js"],"names":["parseServiceStatementTokens","parseServiceKeyword","parseWhitespaceAndComments","parseName","parseBody","createServiceStatement","identifyServiceStatementChildren","expectServiceKeyword","skipWhitespaceAndComments","identifyName","identifyBody","ServiceStatement","identify","context","node","children","is","value","type","NodeTypes","SERVICE_STATEMENT","parse","tokenList","test","firstToken","get","TokenTypes","KEYWORD_SERVICE","ParserTypes","STATEMENT"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;AAEA,MAAMA,2BAA2B,GAAG,iBAClCC,4BADkC,EAElCC,mCAFkC,EAGlCC,kBAHkC,EAIlCD,mCAJkC,EAKlCE,kBALkC,EAMlCC,+BANkC,CAApC;AASA,MAAMC,gCAAgC,GAAG,iBACvCC,6BADuC,EAEvCC,kCAFuC,EAGvCC,qBAHuC,EAIvCD,kCAJuC,EAKvCE,qBALuC,CAAzC;AAQA,MAAMC,gBAAgB,GAAG;AACvBC,EAAAA,QAAQ,EAAE,CAACC,OAAD,EAAUC,IAAV,KACR,qEACKR,gCAAgC,iCAAMQ,IAAN;AAAYD,IAAAA;AAAZ,KADrC;AAEEE,IAAAA,QAAQ,EAAED,IAAI,CAACC;AAFjB,KAFqB;AAMvBC,EAAAA,EAAE,EAAGC,KAAD,IAAWA,KAAK,IAAIA,KAAK,CAACC,IAAN,KAAeC,qBAAUC,iBAN1B;AAOvBC,EAAAA,KAAK,EAAE,CAACR,OAAD,EAAUS,SAAV,KAAwBtB,2BAA2B,CAAC;AAAEe,IAAAA,QAAQ,EAAE,EAAZ;AAAgBF,IAAAA,OAAhB;AAAyBS,IAAAA;AAAzB,GAAD,CAPnC;AAQvBC,EAAAA,IAAI,EAAE,CAACV,OAAD,EAAUS,SAAV,KAAwB;AAC5B,UAAME,UAAU,GAAGF,SAAS,CAACG,GAAV,CAAc,CAAd,CAAnB;AACA,WAAOD,UAAU,CAACN,IAAX,KAAoBQ,sBAAWC,eAAtC;AACD,GAXsB;AAYvBT,EAAAA,IAAI,EAAEU,uBAAYC;AAZK,CAAzB;eAeelB,gB","sourcesContent":["import { pipe } from 'ramda'\n\nimport { NodeTypes, ParserTypes, TokenTypes } from '../../constants'\nimport createServiceStatement from '../pipes/createServiceStatement'\nimport expectServiceKeyword from '../pipes/expectServiceKeyword'\nimport identifyBody from '../pipes/identifyBody'\nimport identifyName from '../pipes/identifyName'\nimport parseBody from '../pipes/parseBody'\nimport parseName from '../pipes/parseName'\nimport parseServiceKeyword from '../pipes/parseServiceKeyword'\nimport parseWhitespaceAndComments from '../pipes/parseWhitespaceAndComments'\nimport skipWhitespaceAndComments from '../pipes/skipWhitespaceAndComments'\n\nconst parseServiceStatementTokens = pipe(\n  parseServiceKeyword,\n  parseWhitespaceAndComments,\n  parseName,\n  parseWhitespaceAndComments,\n  parseBody,\n  createServiceStatement\n)\n\nconst identifyServiceStatementChildren = pipe(\n  expectServiceKeyword,\n  skipWhitespaceAndComments,\n  identifyName,\n  skipWhitespaceAndComments,\n  identifyBody\n)\n\nconst ServiceStatement = {\n  identify: (context, node) =>\n    createServiceStatement({\n      ...identifyServiceStatementChildren({ ...node, context }),\n      children: node.children\n    }),\n  is: (value) => value && value.type === NodeTypes.SERVICE_STATEMENT,\n  parse: (context, tokenList) => parseServiceStatementTokens({ children: [], context, tokenList }),\n  test: (context, tokenList) => {\n    const firstToken = tokenList.get(0)\n    return firstToken.type === TokenTypes.KEYWORD_SERVICE\n  },\n  type: ParserTypes.STATEMENT\n}\n\nexport default ServiceStatement\n"],"file":"ServiceStatement.js"}