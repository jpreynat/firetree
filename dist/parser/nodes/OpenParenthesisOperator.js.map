{"version":3,"sources":["../../../src/parser/nodes/OpenParenthesisOperator.js"],"names":["OpenParenthesisOperator","identify","context","node","is","value","type","NodeTypes","OPERATOR","operatorType","OperatorTypes","OPEN_PARENTHESIS","parse","tokenList","nextToken","get","Error","Operators","TokenTypes","OPERATOR_OPEN_PARENTHESIS","lastLineCharacterCount","lineCount","test","ParserTypes"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AACA;;;;AAEA,MAAMA,uBAAuB,GAAG;AAC9BC,EAAAA,QAAQ,EAAE,CAACC,OAAD,EAAUC,IAAV,KAAmBA,IADC;AAE9BC,EAAAA,EAAE,EAAGC,KAAD,IACFA,KAAK,IACLA,KAAK,CAACC,IAAN,KAAeC,qBAAUC,QADzB,IAEAH,KAAK,CAACI,YAAN,KAAuBC,yBAAcC,gBALT;AAM9BC,EAAAA,KAAK,EAAE,CAACV,OAAD,EAAUW,SAAV,KAAwB;AAC7B,UAAMC,SAAS,GAAGD,SAAS,CAACE,GAAV,CAAc,CAAd,CAAlB;;AACA,QAAI,CAACD,SAAL,EAAgB;AACd,YAAM,IAAIE,KAAJ,CACH,sBAAqBC,qBAAUN,gBAAiB,yCAD7C,CAAN;AAGD;;AACD,QAAIG,SAAS,CAACR,IAAV,KAAmBY,sBAAWC,yBAAlC,EAA6D;AAC3D,YAAM;AAAEC,QAAAA,sBAAF;AAA0BC,QAAAA;AAA1B,UAAwC,gCAAqBnB,OAArB,EAA8BW,SAA9B,CAA9C;AACA,YAAM,IAAIG,KAAJ,CACH,sBAAqBC,qBAAUN,gBAAiB,yBAC/CE,SAAS,CAACE,GAAV,CAAc,CAAd,EAAiBV,KAClB,QAAOgB,SAAU,IAAGD,sBAAuB,EAHxC,CAAN;AAKD;;AACD,WAAO,4CAA8B;AACnCP,MAAAA,SAAS,EAAE,kBAAM,CAAN,EAAS,CAAT,EAAYA,SAAZ;AADwB,KAA9B,CAAP;AAGD,GAxB6B;AAyB9BS,EAAAA,IAAI,EAAE,CAACpB,OAAD,EAAUW,SAAV,KAAwBA,SAAS,CAACE,GAAV,CAAc,CAAd,EAAiBT,IAAjB,KAA0BY,sBAAWC,yBAzBrC;AA0B9Bb,EAAAA,IAAI,EAAEiB,uBAAYf;AA1BY,CAAhC;eA6BeR,uB","sourcesContent":["import { slice } from 'ramda'\n\nimport { NodeTypes, OperatorTypes, Operators, ParserTypes, TokenTypes } from '../../constants'\nimport createOpenParenthesisOperator from '../pipes/createOpenParenthesisOperator'\nimport { getTokenListPosition } from '../util'\n\nconst OpenParenthesisOperator = {\n  identify: (context, node) => node,\n  is: (value) =>\n    value &&\n    value.type === NodeTypes.OPERATOR &&\n    value.operatorType === OperatorTypes.OPEN_PARENTHESIS,\n  parse: (context, tokenList) => {\n    const nextToken = tokenList.get(0)\n    if (!nextToken) {\n      throw new Error(\n        `Expected operator '${Operators.OPEN_PARENTHESIS}'. Instead reached the end of the file.`\n      )\n    }\n    if (nextToken.type !== TokenTypes.OPERATOR_OPEN_PARENTHESIS) {\n      const { lastLineCharacterCount, lineCount } = getTokenListPosition(context, tokenList)\n      throw new Error(\n        `Expected operator '${Operators.OPEN_PARENTHESIS}'. Instead was given '${\n          tokenList.get(0).value\n        }' at ${lineCount}:${lastLineCharacterCount}`\n      )\n    }\n    return createOpenParenthesisOperator({\n      tokenList: slice(0, 1, tokenList)\n    })\n  },\n  test: (context, tokenList) => tokenList.get(0).type === TokenTypes.OPERATOR_OPEN_PARENTHESIS,\n  type: ParserTypes.OPERATOR\n}\n\nexport default OpenParenthesisOperator\n"],"file":"OpenParenthesisOperator.js"}