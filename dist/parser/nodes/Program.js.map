{"version":3,"sources":["../../../src/parser/nodes/Program.js"],"names":["parseProgramTokens","createProgram","identifyProgramChildren","Program","identify","context","node","children","is","value","type","NodeTypes","PROGRAM","parse","tokenList"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;;;;;;;;;AAEA,MAAMA,kBAAkB,GAAG,iBACzB,6BAAe,MAAM,IAArB,CADyB,EAEzBC,sBAFyB,CAA3B;AAKA,MAAMC,uBAAuB,GAAG,iBAAK,gCAAkB,MAAM,IAAxB,CAAL,CAAhC;AAEA,MAAMC,OAAO,GAAG;AACdC,EAAAA,QAAQ,EAAE,CAACC,OAAD,EAAUC,IAAV,KACR,4DACKJ,uBAAuB,iCACrBI,IADqB;AAExBD,IAAAA;AAFwB,KAD5B;AAKEE,IAAAA,QAAQ,EAAED,IAAI,CAACC;AALjB,KAFY;AASdC,EAAAA,EAAE,EAAGC,KAAD,IAAWA,KAAK,IAAIA,KAAK,CAACC,IAAN,KAAeC,qBAAUC,OATnC;AAUdC,EAAAA,KAAK,EAAE,CAACR,OAAD,EAAUS,SAAV,KACLd,kBAAkB,CAAC;AACjBO,IAAAA,QAAQ,EAAE,EADO;AAEjBF,IAAAA,OAFiB;AAGjBS,IAAAA;AAHiB,GAAD;AAXN,CAAhB;eAkBeX,O","sourcesContent":["import { pipe } from 'ramda'\n\nimport { NodeTypes } from '../../constants'\nimport createProgram from '../pipes/createProgram'\nimport identifyBodyUntil from '../pipes/identifyBodyUntil'\nimport parseBodyUntil from '../pipes/parseBodyUntil'\n\nconst parseProgramTokens = pipe(\n  parseBodyUntil(() => true),\n  createProgram\n)\n\nconst identifyProgramChildren = pipe(identifyBodyUntil(() => true))\n\nconst Program = {\n  identify: (context, node) =>\n    createProgram({\n      ...identifyProgramChildren({\n        ...node,\n        context\n      }),\n      children: node.children\n    }),\n  is: (value) => value && value.type === NodeTypes.PROGRAM,\n  parse: (context, tokenList) =>\n    parseProgramTokens({\n      children: [],\n      context,\n      tokenList\n    })\n}\n\nexport default Program\n"],"file":"Program.js"}