{"version":3,"sources":["../../../src/parser/nodes/GreaterThanOperator.js"],"names":["GreaterThanOperator","identify","context","node","is","value","type","NodeTypes","OPERATOR","operatorType","OperatorTypes","GREATER_THAN","parse","tokenList","nextToken","get","Error","Operators","TokenTypes","OPERATOR_GREATER_THAN","lastLineCharacterCount","lineCount","test","ParserTypes"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AACA;;;;AAEA,MAAMA,mBAAmB,GAAG;AAC1BC,EAAAA,QAAQ,EAAE,CAACC,OAAD,EAAUC,IAAV,KAAmBA,IADH;AAE1BC,EAAAA,EAAE,EAAGC,KAAD,IACFA,KAAK,IAAIA,KAAK,CAACC,IAAN,KAAeC,qBAAUC,QAAlC,IAA8CH,KAAK,CAACI,YAAN,KAAuBC,yBAAcC,YAH3D;AAI1BC,EAAAA,KAAK,EAAE,CAACV,OAAD,EAAUW,SAAV,KAAwB;AAC7B,UAAMC,SAAS,GAAGD,SAAS,CAACE,GAAV,CAAc,CAAd,CAAlB;;AACA,QAAI,CAACD,SAAL,EAAgB;AACd,YAAM,IAAIE,KAAJ,CACH,sBAAqBC,qBAAUN,YAAa,yCADzC,CAAN;AAGD;;AACD,QAAIG,SAAS,CAACR,IAAV,KAAmBY,sBAAWC,qBAAlC,EAAyD;AACvD,YAAM;AAAEC,QAAAA,sBAAF;AAA0BC,QAAAA;AAA1B,UAAwC,gCAAqBnB,OAArB,EAA8BW,SAA9B,CAA9C;AACA,YAAM,IAAIG,KAAJ,CACH,sBAAqBC,qBAAUN,YAAa,yBAC3CE,SAAS,CAACE,GAAV,CAAc,CAAd,EAAiBV,KAClB,QAAOgB,SAAU,IAAGD,sBAAuB,EAHxC,CAAN;AAKD;;AACD,WAAO,wCAA0B;AAC/BP,MAAAA,SAAS,EAAE,kBAAM,CAAN,EAAS,CAAT,EAAYA,SAAZ;AADoB,KAA1B,CAAP;AAGD,GAtByB;AAuB1BS,EAAAA,IAAI,EAAE,CAACpB,OAAD,EAAUW,SAAV,KAAwBA,SAAS,CAACE,GAAV,CAAc,CAAd,EAAiBT,IAAjB,KAA0BY,sBAAWC,qBAvBzC;AAwB1Bb,EAAAA,IAAI,EAAEiB,uBAAYf;AAxBQ,CAA5B;eA2BeR,mB","sourcesContent":["import { slice } from 'ramda'\n\nimport { NodeTypes, OperatorTypes, Operators, ParserTypes, TokenTypes } from '../../constants'\nimport createGreaterThanOperator from '../pipes/createGreaterThanOperator'\nimport { getTokenListPosition } from '../util'\n\nconst GreaterThanOperator = {\n  identify: (context, node) => node,\n  is: (value) =>\n    value && value.type === NodeTypes.OPERATOR && value.operatorType === OperatorTypes.GREATER_THAN,\n  parse: (context, tokenList) => {\n    const nextToken = tokenList.get(0)\n    if (!nextToken) {\n      throw new Error(\n        `Expected operator '${Operators.GREATER_THAN}'. Instead reached the end of the file.`\n      )\n    }\n    if (nextToken.type !== TokenTypes.OPERATOR_GREATER_THAN) {\n      const { lastLineCharacterCount, lineCount } = getTokenListPosition(context, tokenList)\n      throw new Error(\n        `Expected operator '${Operators.GREATER_THAN}'. Instead was given '${\n          tokenList.get(0).value\n        }' at ${lineCount}:${lastLineCharacterCount}`\n      )\n    }\n    return createGreaterThanOperator({\n      tokenList: slice(0, 1, tokenList)\n    })\n  },\n  test: (context, tokenList) => tokenList.get(0).type === TokenTypes.OPERATOR_GREATER_THAN,\n  type: ParserTypes.OPERATOR\n}\n\nexport default GreaterThanOperator\n"],"file":"GreaterThanOperator.js"}