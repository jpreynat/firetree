{"version":3,"sources":["../../../src/parser/nodes/AllowStatement.js"],"names":["parseAllowStatementTokens","parseAllowKeyword","parseWhitespaceAndComments","parsePermissions","parseColonOperator","parseCondition","createAllowStatement","identifyAllowStatementChildren","expectAllowKeyword","skipWhitespaceAndComments","identifyPermissions","expectColonOperator","identifyCondition","AllowStatement","identify","context","node","children","is","value","type","NodeTypes","ALLOW_STATEMENT","parse","tokenList","test","firstToken","get","TokenTypes","KEYWORD_ALLOW","ParserTypes","STATEMENT"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;AAEA,MAAMA,yBAAyB,GAAG,iBAChCC,0BADgC,EAEhCC,mCAFgC,EAGhCC,yBAHgC,EAIhCD,mCAJgC,EAKhCE,2BALgC,EAMhCF,mCANgC,EAOhCG,uBAPgC,EAQhCC,6BARgC,CAAlC;AAWA,MAAMC,8BAA8B,GAAG,iBACrCC,2BADqC,EAErCC,kCAFqC,EAGrCC,4BAHqC,EAIrCD,kCAJqC,EAKrCE,4BALqC,EAMrCF,kCANqC,EAOrCG,0BAPqC,CAAvC;AAUA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,QAAQ,EAAE,CAACC,OAAD,EAAUC,IAAV,KACR,mEACKT,8BAA8B,iCAAMS,IAAN;AAAYD,IAAAA;AAAZ,KADnC;AAEEE,IAAAA,QAAQ,EAAED,IAAI,CAACC;AAFjB,KAFmB;AAMrBC,EAAAA,EAAE,EAAGC,KAAD,IAAWA,KAAK,IAAIA,KAAK,CAACC,IAAN,KAAeC,qBAAUC,eAN5B;AAOrBC,EAAAA,KAAK,EAAE,CAACR,OAAD,EAAUS,SAAV,KAAwBxB,yBAAyB,CAAC;AAAEiB,IAAAA,QAAQ,EAAE,EAAZ;AAAgBF,IAAAA,OAAhB;AAAyBS,IAAAA;AAAzB,GAAD,CAPnC;AAQrBC,EAAAA,IAAI,EAAE,CAACV,OAAD,EAAUS,SAAV,KAAwB;AAC5B,UAAME,UAAU,GAAGF,SAAS,CAACG,GAAV,CAAc,CAAd,CAAnB;AACA,WAAO,CAAC,EAAED,UAAU,IAAIA,UAAU,CAACN,IAAX,KAAoBQ,sBAAWC,aAA/C,CAAR;AACD,GAXoB;AAYrBT,EAAAA,IAAI,EAAEU,uBAAYC;AAZG,CAAvB;eAeelB,c","sourcesContent":["import { pipe } from 'ramda'\n\nimport { NodeTypes, ParserTypes, TokenTypes } from '../../constants'\nimport createAllowStatement from '../pipes/createAllowStatement'\nimport expectAllowKeyword from '../pipes/expectAllowKeyword'\nimport expectColonOperator from '../pipes/expectColonOperator'\nimport identifyCondition from '../pipes/identifyCondition'\nimport identifyPermissions from '../pipes/identifyPermissions'\nimport parseAllowKeyword from '../pipes/parseAllowKeyword'\nimport parseColonOperator from '../pipes/parseColonOperator'\nimport parseCondition from '../pipes/parseCondition'\nimport parsePermissions from '../pipes/parsePermissions'\nimport parseWhitespaceAndComments from '../pipes/parseWhitespaceAndComments'\nimport skipWhitespaceAndComments from '../pipes/skipWhitespaceAndComments'\n\nconst parseAllowStatementTokens = pipe(\n  parseAllowKeyword,\n  parseWhitespaceAndComments,\n  parsePermissions,\n  parseWhitespaceAndComments,\n  parseColonOperator,\n  parseWhitespaceAndComments,\n  parseCondition,\n  createAllowStatement\n)\n\nconst identifyAllowStatementChildren = pipe(\n  expectAllowKeyword,\n  skipWhitespaceAndComments,\n  identifyPermissions,\n  skipWhitespaceAndComments,\n  expectColonOperator,\n  skipWhitespaceAndComments,\n  identifyCondition\n)\n\nconst AllowStatement = {\n  identify: (context, node) =>\n    createAllowStatement({\n      ...identifyAllowStatementChildren({ ...node, context }),\n      children: node.children\n    }),\n  is: (value) => value && value.type === NodeTypes.ALLOW_STATEMENT,\n  parse: (context, tokenList) => parseAllowStatementTokens({ children: [], context, tokenList }),\n  test: (context, tokenList) => {\n    const firstToken = tokenList.get(0)\n    return !!(firstToken && firstToken.type === TokenTypes.KEYWORD_ALLOW)\n  },\n  type: ParserTypes.STATEMENT\n}\n\nexport default AllowStatement\n"],"file":"AllowStatement.js"}