{"version":3,"sources":["../../../src/parser/nodes/FunctionDeclaration.js"],"names":["parseFunctionDelcarationTokens","parseFunctionKeyword","parseWhitespaceAndComments","parseIdentifier","parseParams","parseBody","createFunctionDeclaration","identifyFunctionDeclarationChildren","expectFunctionKeyword","skipWhitespaceAndComments","identifyIdentifier","identifyParams","identifyBody","FunctionDeclaration","identify","context","node","children","is","value","type","NodeTypes","FUNCTION_DECLARATION","parse","tokenList","test","firstToken","get","TokenTypes","KEYWORD_FUNCTION","ParserTypes","DECLARATION"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;AAEA,MAAMA,8BAA8B,GAAG,iBACrCC,6BADqC,EAErCC,mCAFqC,EAGrCC,wBAHqC,EAIrCD,mCAJqC,EAKrCE,oBALqC,EAMrCF,mCANqC,EAOrCG,kBAPqC,EAQrCC,kCARqC,CAAvC;AAUA,MAAMC,mCAAmC,GAAG,iBAC1CC,8BAD0C,EAE1CC,kCAF0C,EAG1CC,2BAH0C,EAI1CD,kCAJ0C,EAK1CE,uBAL0C,EAM1CF,kCAN0C,EAO1CG,qBAP0C,CAA5C;AAUA,MAAMC,mBAAmB,GAAG;AAC1BC,EAAAA,QAAQ,EAAE,CAACC,OAAD,EAAUC,IAAV,KACR,wEACKT,mCAAmC,iCACjCS,IADiC;AAEpCD,IAAAA;AAFoC,KADxC;AAKEE,IAAAA,QAAQ,EAAED,IAAI,CAACC;AALjB,KAFwB;AAS1BC,EAAAA,EAAE,EAAGC,KAAD,IAAWA,KAAK,IAAIA,KAAK,CAACC,IAAN,KAAeC,qBAAUC,oBATvB;AAU1BC,EAAAA,KAAK,EAAE,CAACR,OAAD,EAAUS,SAAV,KACLxB,8BAA8B,CAAC;AAAEiB,IAAAA,QAAQ,EAAE,EAAZ;AAAgBF,IAAAA,OAAhB;AAAyBS,IAAAA;AAAzB,GAAD,CAXN;AAY1BC,EAAAA,IAAI,EAAE,CAACV,OAAD,EAAUS,SAAV,KAAwB;AAC5B,UAAME,UAAU,GAAGF,SAAS,CAACG,GAAV,CAAc,CAAd,CAAnB;AACA,WAAOD,UAAU,CAACN,IAAX,KAAoBQ,sBAAWC,gBAAtC;AACD,GAfyB;AAgB1BT,EAAAA,IAAI,EAAEU,uBAAYC;AAhBQ,CAA5B;eAmBelB,mB","sourcesContent":["import { pipe } from 'ramda'\n\nimport { NodeTypes, ParserTypes, TokenTypes } from '../../constants'\nimport createFunctionDeclaration from '../pipes/createFunctionDeclaration'\nimport expectFunctionKeyword from '../pipes/expectFunctionKeyword'\nimport identifyBody from '../pipes/identifyBody'\nimport identifyIdentifier from '../pipes/identifyIdentifier'\nimport identifyParams from '../pipes/identifyParams'\nimport parseBody from '../pipes/parseBody'\nimport parseFunctionKeyword from '../pipes/parseFunctionKeyword'\nimport parseIdentifier from '../pipes/parseIdentifier'\nimport parseParams from '../pipes/parseParams'\nimport parseWhitespaceAndComments from '../pipes/parseWhitespaceAndComments'\nimport skipWhitespaceAndComments from '../pipes/skipWhitespaceAndComments'\n\nconst parseFunctionDelcarationTokens = pipe(\n  parseFunctionKeyword,\n  parseWhitespaceAndComments,\n  parseIdentifier,\n  parseWhitespaceAndComments,\n  parseParams,\n  parseWhitespaceAndComments,\n  parseBody,\n  createFunctionDeclaration\n)\nconst identifyFunctionDeclarationChildren = pipe(\n  expectFunctionKeyword,\n  skipWhitespaceAndComments,\n  identifyIdentifier,\n  skipWhitespaceAndComments,\n  identifyParams,\n  skipWhitespaceAndComments,\n  identifyBody\n)\n\nconst FunctionDeclaration = {\n  identify: (context, node) =>\n    createFunctionDeclaration({\n      ...identifyFunctionDeclarationChildren({\n        ...node,\n        context\n      }),\n      children: node.children\n    }),\n  is: (value) => value && value.type === NodeTypes.FUNCTION_DECLARATION,\n  parse: (context, tokenList) =>\n    parseFunctionDelcarationTokens({ children: [], context, tokenList }),\n  test: (context, tokenList) => {\n    const firstToken = tokenList.get(0)\n    return firstToken.type === TokenTypes.KEYWORD_FUNCTION\n  },\n  type: ParserTypes.DECLARATION\n}\n\nexport default FunctionDeclaration\n"],"file":"FunctionDeclaration.js"}