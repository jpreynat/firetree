{"version":3,"sources":["../../../src/parser/nodes/IfStatement.js"],"names":["parseIfStatementTokens","parseIfKeyword","parseWhitespaceAndComments","parseIfStatementTest","parseOptionalSemicolonOperator","createIfStatement","identifyIfStatementChildren","expectIfKeyword","skipWhitespaceAndComments","identifyIfStatementTest","skipSemicolonOperator","IfStatement","identify","context","node","children","is","value","type","NodeTypes","IF_STATEMENT","parse","tokenList","test","firstToken","get","TokenTypes","KEYWORD_IF","ParserTypes","STATEMENT"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;AAEA,MAAMA,sBAAsB,GAAG,iBAC7BC,uBAD6B,EAE7BC,mCAF6B,EAG7BC,6BAH6B,EAI7BD,mCAJ6B,EAK7BE,uCAL6B,EAM7BC,0BAN6B,CAA/B;AASA,MAAMC,2BAA2B,GAAG,iBAClCC,wBADkC,EAElCC,kCAFkC,EAGlCC,gCAHkC,EAIlCD,kCAJkC,EAKlCE,8BALkC,CAApC;AAQA,MAAMC,WAAW,GAAG;AAClBC,EAAAA,QAAQ,EAAE,CAACC,OAAD,EAAUC,IAAV,KACR,gEACKR,2BAA2B,CAAC;AAAES,IAAAA,QAAQ,EAAED,IAAI,CAACC,QAAjB;AAA2BF,IAAAA;AAA3B,GAAD,CADhC;AAEEE,IAAAA,QAAQ,EAAED,IAAI,CAACC;AAFjB,KAFgB;AAMlBC,EAAAA,EAAE,EAAGC,KAAD,IAAWA,KAAK,CAACC,IAAN,KAAeC,qBAAUC,YANtB;AAOlBC,EAAAA,KAAK,EAAE,CAACR,OAAD,EAAUS,SAAV,KAAwBtB,sBAAsB,CAAC;AAAEe,IAAAA,QAAQ,EAAE,EAAZ;AAAgBF,IAAAA,OAAhB;AAAyBS,IAAAA;AAAzB,GAAD,CAPnC;AAQlBC,EAAAA,IAAI,EAAE,CAACV,OAAD,EAAUS,SAAV,KAAwB;AAC5B,UAAME,UAAU,GAAGF,SAAS,CAACG,GAAV,CAAc,CAAd,CAAnB;AACA,WAAOD,UAAU,CAACN,IAAX,KAAoBQ,sBAAWC,UAAtC;AACD,GAXiB;AAYlBT,EAAAA,IAAI,EAAEU,uBAAYC;AAZA,CAApB;eAeelB,W","sourcesContent":["import { pipe } from 'ramda'\n\nimport { NodeTypes, ParserTypes, TokenTypes } from '../../constants'\nimport createIfStatement from '../pipes/createIfStatement'\nimport expectIfKeyword from '../pipes/expectIfKeyword'\nimport identifyIfStatementTest from '../pipes/identifyIfStatementTest'\nimport parseIfKeyword from '../pipes/parseIfKeyword'\nimport parseIfStatementTest from '../pipes/parseIfStatementTest'\nimport parseOptionalSemicolonOperator from '../pipes/parseOptionalSemicolonOperator'\nimport parseWhitespaceAndComments from '../pipes/parseWhitespaceAndComments'\nimport skipSemicolonOperator from '../pipes/skipSemicolonOperator'\nimport skipWhitespaceAndComments from '../pipes/skipWhitespaceAndComments'\n\nconst parseIfStatementTokens = pipe(\n  parseIfKeyword,\n  parseWhitespaceAndComments,\n  parseIfStatementTest,\n  parseWhitespaceAndComments,\n  parseOptionalSemicolonOperator,\n  createIfStatement\n)\n\nconst identifyIfStatementChildren = pipe(\n  expectIfKeyword,\n  skipWhitespaceAndComments,\n  identifyIfStatementTest,\n  skipWhitespaceAndComments,\n  skipSemicolonOperator\n)\n\nconst IfStatement = {\n  identify: (context, node) =>\n    createIfStatement({\n      ...identifyIfStatementChildren({ children: node.children, context }),\n      children: node.children\n    }),\n  is: (value) => value.type === NodeTypes.IF_STATEMENT,\n  parse: (context, tokenList) => parseIfStatementTokens({ children: [], context, tokenList }),\n  test: (context, tokenList) => {\n    const firstToken = tokenList.get(0)\n    return firstToken.type === TokenTypes.KEYWORD_IF\n  },\n  type: ParserTypes.STATEMENT\n}\n\nexport default IfStatement\n"],"file":"IfStatement.js"}