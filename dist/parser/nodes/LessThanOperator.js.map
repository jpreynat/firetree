{"version":3,"sources":["../../../src/parser/nodes/LessThanOperator.js"],"names":["LessThanOperator","identify","context","node","is","value","type","NodeTypes","OPERATOR","operatorType","OperatorTypes","LESS_THAN","parse","tokenList","nextToken","get","Error","Operators","LESS_THAN_EQUAL","TokenTypes","OPERATOR_LESS_THAN","lastLineCharacterCount","lineCount","test","ParserTypes"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AACA;;;;AAEA,MAAMA,gBAAgB,GAAG;AACvBC,EAAAA,QAAQ,EAAE,CAACC,OAAD,EAAUC,IAAV,KAAmBA,IADN;AAEvBC,EAAAA,EAAE,EAAGC,KAAD,IACFA,KAAK,IAAIA,KAAK,CAACC,IAAN,KAAeC,qBAAUC,QAAlC,IAA8CH,KAAK,CAACI,YAAN,KAAuBC,yBAAcC,SAH9D;AAIvBC,EAAAA,KAAK,EAAE,CAACV,OAAD,EAAUW,SAAV,KAAwB;AAC7B,UAAMC,SAAS,GAAGD,SAAS,CAACE,GAAV,CAAc,CAAd,CAAlB;;AACA,QAAI,CAACD,SAAL,EAAgB;AACd,YAAM,IAAIE,KAAJ,CACH,sBAAqBC,qBAAUC,eAAgB,yCAD5C,CAAN;AAGD;;AACD,QAAIJ,SAAS,CAACR,IAAV,KAAmBa,sBAAWC,kBAAlC,EAAsD;AACpD,YAAM;AAAEC,QAAAA,sBAAF;AAA0BC,QAAAA;AAA1B,UAAwC,gCAAqBpB,OAArB,EAA8BW,SAA9B,CAA9C;AACA,YAAM,IAAIG,KAAJ,CACH,sBAAqBC,qBAAUN,SAAU,yBACxCE,SAAS,CAACE,GAAV,CAAc,CAAd,EAAiBV,KAClB,QAAOiB,SAAU,IAAGD,sBAAuB,EAHxC,CAAN;AAKD;;AACD,WAAO,qCAAuB;AAC5BR,MAAAA,SAAS,EAAE,kBAAM,CAAN,EAAS,CAAT,EAAYA,SAAZ;AADiB,KAAvB,CAAP;AAGD,GAtBsB;AAuBvBU,EAAAA,IAAI,EAAE,CAACrB,OAAD,EAAUW,SAAV,KAAwBA,SAAS,CAACE,GAAV,CAAc,CAAd,EAAiBT,IAAjB,KAA0Ba,sBAAWC,kBAvB5C;AAwBvBd,EAAAA,IAAI,EAAEkB,uBAAYhB;AAxBK,CAAzB;eA2BeR,gB","sourcesContent":["import { slice } from 'ramda'\n\nimport { NodeTypes, OperatorTypes, Operators, ParserTypes, TokenTypes } from '../../constants'\nimport createLessThanOperator from '../pipes/createLessThanOperator'\nimport { getTokenListPosition } from '../util'\n\nconst LessThanOperator = {\n  identify: (context, node) => node,\n  is: (value) =>\n    value && value.type === NodeTypes.OPERATOR && value.operatorType === OperatorTypes.LESS_THAN,\n  parse: (context, tokenList) => {\n    const nextToken = tokenList.get(0)\n    if (!nextToken) {\n      throw new Error(\n        `Expected operator '${Operators.LESS_THAN_EQUAL}'. Instead reached the end of the file.`\n      )\n    }\n    if (nextToken.type !== TokenTypes.OPERATOR_LESS_THAN) {\n      const { lastLineCharacterCount, lineCount } = getTokenListPosition(context, tokenList)\n      throw new Error(\n        `Expected operator '${Operators.LESS_THAN}'. Instead was given '${\n          tokenList.get(0).value\n        }' at ${lineCount}:${lastLineCharacterCount}`\n      )\n    }\n    return createLessThanOperator({\n      tokenList: slice(0, 1, tokenList)\n    })\n  },\n  test: (context, tokenList) => tokenList.get(0).type === TokenTypes.OPERATOR_LESS_THAN,\n  type: ParserTypes.OPERATOR\n}\n\nexport default LessThanOperator\n"],"file":"LessThanOperator.js"}