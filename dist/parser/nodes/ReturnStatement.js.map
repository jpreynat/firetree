{"version":3,"sources":["../../../src/parser/nodes/ReturnStatement.js"],"names":["parseReturnStatementTokens","parseReturnKeyword","parseWhitespaceAndComments","parseArgument","parseOptionalSemicolonOperator","createReturnStatement","identifyReturnStatementChildren","expectReturnKeyword","skipWhitespaceAndComments","identifyArgument","skipSemicolonOperator","ReturnStatement","identify","context","node","children","is","value","type","NodeTypes","RETURN_STATEMENT","parse","tokenList","test","firstToken","get","TokenTypes","KEYWORD_RETURN","ParserTypes","STATEMENT"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;AAEA,MAAMA,0BAA0B,GAAG,iBACjCC,2BADiC,EAEjCC,mCAFiC,EAGjCC,sBAHiC,EAIjCD,mCAJiC,EAKjCE,uCALiC,EAMjCC,8BANiC,CAAnC;AASA,MAAMC,+BAA+B,GAAG,iBACtCC,4BADsC,EAEtCC,kCAFsC,EAGtCC,yBAHsC,EAItCD,kCAJsC,EAKtCE,8BALsC,CAAxC;AAQA,MAAMC,eAAe,GAAG;AACtBC,EAAAA,QAAQ,EAAE,CAACC,OAAD,EAAUC,IAAV,KAAmB;AAC3B,WAAO,oEACFR,+BAA+B,iCAAMQ,IAAN;AAAYD,MAAAA;AAAZ,OAD7B;AAELE,MAAAA,QAAQ,EAAED,IAAI,CAACC;AAFV,OAAP;AAID,GANqB;AAOtBC,EAAAA,EAAE,EAAGC,KAAD,IAAWA,KAAK,CAACC,IAAN,KAAeC,qBAAUC,gBAPlB;AAQtBC,EAAAA,KAAK,EAAE,CAACR,OAAD,EAAUS,SAAV,KAAwBtB,0BAA0B,CAAC;AAAEe,IAAAA,QAAQ,EAAE,EAAZ;AAAgBF,IAAAA,OAAhB;AAAyBS,IAAAA;AAAzB,GAAD,CARnC;AAStBC,EAAAA,IAAI,EAAE,CAACV,OAAD,EAAUS,SAAV,KAAwB;AAC5B,UAAME,UAAU,GAAGF,SAAS,CAACG,GAAV,CAAc,CAAd,CAAnB;AACA,WAAOD,UAAU,CAACN,IAAX,KAAoBQ,sBAAWC,cAAtC;AACD,GAZqB;AAatBT,EAAAA,IAAI,EAAEU,uBAAYC;AAbI,CAAxB;eAgBelB,e","sourcesContent":["import { pipe } from 'ramda'\n\nimport { NodeTypes, ParserTypes, TokenTypes } from '../../constants'\nimport createReturnStatement from '../pipes/createReturnStatement'\nimport expectReturnKeyword from '../pipes/expectReturnKeyword'\nimport identifyArgument from '../pipes/identifyArgument'\nimport parseArgument from '../pipes/parseArgument'\nimport parseOptionalSemicolonOperator from '../pipes/parseOptionalSemicolonOperator'\nimport parseReturnKeyword from '../pipes/parseReturnKeyword'\nimport parseWhitespaceAndComments from '../pipes/parseWhitespaceAndComments'\nimport skipSemicolonOperator from '../pipes/skipSemicolonOperator'\nimport skipWhitespaceAndComments from '../pipes/skipWhitespaceAndComments'\n\nconst parseReturnStatementTokens = pipe(\n  parseReturnKeyword,\n  parseWhitespaceAndComments,\n  parseArgument,\n  parseWhitespaceAndComments,\n  parseOptionalSemicolonOperator,\n  createReturnStatement\n)\n\nconst identifyReturnStatementChildren = pipe(\n  expectReturnKeyword,\n  skipWhitespaceAndComments,\n  identifyArgument,\n  skipWhitespaceAndComments,\n  skipSemicolonOperator\n)\n\nconst ReturnStatement = {\n  identify: (context, node) => {\n    return createReturnStatement({\n      ...identifyReturnStatementChildren({ ...node, context }),\n      children: node.children\n    })\n  },\n  is: (value) => value.type === NodeTypes.RETURN_STATEMENT,\n  parse: (context, tokenList) => parseReturnStatementTokens({ children: [], context, tokenList }),\n  test: (context, tokenList) => {\n    const firstToken = tokenList.get(0)\n    return firstToken.type === TokenTypes.KEYWORD_RETURN\n  },\n  type: ParserTypes.STATEMENT\n}\n\nexport default ReturnStatement\n"],"file":"ReturnStatement.js"}