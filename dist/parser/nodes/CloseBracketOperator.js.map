{"version":3,"sources":["../../../src/parser/nodes/CloseBracketOperator.js"],"names":["CloseBracketOperator","identify","context","node","is","value","type","NodeTypes","OPERATOR","operatorType","OperatorTypes","CLOSE_BRACKET","parse","tokenList","nextToken","get","Error","Operators","TokenTypes","OPERATOR_CLOSE_BRACKET","lastLineCharacterCount","lineCount","test","ParserTypes"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AACA;;;;AAEA,MAAMA,oBAAoB,GAAG;AAC3BC,EAAAA,QAAQ,EAAE,CAACC,OAAD,EAAUC,IAAV,KAAmBA,IADF;AAE3BC,EAAAA,EAAE,EAAGC,KAAD,IACFA,KAAK,IACLA,KAAK,CAACC,IAAN,KAAeC,qBAAUC,QADzB,IAEAH,KAAK,CAACI,YAAN,KAAuBC,yBAAcC,aALZ;AAM3BC,EAAAA,KAAK,EAAE,CAACV,OAAD,EAAUW,SAAV,KAAwB;AAC7B,UAAMC,SAAS,GAAGD,SAAS,CAACE,GAAV,CAAc,CAAd,CAAlB;;AACA,QAAI,CAACD,SAAL,EAAgB;AACd,YAAM,IAAIE,KAAJ,CACH,sBAAqBC,qBAAUN,aAAc,yCAD1C,CAAN;AAGD;;AACD,QAAIG,SAAS,CAACR,IAAV,KAAmBY,sBAAWC,sBAAlC,EAA0D;AACxD,YAAM;AAAEC,QAAAA,sBAAF;AAA0BC,QAAAA;AAA1B,UAAwC,gCAAqBnB,OAArB,EAA8BW,SAA9B,CAA9C;AACA,YAAM,IAAIG,KAAJ,CACH,sBAAqBC,qBAAUN,aAAc,yBAC5CE,SAAS,CAACE,GAAV,CAAc,CAAd,EAAiBV,KAClB,QAAOgB,SAAU,IAAGD,sBAAuB,EAHxC,CAAN;AAKD;;AACD,WAAO,yCAA2B;AAChCP,MAAAA,SAAS,EAAE,kBAAM,CAAN,EAAS,CAAT,EAAYA,SAAZ;AADqB,KAA3B,CAAP;AAGD,GAxB0B;AAyB3BS,EAAAA,IAAI,EAAE,CAACpB,OAAD,EAAUW,SAAV,KAAwBA,SAAS,CAACE,GAAV,CAAc,CAAd,EAAiBT,IAAjB,KAA0BY,sBAAWC,sBAzBxC;AA0B3Bb,EAAAA,IAAI,EAAEiB,uBAAYf;AA1BS,CAA7B;eA6BeR,oB","sourcesContent":["import { slice } from 'ramda'\n\nimport { NodeTypes, OperatorTypes, Operators, ParserTypes, TokenTypes } from '../../constants'\nimport createCloseBracketOperator from '../pipes/createCloseBracketOperator'\nimport { getTokenListPosition } from '../util'\n\nconst CloseBracketOperator = {\n  identify: (context, node) => node,\n  is: (value) =>\n    value &&\n    value.type === NodeTypes.OPERATOR &&\n    value.operatorType === OperatorTypes.CLOSE_BRACKET,\n  parse: (context, tokenList) => {\n    const nextToken = tokenList.get(0)\n    if (!nextToken) {\n      throw new Error(\n        `Expected operator '${Operators.CLOSE_BRACKET}'. Instead reached the end of the file.`\n      )\n    }\n    if (nextToken.type !== TokenTypes.OPERATOR_CLOSE_BRACKET) {\n      const { lastLineCharacterCount, lineCount } = getTokenListPosition(context, tokenList)\n      throw new Error(\n        `Expected operator '${Operators.CLOSE_BRACKET}'. Instead was given '${\n          tokenList.get(0).value\n        }' at ${lineCount}:${lastLineCharacterCount}`\n      )\n    }\n    return createCloseBracketOperator({\n      tokenList: slice(0, 1, tokenList)\n    })\n  },\n  test: (context, tokenList) => tokenList.get(0).type === TokenTypes.OPERATOR_CLOSE_BRACKET,\n  type: ParserTypes.OPERATOR\n}\n\nexport default CloseBracketOperator\n"],"file":"CloseBracketOperator.js"}