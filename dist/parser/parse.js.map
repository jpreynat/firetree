{"version":3,"sources":["../../src/parser/parse.js"],"names":["parse","context","filePath","string"],"mappings":";;;;;;;;;AAAA;;AACA;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,KAAK,GAAG,OAAOC,OAAP,EAAgB;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAhB,KAAyC;AACrD,MAAID,QAAJ,EAAc;AACZ,WAAO,wBAAUD,OAAV,EAAmBC,QAAnB,CAAP;AACD;;AACD,SAAO,0BAAYD,OAAZ,EAAqBE,MAArB,CAAP;AACD,CALD;;eAOeH,K","sourcesContent":["import parseFile from './parseFile'\nimport parseString from './parseString'\n\n/**\n * parses the rules file at the given `filePath` or parse the given `string`.\n *\n * @function\n * @since v0.1.0\n * @category parser\n * @param {Context} context\n * @param {{\n *   filePath: String,\n *   string: String\n * }}} options\n * @returns {AST}\n * @example\n * import { parse, setupContext } from 'firetree'\n *\n * const context = setupContext()\n *\n * // parse file into an AST\n * const ast = await parse(context, {\n *   filePath: './path/to/firestore.rules'\n * })\n *\n * // parse string into an AST\n * const ast = await parse(context, {\n *   string: someRulesString\n * })\n */\nconst parse = async (context, { filePath, string }) => {\n  if (filePath) {\n    return parseFile(context, filePath)\n  }\n  return parseString(context, string)\n}\n\nexport default parse\n"],"file":"parse.js"}