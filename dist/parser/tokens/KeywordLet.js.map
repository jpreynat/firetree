{"version":3,"sources":["../../../src/parser/tokens/KeywordLet.js"],"names":["REGEX_KEYWORD_LET_TEST","RegExp","Keywords","LET","KeywordLet","parse","length","type","TokenTypes","KEYWORD_LET","value","test","context","data"],"mappings":";;;;;;;AAAA;;AAEA,MAAMA,sBAAsB,GAAG,IAAIC,MAAJ,CAAY,IAAGC,oBAASC,GAAI,mBAA5B,CAA/B;AAEA,MAAMC,UAAU,GAAG;AACjBC,EAAAA,KAAK,EAAE,OAAO;AACZC,IAAAA,MAAM,EAAEJ,oBAASC,GAAT,CAAaG,MADT;AAEZC,IAAAA,IAAI,EAAEC,sBAAWC,WAFL;AAGZC,IAAAA,KAAK,EAAER,oBAASC;AAHJ,GAAP,CADU;AAMjBQ,EAAAA,IAAI,EAAE,CAACC,OAAD,EAAUC,IAAV,KAAmBb,sBAAsB,CAACW,IAAvB,CAA4BE,IAA5B;AANR,CAAnB;eASeT,U","sourcesContent":["import { Keywords, TokenTypes } from '../../constants'\n\nconst REGEX_KEYWORD_LET_TEST = new RegExp(`^${Keywords.LET}([^a-zA-Z0-9_]|$)`)\n\nconst KeywordLet = {\n  parse: () => ({\n    length: Keywords.LET.length,\n    type: TokenTypes.KEYWORD_LET,\n    value: Keywords.LET\n  }),\n  test: (context, data) => REGEX_KEYWORD_LET_TEST.test(data)\n}\n\nexport default KeywordLet\n"],"file":"KeywordLet.js"}