{"version":3,"sources":["../../../src/parser/tokens/Number.js"],"names":["REGEX_NUMBER_TEST","REGEX_NUMBER_TOKEN","Number","parse","context","data","match","length","type","NUMBER","value","test"],"mappings":";;;;;;;;;AAAA;;AAEA,MAAMA,iBAAiB,GAAG,QAA1B;AACA,MAAMC,kBAAkB,GAAG,oBAA3B;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,KAAK,EAAE,CAACC,OAAD,EAAUC,IAAV,KAAmB;AACxB,UAAM,CAACC,KAAD,IAAUD,IAAI,CAACC,KAAL,CAAWL,kBAAX,CAAhB;AACA,WAAO;AACLM,MAAAA,MAAM,EAAED,KAAK,CAACC,MADT;AAELC,MAAAA,IAAI,EAAEC,kBAFD;AAGLC,MAAAA,KAAK,EAAEJ;AAHF,KAAP;AAKD,GARY;AASbK,EAAAA,IAAI,EAAE,CAACP,OAAD,EAAUC,IAAV,KAAmBL,iBAAiB,CAACW,IAAlB,CAAuBN,IAAvB;AATZ,CAAf;eAYeH,M","sourcesContent":["import { NUMBER } from '../../constants/TokenTypes'\n\nconst REGEX_NUMBER_TEST = /^[0-9]/\nconst REGEX_NUMBER_TOKEN = /^[0-9]+(\\.[0-9]+)?/\n\nconst Number = {\n  parse: (context, data) => {\n    const [match] = data.match(REGEX_NUMBER_TOKEN)\n    return {\n      length: match.length,\n      type: NUMBER,\n      value: match\n    }\n  },\n  test: (context, data) => REGEX_NUMBER_TEST.test(data)\n}\n\nexport default Number\n"],"file":"Number.js"}