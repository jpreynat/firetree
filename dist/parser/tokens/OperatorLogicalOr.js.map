{"version":3,"sources":["../../../src/parser/tokens/OperatorLogicalOr.js"],"names":["REGEX_OPERATOR_LOGICAL_OR_TEST","OperatorLogicalOr","parse","length","type","TokenTypes","OPERATOR_LOGICAL_OR","value","Operators","LOGICAL_OR","test","context","data"],"mappings":";;;;;;;AAAA;;AAEA,MAAMA,8BAA8B,GAAG,OAAvC;AAEA,MAAMC,iBAAiB,GAAG;AACxBC,EAAAA,KAAK,EAAE,OAAO;AACZC,IAAAA,MAAM,EAAE,CADI;AAEZC,IAAAA,IAAI,EAAEC,sBAAWC,mBAFL;AAGZC,IAAAA,KAAK,EAAEC,qBAAUC;AAHL,GAAP,CADiB;AAMxBC,EAAAA,IAAI,EAAE,CAACC,OAAD,EAAUC,IAAV,KAAmBZ,8BAA8B,CAACU,IAA/B,CAAoCE,IAApC;AAND,CAA1B;eASeX,iB","sourcesContent":["import { Operators, TokenTypes } from '../../constants'\n\nconst REGEX_OPERATOR_LOGICAL_OR_TEST = /^\\|\\|/\n\nconst OperatorLogicalOr = {\n  parse: () => ({\n    length: 2,\n    type: TokenTypes.OPERATOR_LOGICAL_OR,\n    value: Operators.LOGICAL_OR\n  }),\n  test: (context, data) => REGEX_OPERATOR_LOGICAL_OR_TEST.test(data)\n}\n\nexport default OperatorLogicalOr\n"],"file":"OperatorLogicalOr.js"}