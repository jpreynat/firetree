{"version":3,"sources":["../../../src/parser/tokens/Bytes.js"],"names":["REGEX_BYTES_TEST","REGEX_BYTES_TOKEN","Bytes","parse","context","data","match","length","type","BYTES","value","test"],"mappings":";;;;;;;;;AAAA;;AAEA,MAAMA,gBAAgB,GAAG,QAAzB;AACA,MAAMC,iBAAiB,GAAG,2CAA1B;AAEA,MAAMC,KAAK,GAAG;AACZC,EAAAA,KAAK,EAAE,CAACC,OAAD,EAAUC,IAAV,KAAmB;AACxB,UAAM,CAACC,KAAD,IAAUD,IAAI,CAACC,KAAL,CAAWL,iBAAX,CAAhB;AACA,WAAO;AACLM,MAAAA,MAAM,EAAED,KAAK,CAACC,MADT;AAELC,MAAAA,IAAI,EAAEC,iBAFD;AAGLC,MAAAA,KAAK,EAAEJ;AAHF,KAAP;AAKD,GARW;AASZK,EAAAA,IAAI,EAAE,CAACP,OAAD,EAAUC,IAAV,KAAmBL,gBAAgB,CAACW,IAAjB,CAAsBN,IAAtB;AATb,CAAd;eAYeH,K","sourcesContent":["import { BYTES } from '../../constants/TokenTypes'\n\nconst REGEX_BYTES_TEST = /^b['\"]/\nconst REGEX_BYTES_TOKEN = /^b(\"(?:[^\"\\\\]|\\\\.)*\")|('(?:[^'\\\\]|\\\\.)*')/\n\nconst Bytes = {\n  parse: (context, data) => {\n    const [match] = data.match(REGEX_BYTES_TOKEN)\n    return {\n      length: match.length,\n      type: BYTES,\n      value: match\n    }\n  },\n  test: (context, data) => REGEX_BYTES_TEST.test(data)\n}\n\nexport default Bytes\n"],"file":"Bytes.js"}