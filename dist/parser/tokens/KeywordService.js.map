{"version":3,"sources":["../../../src/parser/tokens/KeywordService.js"],"names":["REGEX_KEYWORD_SERVICE_TEST","RegExp","Keywords","SERVICE","KeywordService","parse","length","type","TokenTypes","KEYWORD_SERVICE","value","test","context","data"],"mappings":";;;;;;;AAAA;;AAEA,MAAMA,0BAA0B,GAAG,IAAIC,MAAJ,CAAY,IAAGC,oBAASC,OAAQ,mBAAhC,CAAnC;AAEA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,KAAK,EAAE,OAAO;AACZC,IAAAA,MAAM,EAAEJ,oBAASC,OAAT,CAAiBG,MADb;AAEZC,IAAAA,IAAI,EAAEC,sBAAWC,eAFL;AAGZC,IAAAA,KAAK,EAAER,oBAASC;AAHJ,GAAP,CADc;AAMrBQ,EAAAA,IAAI,EAAE,CAACC,OAAD,EAAUC,IAAV,KAAmBb,0BAA0B,CAACW,IAA3B,CAAgCE,IAAhC;AANJ,CAAvB;eASeT,c","sourcesContent":["import { Keywords, TokenTypes } from '../../constants'\n\nconst REGEX_KEYWORD_SERVICE_TEST = new RegExp(`^${Keywords.SERVICE}([^a-zA-Z0-9_]|$)`)\n\nconst KeywordService = {\n  parse: () => ({\n    length: Keywords.SERVICE.length,\n    type: TokenTypes.KEYWORD_SERVICE,\n    value: Keywords.SERVICE\n  }),\n  test: (context, data) => REGEX_KEYWORD_SERVICE_TEST.test(data)\n}\n\nexport default KeywordService\n"],"file":"KeywordService.js"}