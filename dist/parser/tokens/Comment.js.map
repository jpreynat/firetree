{"version":3,"sources":["../../../src/parser/tokens/Comment.js"],"names":["REGEX_COMMENT_TEST","REGEX_COMMENT_TOKEN","Comment","parse","context","data","match","length","type","COMMENT","value","test"],"mappings":";;;;;;;;;AAAA;;AAEA,MAAMA,kBAAkB,GAAG,OAA3B;AACA,MAAMC,mBAAmB,GAAG,mBAA5B;AAEA,MAAMC,OAAO,GAAG;AACdC,EAAAA,KAAK,EAAE,CAACC,OAAD,EAAUC,IAAV,KAAmB;AACxB,UAAM,CAACC,KAAD,IAAUD,IAAI,CAACC,KAAL,CAAWL,mBAAX,CAAhB;AACA,WAAO;AACLM,MAAAA,MAAM,EAAED,KAAK,CAACC,MADT;AAELC,MAAAA,IAAI,EAAEC,mBAFD;AAGLC,MAAAA,KAAK,EAAEJ;AAHF,KAAP;AAKD,GARa;AASdK,EAAAA,IAAI,EAAE,CAACP,OAAD,EAAUC,IAAV,KAAmBL,kBAAkB,CAACW,IAAnB,CAAwBN,IAAxB;AATX,CAAhB;eAYeH,O","sourcesContent":["import { COMMENT } from '../../constants/TokenTypes'\n\nconst REGEX_COMMENT_TEST = /^\\/\\//\nconst REGEX_COMMENT_TOKEN = /^\\/\\/.*(\\r\\n?|\\n)/\n\nconst Comment = {\n  parse: (context, data) => {\n    const [match] = data.match(REGEX_COMMENT_TOKEN)\n    return {\n      length: match.length,\n      type: COMMENT,\n      value: match\n    }\n  },\n  test: (context, data) => REGEX_COMMENT_TEST.test(data)\n}\n\nexport default Comment\n"],"file":"Comment.js"}