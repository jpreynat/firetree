{"version":3,"sources":["../../../src/parser/tokens/KeywordIs.js"],"names":["REGEX_KEYWORD_IS_TEST","RegExp","Keywords","IS","KeywordIs","parse","length","type","TokenTypes","KEYWORD_IS","value","test","context","data"],"mappings":";;;;;;;AAAA;;AAEA,MAAMA,qBAAqB,GAAG,IAAIC,MAAJ,CAAY,IAAGC,oBAASC,EAAG,mBAA3B,CAA9B;AAEA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,KAAK,EAAE,OAAO;AACZC,IAAAA,MAAM,EAAEJ,oBAASC,EAAT,CAAYG,MADR;AAEZC,IAAAA,IAAI,EAAEC,sBAAWC,UAFL;AAGZC,IAAAA,KAAK,EAAER,oBAASC;AAHJ,GAAP,CADS;AAMhBQ,EAAAA,IAAI,EAAE,CAACC,OAAD,EAAUC,IAAV,KAAmBb,qBAAqB,CAACW,IAAtB,CAA2BE,IAA3B;AANT,CAAlB;eASeT,S","sourcesContent":["import { Keywords, TokenTypes } from '../../constants'\n\nconst REGEX_KEYWORD_IS_TEST = new RegExp(`^${Keywords.IS}([^a-zA-Z0-9_]|$)`)\n\nconst KeywordIs = {\n  parse: () => ({\n    length: Keywords.IS.length,\n    type: TokenTypes.KEYWORD_IS,\n    value: Keywords.IS\n  }),\n  test: (context, data) => REGEX_KEYWORD_IS_TEST.test(data)\n}\n\nexport default KeywordIs\n"],"file":"KeywordIs.js"}