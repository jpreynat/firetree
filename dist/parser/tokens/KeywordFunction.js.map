{"version":3,"sources":["../../../src/parser/tokens/KeywordFunction.js"],"names":["REGEX_KEYWORD_FUNCTION_TEST","RegExp","Keywords","FUNCTION","KeywordFunction","parse","length","type","TokenTypes","KEYWORD_FUNCTION","value","test","context","data"],"mappings":";;;;;;;AAAA;;AAEA,MAAMA,2BAA2B,GAAG,IAAIC,MAAJ,CAAY,IAAGC,oBAASC,QAAS,mBAAjC,CAApC;AAEA,MAAMC,eAAe,GAAG;AACtBC,EAAAA,KAAK,EAAE,OAAO;AACZC,IAAAA,MAAM,EAAEJ,oBAASC,QAAT,CAAkBG,MADd;AAEZC,IAAAA,IAAI,EAAEC,sBAAWC,gBAFL;AAGZC,IAAAA,KAAK,EAAER,oBAASC;AAHJ,GAAP,CADe;AAMtBQ,EAAAA,IAAI,EAAE,CAACC,OAAD,EAAUC,IAAV,KAAmBb,2BAA2B,CAACW,IAA5B,CAAiCE,IAAjC;AANH,CAAxB;eASeT,e","sourcesContent":["import { Keywords, TokenTypes } from '../../constants'\n\nconst REGEX_KEYWORD_FUNCTION_TEST = new RegExp(`^${Keywords.FUNCTION}([^a-zA-Z0-9_]|$)`)\n\nconst KeywordFunction = {\n  parse: () => ({\n    length: Keywords.FUNCTION.length,\n    type: TokenTypes.KEYWORD_FUNCTION,\n    value: Keywords.FUNCTION\n  }),\n  test: (context, data) => REGEX_KEYWORD_FUNCTION_TEST.test(data)\n}\n\nexport default KeywordFunction\n"],"file":"KeywordFunction.js"}