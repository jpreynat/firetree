{"version":3,"sources":["../../../src/parser/tokens/KeywordMatch.js"],"names":["REGEX_KEYWORD_MATCH_TEST","RegExp","Keywords","MATCH","KeywordMatch","parse","length","type","TokenTypes","KEYWORD_MATCH","value","test","context","data"],"mappings":";;;;;;;AAAA;;AAEA,MAAMA,wBAAwB,GAAG,IAAIC,MAAJ,CAAY,IAAGC,oBAASC,KAAM,mBAA9B,CAAjC;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,OAAO;AACZC,IAAAA,MAAM,EAAEJ,oBAASC,KAAT,CAAeG,MADX;AAEZC,IAAAA,IAAI,EAAEC,sBAAWC,aAFL;AAGZC,IAAAA,KAAK,EAAER,oBAASC;AAHJ,GAAP,CADY;AAMnBQ,EAAAA,IAAI,EAAE,CAACC,OAAD,EAAUC,IAAV,KAAmBb,wBAAwB,CAACW,IAAzB,CAA8BE,IAA9B;AANN,CAArB;eASeT,Y","sourcesContent":["import { Keywords, TokenTypes } from '../../constants'\n\nconst REGEX_KEYWORD_MATCH_TEST = new RegExp(`^${Keywords.MATCH}([^a-zA-Z0-9_]|$)`)\n\nconst KeywordMatch = {\n  parse: () => ({\n    length: Keywords.MATCH.length,\n    type: TokenTypes.KEYWORD_MATCH,\n    value: Keywords.MATCH\n  }),\n  test: (context, data) => REGEX_KEYWORD_MATCH_TEST.test(data)\n}\n\nexport default KeywordMatch\n"],"file":"KeywordMatch.js"}