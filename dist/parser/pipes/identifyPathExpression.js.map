{"version":3,"sources":["../../../src/parser/pipes/identifyPathExpression.js"],"names":["identifyPathExpression","children","context","rest","nextChild","expression","PathExpression","identify"],"mappings":";;;;;;;AAAA;;AAEA;;;;;;;;;;;;;;AAEA,MAAMA,sBAAsB,GAAG,UAAoC;AAAA,MAAnC;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAmC;AAAA,MAAXC,IAAW;;AACjE,QAAMC,SAAS,GAAG,iBAAKH,QAAL,CAAlB;;AACA,QAAMI,UAAU,GAAGC,wBAAeC,QAAf,CAAwBL,OAAxB,EAAiCE,SAAjC,CAAnB;;AACAH,EAAAA,QAAQ,GAAG,iBAAKA,QAAL,CAAX;AACA,yCACKE,IADL;AAEEF,IAAAA,QAFF;AAGEC,IAAAA,OAHF;AAIEG,IAAAA;AAJF;AAMD,CAVD;;eAYeL,sB","sourcesContent":["import { head, tail } from 'ramda'\n\nimport PathExpression from '../nodes/PathExpression'\n\nconst identifyPathExpression = ({ children, context, ...rest }) => {\n  const nextChild = head(children)\n  const expression = PathExpression.identify(context, nextChild)\n  children = tail(children)\n  return {\n    ...rest,\n    children,\n    context,\n    expression\n  }\n}\n\nexport default identifyPathExpression\n"],"file":"identifyPathExpression.js"}