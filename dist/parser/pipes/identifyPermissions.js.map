{"version":3,"sources":["../../../src/parser/pipes/identifyPermissions.js"],"names":["identifyPermissionAndWhitespace","skipWhitespaceAndComments","identifyPermission","identifyCommaPermissionAndWhitespace","expectCommaOperator","identifyPermissions","props","children","context","permissions","first","nextChild","Identifier","is","CommaOperator","permission"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AAEA;;AACA;;AACA;;;;;;;;;;AAEA,MAAMA,+BAA+B,GAAG,iBACtCC,kCADsC,EAEtCC,2BAFsC,EAGtCD,kCAHsC,CAAxC;AAMA,MAAME,oCAAoC,GAAG,iBAC3CC,4BAD2C,EAE3CJ,+BAF2C,CAA7C;;AAKA,MAAMK,mBAAmB,GAAIC,KAAD,IAAW;AACrC,MAAI;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAwBF,KAA5B;AACA,MAAIG,WAAW,GAAG,EAAlB;AACA,MAAIC,KAAK,GAAG,IAAZ;AACA,MAAIC,SAAS,GAAG,iBAAKJ,QAAL,CAAhB;;AACA,SACE,mBAAOA,QAAP,IAAmB,CAAnB,KACEG,KAAK,IAAIE,oBAAWC,EAAX,CAAcF,SAAd,CAAV,IAAwC,CAACD,KAAD,IAAUI,uBAAcD,EAAd,CAAiBF,SAAjB,CADnD,CADF,EAGE;AACA,QAAII,UAAJ;;AACA,QAAIL,KAAJ,EAAW;AACTA,MAAAA,KAAK,GAAG,KAAR;AACC,OAAC;AAAEH,QAAAA,QAAF;AAAYC,QAAAA,OAAZ;AAAqBO,QAAAA;AAArB,UAAoCf,+BAA+B,CAAC;AACpEO,QAAAA,QADoE;AAEpEC,QAAAA;AAFoE,OAAD,CAApE;AAIF,KAND,MAMO;AACL;AAAC,OAAC;AAAED,QAAAA,QAAF;AAAYC,QAAAA,OAAZ;AAAqBO,QAAAA;AAArB,UAAoCZ,oCAAoC,CAAC;AACzEI,QAAAA,QADyE;AAEzEC,QAAAA;AAFyE,OAAD,CAAzE;AAIF;;AACDC,IAAAA,WAAW,GAAG,mBAAOM,UAAP,EAAmBN,WAAnB,CAAd;AACAE,IAAAA,SAAS,GAAG,iBAAKJ,QAAL,CAAZ;AACD;;AACD,yCAAYD,KAAZ;AAAmBC,IAAAA,QAAnB;AAA6BC,IAAAA,OAA7B;AAAsCC,IAAAA;AAAtC;AACD,CA1BD;;eA4BeJ,mB","sourcesContent":["import { append, head, length, pipe } from 'ramda'\n\nimport CommaOperator from '../nodes/CommaOperator'\nimport Identifier from '../nodes/Identifier'\n\nimport expectCommaOperator from './expectCommaOperator'\nimport identifyPermission from './identifyPermission'\nimport skipWhitespaceAndComments from './skipWhitespaceAndComments'\n\nconst identifyPermissionAndWhitespace = pipe(\n  skipWhitespaceAndComments,\n  identifyPermission,\n  skipWhitespaceAndComments\n)\n\nconst identifyCommaPermissionAndWhitespace = pipe(\n  expectCommaOperator,\n  identifyPermissionAndWhitespace\n)\n\nconst identifyPermissions = (props) => {\n  let { children, context } = props\n  let permissions = []\n  let first = true\n  let nextChild = head(children)\n  while (\n    length(children) > 0 &&\n    ((first && Identifier.is(nextChild)) || (!first && CommaOperator.is(nextChild)))\n  ) {\n    let permission\n    if (first) {\n      first = false\n      ;({ children, context, permission } = identifyPermissionAndWhitespace({\n        children,\n        context\n      }))\n    } else {\n      ;({ children, context, permission } = identifyCommaPermissionAndWhitespace({\n        children,\n        context\n      }))\n    }\n    permissions = append(permission, permissions)\n    nextChild = head(children)\n  }\n  return { ...props, children, context, permissions }\n}\n\nexport default identifyPermissions\n"],"file":"identifyPermissions.js"}