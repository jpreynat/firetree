{"version":3,"sources":["../../../src/parser/pipes/parseParams.js"],"names":["parseParamAndWhitespace","parseWhitespaceAndComments","parseParam","parseCommaParamAndWhitespace","parseCommaOperator","parseCommaSeparatedParams","props","children","context","tokenList","params","first","nextToken","get","size","type","TokenTypes","OPERATOR_CLOSE_PARENTHESIS","param","parseParams","parseOpenParenthesisOperator","parseCloseParenthesisOperator"],"mappings":";;;;;;;AAAA;;AAEA;;AAEA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;AAEA,MAAMA,uBAAuB,GAAG,iBAC9BC,mCAD8B,EAE9BC,mBAF8B,EAG9BD,mCAH8B,CAAhC;AAMA,MAAME,4BAA4B,GAAG,iBAAKC,2BAAL,EAAyBJ,uBAAzB,CAArC;;AAEA,MAAMK,yBAAyB,GAAIC,KAAD,IAAW;AAC3C,MAAI;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,OAAZ;AAAqBC,IAAAA;AAArB,MAAmCH,KAAvC;AACA,MAAII,MAAM,GAAG,EAAb;AACA,MAAIC,KAAK,GAAG,IAAZ;AACA,MAAIC,SAAS,GAAGH,SAAS,CAACI,GAAV,CAAc,CAAd,CAAhB;;AACA,SAAOJ,SAAS,CAACK,IAAV,GAAiB,CAAjB,IAAsBF,SAAS,CAACG,IAAV,KAAmBC,sBAAWC,0BAA3D,EAAuF;AACrF,QAAIC,KAAJ;;AACA,QAAIP,KAAJ,EAAW;AACTA,MAAAA,KAAK,GAAG,KAAR;AACC,OAAC;AAAEJ,QAAAA,QAAF;AAAYC,QAAAA,OAAZ;AAAqBU,QAAAA,KAArB;AAA4BT,QAAAA;AAA5B,UAA0CT,uBAAuB,CAAC;AAClEO,QAAAA,QADkE;AAElEC,QAAAA,OAFkE;AAGlEC,QAAAA;AAHkE,OAAD,CAAlE;AAKF,KAPD,MAOO;AACL;AAAC,OAAC;AAAEF,QAAAA,QAAF;AAAYC,QAAAA,OAAZ;AAAqBU,QAAAA,KAArB;AAA4BT,QAAAA;AAA5B,UAA0CN,4BAA4B,CAAC;AACvEI,QAAAA,QADuE;AAEvEC,QAAAA,OAFuE;AAGvEC,QAAAA;AAHuE,OAAD,CAAvE;AAKF;;AACDC,IAAAA,MAAM,GAAG,mBAAOQ,KAAP,EAAcR,MAAd,CAAT;AACAE,IAAAA,SAAS,GAAGH,SAAS,CAACI,GAAV,CAAc,CAAd,CAAZ;AACD;;AACD,yCAAYP,KAAZ;AAAmBC,IAAAA,QAAnB;AAA6BC,IAAAA,OAA7B;AAAsCE,IAAAA,MAAtC;AAA8CD,IAAAA;AAA9C;AACD,CAzBD;;AA2BA,MAAMU,WAAW,GAAG,iBAClBC,qCADkB,EAElBf,yBAFkB,EAGlBgB,sCAHkB,CAApB;eAMeF,W","sourcesContent":["import { append, pipe } from 'ramda'\n\nimport { TokenTypes } from '../../constants'\n\nimport parseCloseParenthesisOperator from './parseCloseParenthesisOperator'\nimport parseCommaOperator from './parseCommaOperator'\nimport parseOpenParenthesisOperator from './parseOpenParenthesisOperator'\nimport parseParam from './parseParam'\nimport parseWhitespaceAndComments from './parseWhitespaceAndComments'\n\nconst parseParamAndWhitespace = pipe(\n  parseWhitespaceAndComments,\n  parseParam,\n  parseWhitespaceAndComments\n)\n\nconst parseCommaParamAndWhitespace = pipe(parseCommaOperator, parseParamAndWhitespace)\n\nconst parseCommaSeparatedParams = (props) => {\n  let { children, context, tokenList } = props\n  let params = []\n  let first = true\n  let nextToken = tokenList.get(0)\n  while (tokenList.size > 0 && nextToken.type !== TokenTypes.OPERATOR_CLOSE_PARENTHESIS) {\n    let param\n    if (first) {\n      first = false\n      ;({ children, context, param, tokenList } = parseParamAndWhitespace({\n        children,\n        context,\n        tokenList\n      }))\n    } else {\n      ;({ children, context, param, tokenList } = parseCommaParamAndWhitespace({\n        children,\n        context,\n        tokenList\n      }))\n    }\n    params = append(param, params)\n    nextToken = tokenList.get(0)\n  }\n  return { ...props, children, context, params, tokenList }\n}\n\nconst parseParams = pipe(\n  parseOpenParenthesisOperator,\n  parseCommaSeparatedParams,\n  parseCloseParenthesisOperator\n)\n\nexport default parseParams\n"],"file":"parseParams.js"}