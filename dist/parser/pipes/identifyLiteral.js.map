{"version":3,"sources":["../../../src/parser/pipes/identifyLiteral.js"],"names":["LITERAL_IDENTIFIERS","Literal","identifyLiteralNode","identifyLiteral","children","context","rest","nextChild","literal"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;;;;;;;;;;;;;AAEA,MAAMA,mBAAmB,GAAG,CAACC,gBAAD,CAA5B;AACA,MAAMC,mBAAmB,GAAG,4BAAiBF,mBAAjB,CAA5B;;AAEA,MAAMG,eAAe,GAAG,UAAoC;AAAA,MAAnC;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAmC;AAAA,MAAXC,IAAW;;AAC1D,QAAMC,SAAS,GAAG,iBAAKH,QAAL,CAAlB;AACA,QAAMI,OAAO,GAAGN,mBAAmB,CAACG,OAAD,EAAUE,SAAV,CAAnC;AACAH,EAAAA,QAAQ,GAAG,iBAAKA,QAAL,CAAX;AACA,yCAAYE,IAAZ;AAAkBF,IAAAA,QAAlB;AAA4BC,IAAAA,OAA5B;AAAqCG,IAAAA;AAArC;AACD,CALD;;eAOeL,e","sourcesContent":["import { head, tail } from 'ramda'\n\nimport Literal from '../nodes/Literal'\nimport { identifyNextNode } from '../util'\n\nconst LITERAL_IDENTIFIERS = [Literal]\nconst identifyLiteralNode = identifyNextNode(LITERAL_IDENTIFIERS)\n\nconst identifyLiteral = ({ children, context, ...rest }) => {\n  const nextChild = head(children)\n  const literal = identifyLiteralNode(context, nextChild)\n  children = tail(children)\n  return { ...rest, children, context, literal }\n}\n\nexport default identifyLiteral\n"],"file":"identifyLiteral.js"}