{"version":3,"sources":["../../../src/parser/pipes/parsePathParts.js"],"names":["PATH_PART_PARSERS","PathPartExpression","PathPartVariable","PathPartWord","parsePathPartNode","parsePathPart","children","context","tokenList","rest","pathPart","parsedTokenList","ast","size","parsePathParts","props","path"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;AAEA,MAAMA,iBAAiB,GAAG,CAACC,2BAAD,EAAqBC,yBAArB,EAAuCC,qBAAvC,CAA1B;AACA,MAAMC,iBAAiB,GAAG,yBAAcJ,iBAAd,CAA1B;;AAEA,MAAMK,aAAa,GAAG,UAA+C;AAAA,MAA9C;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,OAAZ;AAAqBC,IAAAA;AAArB,GAA8C;AAAA,MAAXC,IAAW;;AACnE,QAAMC,QAAQ,GAAGN,iBAAiB,CAACG,OAAD,EAAUC,SAAV,CAAlC;AACAF,EAAAA,QAAQ,GAAG,mBAAOI,QAAP,EAAiBJ,QAAjB,CAAX;AACA,QAAMK,eAAe,GAAG,gCAAkBJ,OAAlB,EAA2B;AAAEK,IAAAA,GAAG,EAAEF;AAAP,GAA3B,CAAxB;AACAF,EAAAA,SAAS,GAAG,kBAAMG,eAAe,CAACE,IAAtB,EAA4BL,SAAS,CAACK,IAAtC,EAA4CL,SAA5C,CAAZ;AACA,yCAAYC,IAAZ;AAAkBH,IAAAA,QAAlB;AAA4BC,IAAAA,OAA5B;AAAqCG,IAAAA,QAArC;AAA+CF,IAAAA;AAA/C;AACD,CAND;;AAQA,MAAMM,cAAc,GAAIC,KAAD,IAAW;AAChC,MAAI;AAAET,IAAAA,QAAF;AAAYC,IAAAA,OAAZ;AAAqBC,IAAAA;AAArB,MAAmCO,KAAvC;AACA,MAAIC,IAAI,GAAG,EAAX;;AACA,SAAO,wBAAahB,iBAAb,EAAgCO,OAAhC,EAAyCC,SAAzC,CAAP,EAA4D;AAC1D,QAAIE,QAAJ;AACC,KAAC;AAAEJ,MAAAA,QAAF;AAAYC,MAAAA,OAAZ;AAAqBG,MAAAA,QAArB;AAA+BF,MAAAA;AAA/B,QAA6CH,aAAa,CAAC;AAC3DC,MAAAA,QAD2D;AAE3DC,MAAAA,OAF2D;AAG3DC,MAAAA;AAH2D,KAAD,CAA3D;AAKDQ,IAAAA,IAAI,GAAG,mBAAON,QAAP,EAAiBM,IAAjB,CAAP;AACD;;AACD,yCAAYD,KAAZ;AAAmBT,IAAAA,QAAnB;AAA6BC,IAAAA,OAA7B;AAAsCS,IAAAA,IAAtC;AAA4CR,IAAAA;AAA5C;AACD,CAbD;;eAeeM,c","sourcesContent":["import { append, slice } from 'ramda'\n\nimport generateTokenList from '../../generator/generateTokenList'\nimport PathPartExpression from '../nodes/PathPartExpression'\nimport PathPartVariable from '../nodes/PathPartVariable'\nimport PathPartWord from '../nodes/PathPartWord'\nimport { parseNextNode, testNextNode } from '../util'\n\nconst PATH_PART_PARSERS = [PathPartExpression, PathPartVariable, PathPartWord]\nconst parsePathPartNode = parseNextNode(PATH_PART_PARSERS)\n\nconst parsePathPart = ({ children, context, tokenList, ...rest }) => {\n  const pathPart = parsePathPartNode(context, tokenList)\n  children = append(pathPart, children)\n  const parsedTokenList = generateTokenList(context, { ast: pathPart })\n  tokenList = slice(parsedTokenList.size, tokenList.size, tokenList)\n  return { ...rest, children, context, pathPart, tokenList }\n}\n\nconst parsePathParts = (props) => {\n  let { children, context, tokenList } = props\n  let path = []\n  while (testNextNode(PATH_PART_PARSERS, context, tokenList)) {\n    let pathPart\n    ;({ children, context, pathPart, tokenList } = parsePathPart({\n      children,\n      context,\n      tokenList\n    }))\n    path = append(pathPart, path)\n  }\n  return { ...props, children, context, path, tokenList }\n}\n\nexport default parsePathParts\n"],"file":"parsePathParts.js"}