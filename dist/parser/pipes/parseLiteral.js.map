{"version":3,"sources":["../../../src/parser/pipes/parseLiteral.js"],"names":["LITERAL_PARSERS","Literal","parseLiteralNode","parseLiteral","children","context","tokenList","rest","literal","parsedTokenList","ast","size"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AACA;;;;;;;;;;;;;;AAEA,MAAMA,eAAe,GAAG,CAACC,gBAAD,CAAxB;AACA,MAAMC,gBAAgB,GAAG,yBAAcF,eAAd,CAAzB;;AAEA,MAAMG,YAAY,GAAG,UAA+C;AAAA,MAA9C;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,OAAZ;AAAqBC,IAAAA;AAArB,GAA8C;AAAA,MAAXC,IAAW;;AAClE,QAAMC,OAAO,GAAGN,gBAAgB,CAACG,OAAD,EAAUC,SAAV,CAAhC;AACAF,EAAAA,QAAQ,GAAG,mBAAOI,OAAP,EAAgBJ,QAAhB,CAAX;AACA,QAAMK,eAAe,GAAG,gCAAkBJ,OAAlB,EAA2B;AAAEK,IAAAA,GAAG,EAAEF;AAAP,GAA3B,CAAxB;AACAF,EAAAA,SAAS,GAAG,kBAAMG,eAAe,CAACE,IAAtB,EAA4BL,SAAS,CAACK,IAAtC,EAA4CL,SAA5C,CAAZ;AACA,yCAAYC,IAAZ;AAAkBH,IAAAA,QAAlB;AAA4BC,IAAAA,OAA5B;AAAqCG,IAAAA,OAArC;AAA8CF,IAAAA;AAA9C;AACD,CAND;;eAQeH,Y","sourcesContent":["import { append, slice } from 'ramda'\n\nimport generateTokenList from '../../generator/generateTokenList'\nimport Literal from '../nodes/Literal'\nimport { parseNextNode } from '../util'\n\nconst LITERAL_PARSERS = [Literal]\nconst parseLiteralNode = parseNextNode(LITERAL_PARSERS)\n\nconst parseLiteral = ({ children, context, tokenList, ...rest }) => {\n  const literal = parseLiteralNode(context, tokenList)\n  children = append(literal, children)\n  const parsedTokenList = generateTokenList(context, { ast: literal })\n  tokenList = slice(parsedTokenList.size, tokenList.size, tokenList)\n  return { ...rest, children, context, literal, tokenList }\n}\n\nexport default parseLiteral\n"],"file":"parseLiteral.js"}