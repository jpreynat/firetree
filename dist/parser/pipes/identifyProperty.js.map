{"version":3,"sources":["../../../src/parser/pipes/identifyProperty.js"],"names":["PROPERTY_IDENTIFIERS","Range","Expression","Identifier","Literal","identifyPropertyNode","identifyProperty","children","context","rest","nextChild","right"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;AAEA,MAAMA,oBAAoB,GAAG,CAACC,cAAD,EAAQC,mBAAR,EAAoBC,mBAApB,EAAgCC,gBAAhC,CAA7B;AACA,MAAMC,oBAAoB,GAAG,4BAAiBL,oBAAjB,CAA7B;;AAEA,MAAMM,gBAAgB,GAAG,UAAoC;AAAA,MAAnC;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAmC;AAAA,MAAXC,IAAW;;AAC3D,QAAMC,SAAS,GAAG,iBAAKH,QAAL,CAAlB;AACA,QAAMI,KAAK,GAAGN,oBAAoB,CAACG,OAAD,EAAUE,SAAV,CAAlC;AACAH,EAAAA,QAAQ,GAAG,iBAAKA,QAAL,CAAX;AACA,yCAAYE,IAAZ;AAAkBF,IAAAA,QAAlB;AAA4BC,IAAAA,OAA5B;AAAqCG,IAAAA;AAArC;AACD,CALD;;eAOeL,gB","sourcesContent":["import { head, tail } from 'ramda'\n\nimport Expression from '../nodes/Expression'\nimport Identifier from '../nodes/Identifier'\nimport Literal from '../nodes/Literal'\nimport Range from '../nodes/Range'\nimport { identifyNextNode } from '../util'\n\nconst PROPERTY_IDENTIFIERS = [Range, Expression, Identifier, Literal]\nconst identifyPropertyNode = identifyNextNode(PROPERTY_IDENTIFIERS)\n\nconst identifyProperty = ({ children, context, ...rest }) => {\n  const nextChild = head(children)\n  const right = identifyPropertyNode(context, nextChild)\n  children = tail(children)\n  return { ...rest, children, context, right }\n}\n\nexport default identifyProperty\n"],"file":"identifyProperty.js"}