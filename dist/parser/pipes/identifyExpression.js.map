{"version":3,"sources":["../../../src/parser/pipes/identifyExpression.js"],"names":["EXPRESION_IDENTIFIERS","Expression","Identifier","Literal","identifyExpressionNode","identifyExpression","children","context","rest","nextChild","expression"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;AAEA,MAAMA,qBAAqB,GAAG,CAACC,mBAAD,EAAaC,mBAAb,EAAyBC,gBAAzB,CAA9B;AACA,MAAMC,sBAAsB,GAAG,4BAAiBJ,qBAAjB,CAA/B;;AAEA,MAAMK,kBAAkB,GAAG,UAAoC;AAAA,MAAnC;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAmC;AAAA,MAAXC,IAAW;;AAC7D,QAAMC,SAAS,GAAG,iBAAKH,QAAL,CAAlB;AACA,QAAMI,UAAU,GAAGN,sBAAsB,CAACG,OAAD,EAAUE,SAAV,CAAzC;AACAH,EAAAA,QAAQ,GAAG,iBAAKA,QAAL,CAAX;AACA,yCAAYE,IAAZ;AAAkBF,IAAAA,QAAlB;AAA4BC,IAAAA,OAA5B;AAAqCG,IAAAA;AAArC;AACD,CALD;;eAOeL,kB","sourcesContent":["import { head, tail } from 'ramda'\n\nimport Expression from '../nodes/Expression'\nimport Identifier from '../nodes/Identifier'\nimport Literal from '../nodes/Literal'\nimport { identifyNextNode } from '../util'\n\nconst EXPRESION_IDENTIFIERS = [Expression, Identifier, Literal]\nconst identifyExpressionNode = identifyNextNode(EXPRESION_IDENTIFIERS)\n\nconst identifyExpression = ({ children, context, ...rest }) => {\n  const nextChild = head(children)\n  const expression = identifyExpressionNode(context, nextChild)\n  children = tail(children)\n  return { ...rest, children, context, expression }\n}\n\nexport default identifyExpression\n"],"file":"identifyExpression.js"}