{"version":3,"sources":["../../../src/parser/pipes/parseArgs.js"],"names":["parseArgumentAndWhitespace","parseWhitespaceAndComments","parseArgument","parseCommaArgumentAndWhitespace","parseCommaOperator","parseCommaSeparatedArgs","props","children","context","tokenList","args","first","nextToken","get","size","type","TokenTypes","OPERATOR_CLOSE_PARENTHESIS","argument","parseArgs","parseOpenParenthesisOperator","parseCloseParenthesisOperator"],"mappings":";;;;;;;AAAA;;AAEA;;AAEA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;AAEA,MAAMA,0BAA0B,GAAG,iBACjCC,mCADiC,EAEjCC,sBAFiC,EAGjCD,mCAHiC,CAAnC;AAMA,MAAME,+BAA+B,GAAG,iBAAKC,2BAAL,EAAyBJ,0BAAzB,CAAxC;;AAEA,MAAMK,uBAAuB,GAAIC,KAAD,IAAW;AACzC,MAAI;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,OAAZ;AAAqBC,IAAAA;AAArB,MAAmCH,KAAvC;AACA,MAAII,IAAI,GAAG,EAAX;AACA,MAAIC,KAAK,GAAG,IAAZ;AACA,MAAIC,SAAS,GAAGH,SAAS,CAACI,GAAV,CAAc,CAAd,CAAhB;;AACA,SAAOJ,SAAS,CAACK,IAAV,GAAiB,CAAjB,IAAsBF,SAAS,CAACG,IAAV,KAAmBC,sBAAWC,0BAA3D,EAAuF;AACrF,QAAIC,QAAJ;;AACA,QAAIP,KAAJ,EAAW;AACTA,MAAAA,KAAK,GAAG,KAAR;AACC,OAAC;AAAEO,QAAAA,QAAF;AAAYX,QAAAA,QAAZ;AAAsBC,QAAAA,OAAtB;AAA+BC,QAAAA;AAA/B,UAA6CT,0BAA0B,CAAC;AACxEO,QAAAA,QADwE;AAExEC,QAAAA,OAFwE;AAGxEC,QAAAA;AAHwE,OAAD,CAAxE;AAKF,KAPD,MAOO;AACL;AAAC,OAAC;AAAES,QAAAA,QAAF;AAAYX,QAAAA,QAAZ;AAAsBC,QAAAA,OAAtB;AAA+BC,QAAAA;AAA/B,UAA6CN,+BAA+B,CAAC;AAC7EI,QAAAA,QAD6E;AAE7EC,QAAAA,OAF6E;AAG7EC,QAAAA;AAH6E,OAAD,CAA7E;AAKF;;AACDC,IAAAA,IAAI,GAAG,mBAAOQ,QAAP,EAAiBR,IAAjB,CAAP;AACAE,IAAAA,SAAS,GAAGH,SAAS,CAACI,GAAV,CAAc,CAAd,CAAZ;AACD;;AACD,yCAAYP,KAAZ;AAAmBI,IAAAA,IAAnB;AAAyBH,IAAAA,QAAzB;AAAmCC,IAAAA,OAAnC;AAA4CC,IAAAA;AAA5C;AACD,CAzBD;;AA2BA,MAAMU,SAAS,GAAG,iBAChBC,qCADgB,EAEhBf,uBAFgB,EAGhBgB,sCAHgB,CAAlB;eAMeF,S","sourcesContent":["import { append, pipe } from 'ramda'\n\nimport { TokenTypes } from '../../constants'\n\nimport parseArgument from './parseArgument'\nimport parseCloseParenthesisOperator from './parseCloseParenthesisOperator'\nimport parseCommaOperator from './parseCommaOperator'\nimport parseOpenParenthesisOperator from './parseOpenParenthesisOperator'\nimport parseWhitespaceAndComments from './parseWhitespaceAndComments'\n\nconst parseArgumentAndWhitespace = pipe(\n  parseWhitespaceAndComments,\n  parseArgument,\n  parseWhitespaceAndComments\n)\n\nconst parseCommaArgumentAndWhitespace = pipe(parseCommaOperator, parseArgumentAndWhitespace)\n\nconst parseCommaSeparatedArgs = (props) => {\n  let { children, context, tokenList } = props\n  let args = []\n  let first = true\n  let nextToken = tokenList.get(0)\n  while (tokenList.size > 0 && nextToken.type !== TokenTypes.OPERATOR_CLOSE_PARENTHESIS) {\n    let argument\n    if (first) {\n      first = false\n      ;({ argument, children, context, tokenList } = parseArgumentAndWhitespace({\n        children,\n        context,\n        tokenList\n      }))\n    } else {\n      ;({ argument, children, context, tokenList } = parseCommaArgumentAndWhitespace({\n        children,\n        context,\n        tokenList\n      }))\n    }\n    args = append(argument, args)\n    nextToken = tokenList.get(0)\n  }\n  return { ...props, args, children, context, tokenList }\n}\n\nconst parseArgs = pipe(\n  parseOpenParenthesisOperator,\n  parseCommaSeparatedArgs,\n  parseCloseParenthesisOperator\n)\n\nexport default parseArgs\n"],"file":"parseArgs.js"}