{"version":3,"sources":["../../../src/parser/pipes/parseLeft.js"],"names":["LEFT_PARSERS","Identifier","Literal","parseLeftNode","parseLeft","props","children","context","prevExpression","tokenList","left","parsedTokenList","ast","size"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;;;;;;;;;AAEA,MAAMA,YAAY,GAAG,CAACC,mBAAD,EAAaC,gBAAb,CAArB;AACA,MAAMC,aAAa,GAAG,yBAAcH,YAAd,CAAtB;;AAEA,MAAMI,SAAS,GAAIC,KAAD,IAAW;AAC3B,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,OAAZ;AAAqBC,IAAAA,cAArB;AAAqCC,IAAAA;AAArC,MAAmDJ,KAAzD;;AACA,MAAIG,cAAJ,EAAoB;AAClB,2CACKH,KADL;AAEEC,MAAAA,QAAQ,EAAE,mBAAOE,cAAP,EAAuBF,QAAvB,CAFZ;AAGEI,MAAAA,IAAI,EAAEF;AAHR;AAKD;;AACD,QAAME,IAAI,GAAGP,aAAa,CAACI,OAAD,EAAUE,SAAV,CAA1B;AACA,QAAME,eAAe,GAAG,gCAAkBJ,OAAlB,EAA2B;AAAEK,IAAAA,GAAG,EAAEF;AAAP,GAA3B,CAAxB;AACA,yCACKL,KADL;AAEEC,IAAAA,QAAQ,EAAE,mBAAOI,IAAP,EAAaJ,QAAb,CAFZ;AAGEI,IAAAA,IAHF;AAIED,IAAAA,SAAS,EAAE,kBAAME,eAAe,CAACE,IAAtB,EAA4BJ,SAAS,CAACI,IAAtC,EAA4CJ,SAA5C;AAJb;AAMD,CAjBD;;eAmBeL,S","sourcesContent":["import { append, slice } from 'ramda'\n\nimport generateTokenList from '../../generator/generateTokenList'\nimport Identifier from '../nodes/Identifier'\nimport Literal from '../nodes/Literal'\nimport { parseNextNode } from '../util'\n\nconst LEFT_PARSERS = [Identifier, Literal]\nconst parseLeftNode = parseNextNode(LEFT_PARSERS)\n\nconst parseLeft = (props) => {\n  const { children, context, prevExpression, tokenList } = props\n  if (prevExpression) {\n    return {\n      ...props,\n      children: append(prevExpression, children),\n      left: prevExpression\n    }\n  }\n  const left = parseLeftNode(context, tokenList)\n  const parsedTokenList = generateTokenList(context, { ast: left })\n  return {\n    ...props,\n    children: append(left, children),\n    left,\n    tokenList: slice(parsedTokenList.size, tokenList.size, tokenList)\n  }\n}\n\nexport default parseLeft\n"],"file":"parseLeft.js"}