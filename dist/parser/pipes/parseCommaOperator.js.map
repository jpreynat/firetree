{"version":3,"sources":["../../../src/parser/pipes/parseCommaOperator.js"],"names":["parseCommaOperator","children","context","tokenList","rest","operator","CommaOperator","parse","parsedTokenList","ast","size"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;;;;;;;;;;;;;AAEA,MAAMA,kBAAkB,GAAG,UAA+C;AAAA,MAA9C;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,OAAZ;AAAqBC,IAAAA;AAArB,GAA8C;AAAA,MAAXC,IAAW;;AACxE,QAAMC,QAAQ,GAAGC,uBAAcC,KAAd,CAAoBL,OAApB,EAA6BC,SAA7B,CAAjB;;AACA,QAAMK,eAAe,GAAG,gCAAkBN,OAAlB,EAA2B;AAAEO,IAAAA,GAAG,EAAEJ;AAAP,GAA3B,CAAxB;AACA,yCACKD,IADL;AAEEH,IAAAA,QAAQ,EAAE,mBAAOI,QAAP,EAAiBJ,QAAjB,CAFZ;AAGEC,IAAAA,OAHF;AAIEG,IAAAA,QAJF;AAKEF,IAAAA,SAAS,EAAE,kBAAMK,eAAe,CAACE,IAAtB,EAA4BP,SAAS,CAACO,IAAtC,EAA4CP,SAA5C;AALb;AAOD,CAVD;;eAYeH,kB","sourcesContent":["import { append, slice } from 'ramda'\n\nimport generateTokenList from '../../generator/generateTokenList'\nimport CommaOperator from '../nodes/CommaOperator'\n\nconst parseCommaOperator = ({ children, context, tokenList, ...rest }) => {\n  const operator = CommaOperator.parse(context, tokenList)\n  const parsedTokenList = generateTokenList(context, { ast: operator })\n  return {\n    ...rest,\n    children: append(operator, children),\n    context,\n    operator,\n    tokenList: slice(parsedTokenList.size, tokenList.size, tokenList)\n  }\n}\n\nexport default parseCommaOperator\n"],"file":"parseCommaOperator.js"}