{"version":3,"sources":["../../../src/parser/pipes/identifyBinaryOperator.js"],"names":["BINARY_OPERATOR_IDENTIFIERS","DivideOperator","EqualityOperator","GreaterThanEqualOperator","GreaterThanOperator","InequalityOperator","InOperator","IsOperator","LessThanEqualOperator","LessThanOperator","LogicalAndOperator","LogicalOrOperator","ModulusOperator","MultiplyOperator","UnaryMinusOperator","UnaryPlusOperator","identifyBinaryOperatorNode","identifyBinaryOperator","children","context","rest","nextChild","operator"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;AAEA,MAAMA,2BAA2B,GAAG,CAClCC,uBADkC,EAElCC,yBAFkC,EAGlCC,iCAHkC,EAIlCC,4BAJkC,EAKlCC,2BALkC,EAMlCC,mBANkC,EAOlCC,mBAPkC,EAQlCC,8BARkC,EASlCC,yBATkC,EAUlCC,2BAVkC,EAWlCC,0BAXkC,EAYlCC,wBAZkC,EAalCC,yBAbkC,EAclCC,2BAdkC,EAelCC,0BAfkC,CAApC;AAiBA,MAAMC,0BAA0B,GAAG,4BAAiBhB,2BAAjB,CAAnC;;AAEA,MAAMiB,sBAAsB,GAAG,UAAoC;AAAA,MAAnC;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAmC;AAAA,MAAXC,IAAW;;AACjE,QAAMC,SAAS,GAAG,iBAAKH,QAAL,CAAlB;AACA,QAAMI,QAAQ,GAAGN,0BAA0B,CAACG,OAAD,EAAUE,SAAV,CAA3C;AACAH,EAAAA,QAAQ,GAAG,iBAAKA,QAAL,CAAX;AACA,yCAAYE,IAAZ;AAAkBF,IAAAA,QAAlB;AAA4BC,IAAAA,OAA5B;AAAqCG,IAAAA;AAArC;AACD,CALD;;eAOeL,sB","sourcesContent":["import { head, tail } from 'ramda'\n\nimport DivideOperator from '../nodes/DivideOperator'\nimport EqualityOperator from '../nodes/EqualityOperator'\nimport GreaterThanEqualOperator from '../nodes/GreaterThanEqualOperator'\nimport GreaterThanOperator from '../nodes/GreaterThanOperator'\nimport InOperator from '../nodes/InOperator'\nimport InequalityOperator from '../nodes/InequalityOperator'\nimport IsOperator from '../nodes/IsOperator'\nimport LessThanEqualOperator from '../nodes/LessThanEqualOperator'\nimport LessThanOperator from '../nodes/LessThanOperator'\nimport LogicalAndOperator from '../nodes/LogicalAndOperator'\nimport LogicalOrOperator from '../nodes/LogicalOrOperator'\nimport ModulusOperator from '../nodes/ModulusOperator'\nimport MultiplyOperator from '../nodes/MultiplyOperator'\nimport UnaryMinusOperator from '../nodes/UnaryMinusOperator'\nimport UnaryPlusOperator from '../nodes/UnaryPlusOperator'\nimport { identifyNextNode } from '../util'\n\nconst BINARY_OPERATOR_IDENTIFIERS = [\n  DivideOperator,\n  EqualityOperator,\n  GreaterThanEqualOperator,\n  GreaterThanOperator,\n  InequalityOperator,\n  InOperator,\n  IsOperator,\n  LessThanEqualOperator,\n  LessThanOperator,\n  LogicalAndOperator,\n  LogicalOrOperator,\n  ModulusOperator,\n  MultiplyOperator,\n  UnaryMinusOperator,\n  UnaryPlusOperator\n]\nconst identifyBinaryOperatorNode = identifyNextNode(BINARY_OPERATOR_IDENTIFIERS)\n\nconst identifyBinaryOperator = ({ children, context, ...rest }) => {\n  const nextChild = head(children)\n  const operator = identifyBinaryOperatorNode(context, nextChild)\n  children = tail(children)\n  return { ...rest, children, context, operator }\n}\n\nexport default identifyBinaryOperator\n"],"file":"identifyBinaryOperator.js"}