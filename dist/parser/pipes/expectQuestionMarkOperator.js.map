{"version":3,"sources":["../../../src/parser/pipes/expectQuestionMarkOperator.js"],"names":["expectQuestionMarkOperator","children","rest","nextChild","QuestionMarkOperator","is","Error","Operators","OPEN_PARENTHESIS"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;;;;;;;;;;;;;AAEA,MAAMA,0BAA0B,GAAG,UAA2B;AAAA,MAA1B;AAAEC,IAAAA;AAAF,GAA0B;AAAA,MAAXC,IAAW;;AAC5D,QAAMC,SAAS,GAAG,iBAAKF,QAAL,CAAlB;;AACA,MAAI,CAACG,8BAAqBC,EAArB,CAAwBF,SAAxB,CAAL,EAAyC;AACvC,UAAM,IAAIG,KAAJ,CAAW,sBAAqBC,qBAAUC,gBAAiB,oBAAmBL,SAAU,EAAxF,CAAN;AACD;;AACD,yCACKD,IADL;AAEED,IAAAA,QAAQ,EAAE,iBAAKA,QAAL;AAFZ;AAID,CATD;;eAWeD,0B","sourcesContent":["import { head, tail } from 'ramda'\n\nimport { Operators } from '../../constants'\nimport QuestionMarkOperator from '../nodes/QuestionMarkOperator'\n\nconst expectQuestionMarkOperator = ({ children, ...rest }) => {\n  const nextChild = head(children)\n  if (!QuestionMarkOperator.is(nextChild)) {\n    throw new Error(`Expected operator '${Operators.OPEN_PARENTHESIS}'. Instead found ${nextChild}`)\n  }\n  return {\n    ...rest,\n    children: tail(children)\n  }\n}\n\nexport default expectQuestionMarkOperator\n"],"file":"expectQuestionMarkOperator.js"}