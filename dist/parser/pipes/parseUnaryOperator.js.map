{"version":3,"sources":["../../../src/parser/pipes/parseUnaryOperator.js"],"names":["UNARY_OPERATOR_PARSERS","LogicalNotOperator","UnaryMinusOperator","UnaryPlusOperator","parseUnaryOperator","children","context","tokenList","rest","operator","parsedTokenList","ast","size"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;AAEA,MAAMA,sBAAsB,GAAG,CAACC,2BAAD,EAAqBC,2BAArB,EAAyCC,0BAAzC,CAA/B;;AAEA,MAAMC,kBAAkB,GAAG,UAA+C;AAAA,MAA9C;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,OAAZ;AAAqBC,IAAAA;AAArB,GAA8C;AAAA,MAAXC,IAAW;;AACxE,QAAMC,QAAQ,GAAG,4BAAcT,sBAAd,EAAsCM,OAAtC,EAA+CC,SAA/C,CAAjB;AACA,QAAMG,eAAe,GAAG,gCAAkBJ,OAAlB,EAA2B;AAAEK,IAAAA,GAAG,EAAEF;AAAP,GAA3B,CAAxB;AACA,yCACKD,IADL;AAEEH,IAAAA,QAAQ,EAAE,mBAAOI,QAAP,EAAiBJ,QAAjB,CAFZ;AAGEC,IAAAA,OAHF;AAIEG,IAAAA,QAJF;AAKEF,IAAAA,SAAS,EAAE,kBAAMG,eAAe,CAACE,IAAtB,EAA4BL,SAAS,CAACK,IAAtC,EAA4CL,SAA5C;AALb;AAOD,CAVD;;eAYeH,kB","sourcesContent":["import { append, slice } from 'ramda'\n\nimport generateTokenList from '../../generator/generateTokenList'\nimport LogicalNotOperator from '../nodes/LogicalNotOperator'\nimport UnaryMinusOperator from '../nodes/UnaryMinusOperator'\nimport UnaryPlusOperator from '../nodes/UnaryPlusOperator'\nimport parseNextNode from '../util/parseNextNode'\n\nconst UNARY_OPERATOR_PARSERS = [LogicalNotOperator, UnaryMinusOperator, UnaryPlusOperator]\n\nconst parseUnaryOperator = ({ children, context, tokenList, ...rest }) => {\n  const operator = parseNextNode(UNARY_OPERATOR_PARSERS, context, tokenList)\n  const parsedTokenList = generateTokenList(context, { ast: operator })\n  return {\n    ...rest,\n    children: append(operator, children),\n    context,\n    operator,\n    tokenList: slice(parsedTokenList.size, tokenList.size, tokenList)\n  }\n}\n\nexport default parseUnaryOperator\n"],"file":"parseUnaryOperator.js"}