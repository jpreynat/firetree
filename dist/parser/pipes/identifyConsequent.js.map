{"version":3,"sources":["../../../src/parser/pipes/identifyConsequent.js"],"names":["identifyConsequent","identifyExpression","expression","rest","consequent"],"mappings":";;;;;;;AAAA;;AAEA;;;;;;;;;;;;;;AAEA,MAAMA,kBAAkB,GAAG,iBAAKC,2BAAL,EAAyB;AAAA,MAAC;AAAEC,IAAAA;AAAF,GAAD;AAAA,MAAkBC,IAAlB;;AAAA,yCAC/CA,IAD+C;AAElDC,IAAAA,UAAU,EAAEF;AAFsC;AAAA,CAAzB,CAA3B;eAKeF,kB","sourcesContent":["import { pipe } from 'ramda'\n\nimport identifyExpression from './identifyExpression'\n\nconst identifyConsequent = pipe(identifyExpression, ({ expression, ...rest }) => ({\n  ...rest,\n  consequent: expression\n}))\n\nexport default identifyConsequent\n"],"file":"identifyConsequent.js"}