{"version":3,"sources":["../../../src/parser/pipes/expectDivideOperator.js"],"names":["expectDivideOperator","children","rest","nextChild","DivideOperator","is","Error","Operators","DIVIDE"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;;;;;;;;;;;;;AAEA,MAAMA,oBAAoB,GAAG,UAA2B;AAAA,MAA1B;AAAEC,IAAAA;AAAF,GAA0B;AAAA,MAAXC,IAAW;;AACtD,QAAMC,SAAS,GAAG,iBAAKF,QAAL,CAAlB;;AACA,MAAI,CAACG,wBAAeC,EAAf,CAAkBF,SAAlB,CAAL,EAAmC;AACjC,UAAM,IAAIG,KAAJ,CAAW,sBAAqBC,qBAAUC,MAAO,oBAAmBL,SAAU,EAA9E,CAAN;AACD;;AACD,yCACKD,IADL;AAEED,IAAAA,QAAQ,EAAE,iBAAKA,QAAL;AAFZ;AAID,CATD;;eAWeD,oB","sourcesContent":["import { head, tail } from 'ramda'\n\nimport { Operators } from '../../constants'\nimport DivideOperator from '../nodes/DivideOperator'\n\nconst expectDivideOperator = ({ children, ...rest }) => {\n  const nextChild = head(children)\n  if (!DivideOperator.is(nextChild)) {\n    throw new Error(`Expected operator '${Operators.DIVIDE}'. Instead found ${nextChild}`)\n  }\n  return {\n    ...rest,\n    children: tail(children)\n  }\n}\n\nexport default expectDivideOperator\n"],"file":"expectDivideOperator.js"}