{"version":3,"sources":["../../../src/parser/pipes/parseBinaryOperator.js"],"names":["BINARY_OPERATOR_PARSERS","DivideOperator","EqualityOperator","GreaterThanEqualOperator","GreaterThanOperator","InequalityOperator","InOperator","IsOperator","LessThanEqualOperator","LessThanOperator","LogicalAndOperator","LogicalOrOperator","ModulusOperator","MultiplyOperator","UnaryMinusOperator","UnaryPlusOperator","parseBinaryOperator","children","context","tokenList","rest","operator","parsedTokenList","ast","size"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;AAEA,MAAMA,uBAAuB,GAAG,CAC9BC,uBAD8B,EAE9BC,yBAF8B,EAG9BC,iCAH8B,EAI9BC,4BAJ8B,EAK9BC,2BAL8B,EAM9BC,mBAN8B,EAO9BC,mBAP8B,EAQ9BC,8BAR8B,EAS9BC,yBAT8B,EAU9BC,2BAV8B,EAW9BC,0BAX8B,EAY9BC,wBAZ8B,EAa9BC,yBAb8B,EAc9BC,2BAd8B,EAe9BC,0BAf8B,CAAhC;;AAkBA,MAAMC,mBAAmB,GAAG,UAA+C;AAAA,MAA9C;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,OAAZ;AAAqBC,IAAAA;AAArB,GAA8C;AAAA,MAAXC,IAAW;;AACzE,QAAMC,QAAQ,GAAG,yBAAcrB,uBAAd,EAAuCkB,OAAvC,EAAgDC,SAAhD,CAAjB;AACA,QAAMG,eAAe,GAAG,gCAAkBJ,OAAlB,EAA2B;AAAEK,IAAAA,GAAG,EAAEF;AAAP,GAA3B,CAAxB;AACA,yCACKD,IADL;AAEEH,IAAAA,QAAQ,EAAE,mBAAOI,QAAP,EAAiBJ,QAAjB,CAFZ;AAGEC,IAAAA,OAHF;AAIEG,IAAAA,QAJF;AAKEF,IAAAA,SAAS,EAAE,kBAAMG,eAAe,CAACE,IAAtB,EAA4BL,SAAS,CAACK,IAAtC,EAA4CL,SAA5C;AALb;AAOD,CAVD;;eAYeH,mB","sourcesContent":["import { append, slice } from 'ramda'\n\nimport generateTokenList from '../../generator/generateTokenList'\nimport DivideOperator from '../nodes/DivideOperator'\nimport EqualityOperator from '../nodes/EqualityOperator'\nimport GreaterThanEqualOperator from '../nodes/GreaterThanEqualOperator'\nimport GreaterThanOperator from '../nodes/GreaterThanOperator'\nimport InOperator from '../nodes/InOperator'\nimport InequalityOperator from '../nodes/InequalityOperator'\nimport IsOperator from '../nodes/IsOperator'\nimport LessThanEqualOperator from '../nodes/LessThanEqualOperator'\nimport LessThanOperator from '../nodes/LessThanOperator'\nimport LogicalAndOperator from '../nodes/LogicalAndOperator'\nimport LogicalOrOperator from '../nodes/LogicalOrOperator'\nimport ModulusOperator from '../nodes/ModulusOperator'\nimport MultiplyOperator from '../nodes/MultiplyOperator'\nimport UnaryMinusOperator from '../nodes/UnaryMinusOperator'\nimport UnaryPlusOperator from '../nodes/UnaryPlusOperator'\nimport { parseNextNode } from '../util'\n\nconst BINARY_OPERATOR_PARSERS = [\n  DivideOperator,\n  EqualityOperator,\n  GreaterThanEqualOperator,\n  GreaterThanOperator,\n  InequalityOperator,\n  InOperator,\n  IsOperator,\n  LessThanEqualOperator,\n  LessThanOperator,\n  LogicalAndOperator,\n  LogicalOrOperator,\n  ModulusOperator,\n  MultiplyOperator,\n  UnaryMinusOperator,\n  UnaryPlusOperator\n]\n\nconst parseBinaryOperator = ({ children, context, tokenList, ...rest }) => {\n  const operator = parseNextNode(BINARY_OPERATOR_PARSERS, context, tokenList)\n  const parsedTokenList = generateTokenList(context, { ast: operator })\n  return {\n    ...rest,\n    children: append(operator, children),\n    context,\n    operator,\n    tokenList: slice(parsedTokenList.size, tokenList.size, tokenList)\n  }\n}\n\nexport default parseBinaryOperator\n"],"file":"parseBinaryOperator.js"}