{"version":3,"sources":["../../../src/parser/pipes/expectCloseParenthesisOperator.js"],"names":["expectCloseParenthesisOperator","children","rest","nextChild","CloseParenthesisOperator","is","Error","Operators","CLOSE_PARENTHESIS"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;;;;;;;;;;;;;AAEA,MAAMA,8BAA8B,GAAG,UAA2B;AAAA,MAA1B;AAAEC,IAAAA;AAAF,GAA0B;AAAA,MAAXC,IAAW;;AAChE,QAAMC,SAAS,GAAG,iBAAKF,QAAL,CAAlB;;AACA,MAAI,CAACG,kCAAyBC,EAAzB,CAA4BF,SAA5B,CAAL,EAA6C;AAC3C,UAAM,IAAIG,KAAJ,CACH,sBAAqBC,qBAAUC,iBAAkB,oBAAmBL,SAAU,EAD3E,CAAN;AAGD;;AACD,yCACKD,IADL;AAEED,IAAAA,QAAQ,EAAE,iBAAKA,QAAL;AAFZ;AAID,CAXD;;eAaeD,8B","sourcesContent":["import { head, tail } from 'ramda'\n\nimport { Operators } from '../../constants'\nimport CloseParenthesisOperator from '../nodes/CloseParenthesisOperator'\n\nconst expectCloseParenthesisOperator = ({ children, ...rest }) => {\n  const nextChild = head(children)\n  if (!CloseParenthesisOperator.is(nextChild)) {\n    throw new Error(\n      `Expected operator '${Operators.CLOSE_PARENTHESIS}'. Instead found ${nextChild}`\n    )\n  }\n  return {\n    ...rest,\n    children: tail(children)\n  }\n}\n\nexport default expectCloseParenthesisOperator\n"],"file":"expectCloseParenthesisOperator.js"}