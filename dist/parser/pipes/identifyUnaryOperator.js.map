{"version":3,"sources":["../../../src/parser/pipes/identifyUnaryOperator.js"],"names":["UNARY_OPERATOR_IDENTIFIERS","LogicalNotOperator","UnaryMinusOperator","UnaryPlusOperator","identifyUnaryOperatorNode","identifyUnaryOperator","children","context","rest","nextChild","operator"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;AAEA,MAAMA,0BAA0B,GAAG,CAACC,2BAAD,EAAqBC,2BAArB,EAAyCC,0BAAzC,CAAnC;AACA,MAAMC,yBAAyB,GAAG,4BAAiBJ,0BAAjB,CAAlC;;AAEA,MAAMK,qBAAqB,GAAG,UAAoC;AAAA,MAAnC;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAmC;AAAA,MAAXC,IAAW;;AAChE,QAAMC,SAAS,GAAG,iBAAKH,QAAL,CAAlB;AACA,QAAMI,QAAQ,GAAGN,yBAAyB,CAACG,OAAD,EAAUE,SAAV,CAA1C;AACAH,EAAAA,QAAQ,GAAG,iBAAKA,QAAL,CAAX;AACA,yCAAYE,IAAZ;AAAkBF,IAAAA,QAAlB;AAA4BC,IAAAA,OAA5B;AAAqCG,IAAAA;AAArC;AACD,CALD;;eAOeL,qB","sourcesContent":["import { head, tail } from 'ramda'\n\nimport LogicalNotOperator from '../nodes/LogicalNotOperator'\nimport UnaryMinusOperator from '../nodes/UnaryMinusOperator'\nimport UnaryPlusOperator from '../nodes/UnaryPlusOperator'\nimport { identifyNextNode } from '../util'\n\nconst UNARY_OPERATOR_IDENTIFIERS = [LogicalNotOperator, UnaryMinusOperator, UnaryPlusOperator]\nconst identifyUnaryOperatorNode = identifyNextNode(UNARY_OPERATOR_IDENTIFIERS)\n\nconst identifyUnaryOperator = ({ children, context, ...rest }) => {\n  const nextChild = head(children)\n  const operator = identifyUnaryOperatorNode(context, nextChild)\n  children = tail(children)\n  return { ...rest, children, context, operator }\n}\n\nexport default identifyUnaryOperator\n"],"file":"identifyUnaryOperator.js"}