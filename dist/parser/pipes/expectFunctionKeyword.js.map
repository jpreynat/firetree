{"version":3,"sources":["../../../src/parser/pipes/expectFunctionKeyword.js"],"names":["expectFunctionKeyword","children","rest","nextChild","FunctionKeyword","is","Error","Keywords","FUNCTION"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;;;;;;;;;;;;;AAEA,MAAMA,qBAAqB,GAAG,UAA2B;AAAA,MAA1B;AAAEC,IAAAA;AAAF,GAA0B;AAAA,MAAXC,IAAW;;AACvD,QAAMC,SAAS,GAAG,iBAAKF,QAAL,CAAlB;;AACA,MAAI,CAACG,yBAAgBC,EAAhB,CAAmBF,SAAnB,CAAL,EAAoC;AAClC,UAAM,IAAIG,KAAJ,CAAW,qBAAoBC,oBAASC,QAAS,oBAAmBL,SAAU,EAA9E,CAAN;AACD;;AACD,yCACKD,IADL;AAEED,IAAAA,QAAQ,EAAE,iBAAKA,QAAL;AAFZ;AAID,CATD;;eAWeD,qB","sourcesContent":["import { head, tail } from 'ramda'\n\nimport { Keywords } from '../../constants'\nimport FunctionKeyword from '../nodes/FunctionKeyword'\n\nconst expectFunctionKeyword = ({ children, ...rest }) => {\n  const nextChild = head(children)\n  if (!FunctionKeyword.is(nextChild)) {\n    throw new Error(`Expected keyword '${Keywords.FUNCTION}'. Instead found ${nextChild}`)\n  }\n  return {\n    ...rest,\n    children: tail(children)\n  }\n}\n\nexport default expectFunctionKeyword\n"],"file":"expectFunctionKeyword.js"}