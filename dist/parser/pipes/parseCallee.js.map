{"version":3,"sources":["../../../src/parser/pipes/parseCallee.js"],"names":["parseCalleeIdentifier","parseIdentifier","identifier","rest","callee","parseCallee","props","children","prevExpression"],"mappings":";;;;;;;AAAA;;AAEA;;;;;;;;;;;;;;AAEA,MAAMA,qBAAqB,GAAG,iBAAKC,wBAAL,EAAsB;AAAA,MAAC;AAAEC,IAAAA;AAAF,GAAD;AAAA,MAAkBC,IAAlB;;AAAA,yCAC/CA,IAD+C;AAElDC,IAAAA,MAAM,EAAEF;AAF0C;AAAA,CAAtB,CAA9B;;AAKA,MAAMG,WAAW,GAAIC,KAAD,IAAW;AAC7B,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAA+BF,KAArC;;AACA,MAAIE,cAAJ,EAAoB;AAClB,2CACKF,KADL;AAEEF,MAAAA,MAAM,EAAEI,cAFV;AAGED,MAAAA,QAAQ,EAAE,mBAAOC,cAAP,EAAuBD,QAAvB;AAHZ;AAKD;;AACD,SAAOP,qBAAqB,mBAAMM,KAAN,EAA5B;AACD,CAVD;;eAYeD,W","sourcesContent":["import { append, pipe } from 'ramda'\n\nimport parseIdentifier from './parseIdentifier'\n\nconst parseCalleeIdentifier = pipe(parseIdentifier, ({ identifier, ...rest }) => ({\n  ...rest,\n  callee: identifier\n}))\n\nconst parseCallee = (props) => {\n  const { children, prevExpression } = props\n  if (prevExpression) {\n    return {\n      ...props,\n      callee: prevExpression,\n      children: append(prevExpression, children)\n    }\n  }\n  return parseCalleeIdentifier({ ...props })\n}\n\nexport default parseCallee\n"],"file":"parseCallee.js"}