{"version":3,"sources":["../../../src/parser/pipes/expectSemicolonOperator.js"],"names":["expectSemicolonOperator","children","rest","nextChild","SemicolonOperator","is","Error","Operators","SEMICOLON"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;;;;;;;;;;;;;AAEA,MAAMA,uBAAuB,GAAG,UAA2B;AAAA,MAA1B;AAAEC,IAAAA;AAAF,GAA0B;AAAA,MAAXC,IAAW;;AACzD,QAAMC,SAAS,GAAG,iBAAKF,QAAL,CAAlB;;AACA,MAAI,CAACG,2BAAkBC,EAAlB,CAAqBF,SAArB,CAAL,EAAsC;AACpC,UAAM,IAAIG,KAAJ,CAAW,sBAAqBC,qBAAUC,SAAU,oBAAmBL,SAAU,EAAjF,CAAN;AACD;;AACD,yCACKD,IADL;AAEED,IAAAA,QAAQ,EAAE,iBAAKA,QAAL;AAFZ;AAID,CATD;;eAWeD,uB","sourcesContent":["import { head, tail } from 'ramda'\n\nimport { Operators } from '../../constants'\nimport SemicolonOperator from '../nodes/SemicolonOperator'\n\nconst expectSemicolonOperator = ({ children, ...rest }) => {\n  const nextChild = head(children)\n  if (!SemicolonOperator.is(nextChild)) {\n    throw new Error(`Expected operator '${Operators.SEMICOLON}'. Instead found ${nextChild}`)\n  }\n  return {\n    ...rest,\n    children: tail(children)\n  }\n}\n\nexport default expectSemicolonOperator\n"],"file":"expectSemicolonOperator.js"}