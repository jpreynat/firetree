{"version":3,"sources":["../../../src/parser/pipes/expectCloseCurlyBraceOperator.js"],"names":["expectCloseCurlyBraceOperator","children","rest","nextChild","CloseCurlyBraceOperator","is","Error","Operators","CLOSE_CURLY_BRACE","JSON","stringify"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;;;;;;;;;;;;;AAEA,MAAMA,6BAA6B,GAAG,UAA2B;AAAA,MAA1B;AAAEC,IAAAA;AAAF,GAA0B;AAAA,MAAXC,IAAW;;AAC/D,QAAMC,SAAS,GAAG,iBAAKF,QAAL,CAAlB;;AACA,MAAI,CAACG,iCAAwBC,EAAxB,CAA2BF,SAA3B,CAAL,EAA4C;AAC1C,UAAM,IAAIG,KAAJ,CACH,sBAAqBC,qBAAUC,iBAAkB,oBAAmBC,IAAI,CAACC,SAAL,CACnEP,SADmE,EAEnE,IAFmE,EAGnE,CAHmE,CAInE,EALE,CAAN;AAOD;;AACD,yCACKD,IADL;AAEED,IAAAA,QAAQ,EAAE,iBAAKA,QAAL;AAFZ;AAID,CAfD;;eAiBeD,6B","sourcesContent":["import { head, tail } from 'ramda'\n\nimport { Operators } from '../../constants'\nimport CloseCurlyBraceOperator from '../nodes/CloseCurlyBraceOperator'\n\nconst expectCloseCurlyBraceOperator = ({ children, ...rest }) => {\n  const nextChild = head(children)\n  if (!CloseCurlyBraceOperator.is(nextChild)) {\n    throw new Error(\n      `Expected operator '${Operators.CLOSE_CURLY_BRACE}'. Instead found ${JSON.stringify(\n        nextChild,\n        null,\n        2\n      )}`\n    )\n  }\n  return {\n    ...rest,\n    children: tail(children)\n  }\n}\n\nexport default expectCloseCurlyBraceOperator\n"],"file":"expectCloseCurlyBraceOperator.js"}