{"version":3,"sources":["../../../src/parser/pipes/identifyElements.js"],"names":["identifyElementAndWhitespace","skipWhitespaceAndComments","identifyElement","identifyCommaElementAndWhitespace","expectCommaOperator","identifyElements","props","children","context","elements","first","nextChild","CloseBracketOperator","is","element"],"mappings":";;;;;;;AAAA;;AAEA;;AAEA;;AACA;;AACA;;;;;;;;;;AAEA,MAAMA,4BAA4B,GAAG,iBACnCC,kCADmC,EAEnCC,wBAFmC,EAGnCD,kCAHmC,CAArC;AAMA,MAAME,iCAAiC,GAAG,iBAAKC,4BAAL,EAA0BJ,4BAA1B,CAA1C;;AAEA,MAAMK,gBAAgB,GAAIC,KAAD,IAAW;AAClC,MAAI;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAwBF,KAA5B;AACA,MAAIG,QAAQ,GAAG,EAAf;AACA,MAAIC,KAAK,GAAG,IAAZ;AACA,MAAIC,SAAS,GAAG,iBAAKJ,QAAL,CAAhB;;AACA,SAAO,mBAAOA,QAAP,IAAmB,CAAnB,IAAwB,CAACK,8BAAqBC,EAArB,CAAwBF,SAAxB,CAAhC,EAAoE;AAClE,QAAIG,OAAJ;;AACA,QAAIJ,KAAJ,EAAW;AACTA,MAAAA,KAAK,GAAG,KAAR;AACC,OAAC;AAAEH,QAAAA,QAAF;AAAYC,QAAAA,OAAZ;AAAqBM,QAAAA;AAArB,UAAiCd,4BAA4B,CAAC;AAC9DO,QAAAA,QAD8D;AAE9DC,QAAAA;AAF8D,OAAD,CAA9D;AAIF,KAND,MAMO;AACL;AAAC,OAAC;AAAED,QAAAA,QAAF;AAAYC,QAAAA,OAAZ;AAAqBM,QAAAA;AAArB,UAAiCX,iCAAiC,CAAC;AACnEI,QAAAA,QADmE;AAEnEC,QAAAA;AAFmE,OAAD,CAAnE;AAIF;;AACDC,IAAAA,QAAQ,GAAG,mBAAOK,OAAP,EAAgBL,QAAhB,CAAX;AACAE,IAAAA,SAAS,GAAG,iBAAKJ,QAAL,CAAZ;AACD;;AACD,yCAAYD,KAAZ;AAAmBC,IAAAA,QAAnB;AAA6BC,IAAAA,OAA7B;AAAsCC,IAAAA;AAAtC;AACD,CAvBD;;eAyBeJ,gB","sourcesContent":["import { append, head, length, pipe } from 'ramda'\n\nimport CloseBracketOperator from '../nodes/CloseBracketOperator'\n\nimport expectCommaOperator from './expectCommaOperator'\nimport identifyElement from './identifyElement'\nimport skipWhitespaceAndComments from './skipWhitespaceAndComments'\n\nconst identifyElementAndWhitespace = pipe(\n  skipWhitespaceAndComments,\n  identifyElement,\n  skipWhitespaceAndComments\n)\n\nconst identifyCommaElementAndWhitespace = pipe(expectCommaOperator, identifyElementAndWhitespace)\n\nconst identifyElements = (props) => {\n  let { children, context } = props\n  let elements = []\n  let first = true\n  let nextChild = head(children)\n  while (length(children) > 0 && !CloseBracketOperator.is(nextChild)) {\n    let element\n    if (first) {\n      first = false\n      ;({ children, context, element } = identifyElementAndWhitespace({\n        children,\n        context\n      }))\n    } else {\n      ;({ children, context, element } = identifyCommaElementAndWhitespace({\n        children,\n        context\n      }))\n    }\n    elements = append(element, elements)\n    nextChild = head(children)\n  }\n  return { ...props, children, context, elements }\n}\n\nexport default identifyElements\n"],"file":"identifyElements.js"}