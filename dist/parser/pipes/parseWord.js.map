{"version":3,"sources":["../../../src/parser/pipes/parseWord.js"],"names":["parseWord","props","children","context","tokenList","word","Word","parse","parsedTokenList","ast","size"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;;;;;;;;;AAEA,MAAMA,SAAS,GAAIC,KAAD,IAAW;AAC3B,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,OAAZ;AAAqBC,IAAAA;AAArB,MAAmCH,KAAzC;;AACA,QAAMI,IAAI,GAAGC,cAAKC,KAAL,CAAWJ,OAAX,EAAoBC,SAApB,CAAb;;AACA,QAAMI,eAAe,GAAG,gCAAkBL,OAAlB,EAA2B;AAAEM,IAAAA,GAAG,EAAEJ;AAAP,GAA3B,CAAxB;AACA,yCACKJ,KADL;AAEEC,IAAAA,QAAQ,EAAE,mBAAOG,IAAP,EAAaH,QAAb,CAFZ;AAGEE,IAAAA,SAAS,EAAE,kBAAMI,eAAe,CAACE,IAAtB,EAA4BN,SAAS,CAACM,IAAtC,EAA4CN,SAA5C,CAHb;AAIEC,IAAAA;AAJF;AAMD,CAVD;;eAYeL,S","sourcesContent":["import { append, slice } from 'ramda'\n\nimport generateTokenList from '../../generator/generateTokenList'\nimport Word from '../nodes/Word'\n\nconst parseWord = (props) => {\n  const { children, context, tokenList } = props\n  const word = Word.parse(context, tokenList)\n  const parsedTokenList = generateTokenList(context, { ast: word })\n  return {\n    ...props,\n    children: append(word, children),\n    tokenList: slice(parsedTokenList.size, tokenList.size, tokenList),\n    word\n  }\n}\n\nexport default parseWord\n"],"file":"parseWord.js"}