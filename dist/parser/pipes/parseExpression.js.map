{"version":3,"sources":["../../../src/parser/pipes/parseExpression.js"],"names":["EXPRESSION_STATEMENT_PARSERS","Expression","Identifier","Literal","parseExpression","children","context","tokenList","rest","expression","parsedTokenList","ast","size"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;AAEA,MAAMA,4BAA4B,GAAG,CAACC,mBAAD,EAAaC,mBAAb,EAAyBC,gBAAzB,CAArC;;AAEA,MAAMC,eAAe,GAAG,UAA+C;AAAA,MAA9C;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,OAAZ;AAAqBC,IAAAA;AAArB,GAA8C;AAAA,MAAXC,IAAW;;AACrE,QAAMC,UAAU,GAAG,4BAAcT,4BAAd,EAA4CM,OAA5C,EAAqDC,SAArD,CAAnB;AACA,QAAMG,eAAe,GAAG,gCAAkBJ,OAAlB,EAA2B;AAAEK,IAAAA,GAAG,EAAEF;AAAP,GAA3B,CAAxB;AACA,yCACKD,IADL;AAEEH,IAAAA,QAAQ,EAAE,mBAAOI,UAAP,EAAmBJ,QAAnB,CAFZ;AAGEC,IAAAA,OAHF;AAIEG,IAAAA,UAJF;AAKEF,IAAAA,SAAS,EAAE,kBAAMG,eAAe,CAACE,IAAtB,EAA4BL,SAAS,CAACK,IAAtC,EAA4CL,SAA5C;AALb;AAOD,CAVD;;eAYeH,e","sourcesContent":["import { append, slice } from 'ramda'\n\nimport generateTokenList from '../../generator/generateTokenList'\nimport Expression from '../nodes/Expression'\nimport Identifier from '../nodes/Identifier'\nimport Literal from '../nodes/Literal'\nimport parseNextNode from '../util/parseNextNode'\n\nconst EXPRESSION_STATEMENT_PARSERS = [Expression, Identifier, Literal]\n\nconst parseExpression = ({ children, context, tokenList, ...rest }) => {\n  const expression = parseNextNode(EXPRESSION_STATEMENT_PARSERS, context, tokenList)\n  const parsedTokenList = generateTokenList(context, { ast: expression })\n  return {\n    ...rest,\n    children: append(expression, children),\n    context,\n    expression,\n    tokenList: slice(parsedTokenList.size, tokenList.size, tokenList)\n  }\n}\n\nexport default parseExpression\n"],"file":"parseExpression.js"}