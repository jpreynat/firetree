{"version":3,"sources":["../../../src/parser/pipes/identifyArgs.js"],"names":["identifyArgumentAndWhitespace","skipWhitespaceAndComments","identifyArgument","identifyCommaArgumentAndWhitespace","expectCommaOperator","identifyCommaSeparatedArgs","props","children","context","args","first","nextChild","CloseParenthesisOperator","is","argument","identifyArgs","expectOpenParenthesisOperator","expectCloseParenthesisOperator"],"mappings":";;;;;;;AAAA;;AAEA;;AAEA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;AAEA,MAAMA,6BAA6B,GAAG,iBACpCC,kCADoC,EAEpCC,yBAFoC,EAGpCD,kCAHoC,CAAtC;AAMA,MAAME,kCAAkC,GAAG,iBAAKC,4BAAL,EAA0BJ,6BAA1B,CAA3C;;AAEA,MAAMK,0BAA0B,GAAIC,KAAD,IAAW;AAC5C,MAAI;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAwBF,KAA5B;AACA,MAAIG,IAAI,GAAG,EAAX;AACA,MAAIC,KAAK,GAAG,IAAZ;AACA,MAAIC,SAAS,GAAG,iBAAKJ,QAAL,CAAhB;;AACA,SAAO,mBAAOA,QAAP,IAAmB,CAAnB,IAAwB,CAACK,kCAAyBC,EAAzB,CAA4BF,SAA5B,CAAhC,EAAwE;AACtE,QAAIG,QAAJ;;AACA,QAAIJ,KAAJ,EAAW;AACTA,MAAAA,KAAK,GAAG,KAAR;AACC,OAAC;AAAEI,QAAAA,QAAF;AAAYP,QAAAA,QAAZ;AAAsBC,QAAAA;AAAtB,UAAkCR,6BAA6B,CAAC;AAChEO,QAAAA,QADgE;AAEhEC,QAAAA;AAFgE,OAAD,CAAhE;AAIF,KAND,MAMO;AACL;AAAC,OAAC;AAAEM,QAAAA,QAAF;AAAYP,QAAAA,QAAZ;AAAsBC,QAAAA;AAAtB,UAAkCL,kCAAkC,CAAC;AACrEI,QAAAA,QADqE;AAErEC,QAAAA;AAFqE,OAAD,CAArE;AAIF;;AACDC,IAAAA,IAAI,GAAG,mBAAOK,QAAP,EAAiBL,IAAjB,CAAP;AACAE,IAAAA,SAAS,GAAG,iBAAKJ,QAAL,CAAZ;AACD;;AACD,yCAAYD,KAAZ;AAAmBG,IAAAA,IAAnB;AAAyBF,IAAAA,QAAzB;AAAmCC,IAAAA;AAAnC;AACD,CAvBD;;AAyBA,MAAMO,YAAY,GAAG,iBACnBC,sCADmB,EAEnBX,0BAFmB,EAGnBY,uCAHmB,CAArB;eAMeF,Y","sourcesContent":["import { append, head, length, pipe } from 'ramda'\n\nimport CloseParenthesisOperator from '../nodes/CloseParenthesisOperator'\n\nimport expectCloseParenthesisOperator from './expectCloseParenthesisOperator'\nimport expectCommaOperator from './expectCommaOperator'\nimport expectOpenParenthesisOperator from './expectOpenParenthesisOperator'\nimport identifyArgument from './identifyArgument'\nimport skipWhitespaceAndComments from './skipWhitespaceAndComments'\n\nconst identifyArgumentAndWhitespace = pipe(\n  skipWhitespaceAndComments,\n  identifyArgument,\n  skipWhitespaceAndComments\n)\n\nconst identifyCommaArgumentAndWhitespace = pipe(expectCommaOperator, identifyArgumentAndWhitespace)\n\nconst identifyCommaSeparatedArgs = (props) => {\n  let { children, context } = props\n  let args = []\n  let first = true\n  let nextChild = head(children)\n  while (length(children) > 0 && !CloseParenthesisOperator.is(nextChild)) {\n    let argument\n    if (first) {\n      first = false\n      ;({ argument, children, context } = identifyArgumentAndWhitespace({\n        children,\n        context\n      }))\n    } else {\n      ;({ argument, children, context } = identifyCommaArgumentAndWhitespace({\n        children,\n        context\n      }))\n    }\n    args = append(argument, args)\n    nextChild = head(children)\n  }\n  return { ...props, args, children, context }\n}\n\nconst identifyArgs = pipe(\n  expectOpenParenthesisOperator,\n  identifyCommaSeparatedArgs,\n  expectCloseParenthesisOperator\n)\n\nexport default identifyArgs\n"],"file":"identifyArgs.js"}