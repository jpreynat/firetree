{"version":3,"sources":["../../../src/parser/pipes/identifyParams.js"],"names":["identifyParamAndWhitespace","skipWhitespaceAndComments","identifyParam","identifyCommaParamAndWhitespace","expectCommaOperator","identifyCommaSeparatedParams","props","children","context","params","first","nextChild","CloseParenthesisOperator","is","param","identifyParams","expectOpenParenthesisOperator","expectCloseParenthesisOperator"],"mappings":";;;;;;;AAAA;;AAEA;;AAEA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;AAEA,MAAMA,0BAA0B,GAAG,iBACjCC,kCADiC,EAEjCC,sBAFiC,EAGjCD,kCAHiC,CAAnC;AAMA,MAAME,+BAA+B,GAAG,iBAAKC,4BAAL,EAA0BJ,0BAA1B,CAAxC;;AAEA,MAAMK,4BAA4B,GAAIC,KAAD,IAAW;AAC9C,MAAI;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAwBF,KAA5B;AACA,MAAIG,MAAM,GAAG,EAAb;AACA,MAAIC,KAAK,GAAG,IAAZ;AACA,MAAIC,SAAS,GAAG,iBAAKJ,QAAL,CAAhB;;AACA,SAAO,mBAAOA,QAAP,IAAmB,CAAnB,IAAwB,CAACK,kCAAyBC,EAAzB,CAA4BF,SAA5B,CAAhC,EAAwE;AACtE,QAAIG,KAAJ;;AACA,QAAIJ,KAAJ,EAAW;AACTA,MAAAA,KAAK,GAAG,KAAR;AACC,OAAC;AAAEH,QAAAA,QAAF;AAAYC,QAAAA,OAAZ;AAAqBM,QAAAA;AAArB,UAA+Bd,0BAA0B,CAAC;AAC1DO,QAAAA,QAD0D;AAE1DC,QAAAA;AAF0D,OAAD,CAA1D;AAIF,KAND,MAMO;AACL;AAAC,OAAC;AAAED,QAAAA,QAAF;AAAYC,QAAAA,OAAZ;AAAqBM,QAAAA;AAArB,UAA+BX,+BAA+B,CAAC;AAC/DI,QAAAA,QAD+D;AAE/DC,QAAAA;AAF+D,OAAD,CAA/D;AAIF;;AACDC,IAAAA,MAAM,GAAG,mBAAOK,KAAP,EAAcL,MAAd,CAAT;AACAE,IAAAA,SAAS,GAAG,iBAAKJ,QAAL,CAAZ;AACD;;AACD,yCAAYD,KAAZ;AAAmBC,IAAAA,QAAnB;AAA6BC,IAAAA,OAA7B;AAAsCC,IAAAA;AAAtC;AACD,CAvBD;;AAyBA,MAAMM,cAAc,GAAG,iBACrBC,sCADqB,EAErBX,4BAFqB,EAGrBY,uCAHqB,CAAvB;eAMeF,c","sourcesContent":["import { append, head, length, pipe } from 'ramda'\n\nimport CloseParenthesisOperator from '../nodes/CloseParenthesisOperator'\n\nimport expectCloseParenthesisOperator from './expectCloseParenthesisOperator'\nimport expectCommaOperator from './expectCommaOperator'\nimport expectOpenParenthesisOperator from './expectOpenParenthesisOperator'\nimport identifyParam from './identifyParam'\nimport skipWhitespaceAndComments from './skipWhitespaceAndComments'\n\nconst identifyParamAndWhitespace = pipe(\n  skipWhitespaceAndComments,\n  identifyParam,\n  skipWhitespaceAndComments\n)\n\nconst identifyCommaParamAndWhitespace = pipe(expectCommaOperator, identifyParamAndWhitespace)\n\nconst identifyCommaSeparatedParams = (props) => {\n  let { children, context } = props\n  let params = []\n  let first = true\n  let nextChild = head(children)\n  while (length(children) > 0 && !CloseParenthesisOperator.is(nextChild)) {\n    let param\n    if (first) {\n      first = false\n      ;({ children, context, param } = identifyParamAndWhitespace({\n        children,\n        context\n      }))\n    } else {\n      ;({ children, context, param } = identifyCommaParamAndWhitespace({\n        children,\n        context\n      }))\n    }\n    params = append(param, params)\n    nextChild = head(children)\n  }\n  return { ...props, children, context, params }\n}\n\nconst identifyParams = pipe(\n  expectOpenParenthesisOperator,\n  identifyCommaSeparatedParams,\n  expectCloseParenthesisOperator\n)\n\nexport default identifyParams\n"],"file":"identifyParams.js"}