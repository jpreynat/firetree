{"version":3,"sources":["../../../src/parser/pipes/parseAllowKeyword.js"],"names":["parseAllowKeyword","props","children","context","tokenList","keyword","AllowKeyword","parse","parsedTokenList","ast","size"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;;;;;;;;;AAEA,MAAMA,iBAAiB,GAAIC,KAAD,IAAW;AACnC,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,OAAZ;AAAqBC,IAAAA;AAArB,MAAmCH,KAAzC;;AACA,QAAMI,OAAO,GAAGC,sBAAaC,KAAb,CAAmBJ,OAAnB,EAA4BC,SAA5B,CAAhB;;AACA,QAAMI,eAAe,GAAG,gCAAkBL,OAAlB,EAA2B;AAAEM,IAAAA,GAAG,EAAEJ;AAAP,GAA3B,CAAxB;AACA,yCACKJ,KADL;AAEEC,IAAAA,QAAQ,EAAE,mBAAOG,OAAP,EAAgBH,QAAhB,CAFZ;AAGEG,IAAAA,OAHF;AAIED,IAAAA,SAAS,EAAE,kBAAMI,eAAe,CAACE,IAAtB,EAA4BN,SAAS,CAACM,IAAtC,EAA4CN,SAA5C;AAJb;AAMD,CAVD;;eAYeJ,iB","sourcesContent":["import { append, slice } from 'ramda'\n\nimport generateTokenList from '../../generator/generateTokenList'\nimport AllowKeyword from '../nodes/AllowKeyword'\n\nconst parseAllowKeyword = (props) => {\n  const { children, context, tokenList } = props\n  const keyword = AllowKeyword.parse(context, tokenList)\n  const parsedTokenList = generateTokenList(context, { ast: keyword })\n  return {\n    ...props,\n    children: append(keyword, children),\n    keyword,\n    tokenList: slice(parsedTokenList.size, tokenList.size, tokenList)\n  }\n}\n\nexport default parseAllowKeyword\n"],"file":"parseAllowKeyword.js"}