{"version":3,"sources":["../../../src/parser/pipes/expectOpenBracketOperator.js"],"names":["expectOpenBracketOperator","children","rest","nextChild","OpenBracketOperator","is","Error","Operators","OPEN_BRACKET"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;;;;;;;;;;;;;AAEA,MAAMA,yBAAyB,GAAG,UAA2B;AAAA,MAA1B;AAAEC,IAAAA;AAAF,GAA0B;AAAA,MAAXC,IAAW;;AAC3D,QAAMC,SAAS,GAAG,iBAAKF,QAAL,CAAlB;;AACA,MAAI,CAACG,6BAAoBC,EAApB,CAAuBF,SAAvB,CAAL,EAAwC;AACtC,UAAM,IAAIG,KAAJ,CAAW,sBAAqBC,qBAAUC,YAAa,oBAAmBL,SAAU,EAApF,CAAN;AACD;;AACD,yCACKD,IADL;AAEED,IAAAA,QAAQ,EAAE,iBAAKA,QAAL;AAFZ;AAID,CATD;;eAWeD,yB","sourcesContent":["import { head, tail } from 'ramda'\n\nimport { Operators } from '../../constants'\nimport OpenBracketOperator from '../nodes/OpenBracketOperator'\n\nconst expectOpenBracketOperator = ({ children, ...rest }) => {\n  const nextChild = head(children)\n  if (!OpenBracketOperator.is(nextChild)) {\n    throw new Error(`Expected operator '${Operators.OPEN_BRACKET}'. Instead found ${nextChild}`)\n  }\n  return {\n    ...rest,\n    children: tail(children)\n  }\n}\n\nexport default expectOpenBracketOperator\n"],"file":"expectOpenBracketOperator.js"}