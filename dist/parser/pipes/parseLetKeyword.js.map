{"version":3,"sources":["../../../src/parser/pipes/parseLetKeyword.js"],"names":["parseLetKeyword","children","context","tokenList","rest","keyword","LetKeyword","parse","parsedTokenList","ast","size"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;;;;;;;;;;;;;AAEA,MAAMA,eAAe,GAAG,UAA+C;AAAA,MAA9C;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,OAAZ;AAAqBC,IAAAA;AAArB,GAA8C;AAAA,MAAXC,IAAW;;AACrE,QAAMC,OAAO,GAAGC,oBAAWC,KAAX,CAAiBL,OAAjB,EAA0BC,SAA1B,CAAhB;;AACA,QAAMK,eAAe,GAAG,gCAAkBN,OAAlB,EAA2B;AAAEO,IAAAA,GAAG,EAAEJ;AAAP,GAA3B,CAAxB;AACA,yCACKD,IADL;AAEEH,IAAAA,QAAQ,EAAE,mBAAOI,OAAP,EAAgBJ,QAAhB,CAFZ;AAGEC,IAAAA,OAHF;AAIEG,IAAAA,OAJF;AAKEF,IAAAA,SAAS,EAAE,kBAAMK,eAAe,CAACE,IAAtB,EAA4BP,SAAS,CAACO,IAAtC,EAA4CP,SAA5C;AALb;AAOD,CAVD;;eAYeH,e","sourcesContent":["import { append, slice } from 'ramda'\n\nimport generateTokenList from '../../generator/generateTokenList'\nimport LetKeyword from '../nodes/LetKeyword'\n\nconst parseLetKeyword = ({ children, context, tokenList, ...rest }) => {\n  const keyword = LetKeyword.parse(context, tokenList)\n  const parsedTokenList = generateTokenList(context, { ast: keyword })\n  return {\n    ...rest,\n    children: append(keyword, children),\n    context,\n    keyword,\n    tokenList: slice(parsedTokenList.size, tokenList.size, tokenList)\n  }\n}\n\nexport default parseLetKeyword\n"],"file":"parseLetKeyword.js"}