{"version":3,"sources":["../../../src/parser/pipes/parsePathExpression.js"],"names":["parsePathExpression","props","children","context","tokenList","expression","PathExpression","parse","parsedTokenList","ast","size"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;;;;;;;;;AAEA,MAAMA,mBAAmB,GAAIC,KAAD,IAAW;AACrC,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,OAAZ;AAAqBC,IAAAA;AAArB,MAAmCH,KAAzC;;AACA,QAAMI,UAAU,GAAGC,wBAAeC,KAAf,CAAqBJ,OAArB,EAA8BC,SAA9B,CAAnB;;AACA,QAAMI,eAAe,GAAG,gCAAkBL,OAAlB,EAA2B;AAAEM,IAAAA,GAAG,EAAEJ;AAAP,GAA3B,CAAxB;AACA,yCACKJ,KADL;AAEEC,IAAAA,QAAQ,EAAE,mBAAOG,UAAP,EAAmBH,QAAnB,CAFZ;AAGEG,IAAAA,UAHF;AAIED,IAAAA,SAAS,EAAE,kBAAMI,eAAe,CAACE,IAAtB,EAA4BN,SAAS,CAACM,IAAtC,EAA4CN,SAA5C;AAJb;AAMD,CAVD;;eAYeJ,mB","sourcesContent":["import { append, slice } from 'ramda'\n\nimport generateTokenList from '../../generator/generateTokenList'\nimport PathExpression from '../nodes/PathExpression'\n\nconst parsePathExpression = (props) => {\n  const { children, context, tokenList } = props\n  const expression = PathExpression.parse(context, tokenList)\n  const parsedTokenList = generateTokenList(context, { ast: expression })\n  return {\n    ...props,\n    children: append(expression, children),\n    expression,\n    tokenList: slice(parsedTokenList.size, tokenList.size, tokenList)\n  }\n}\n\nexport default parsePathExpression\n"],"file":"parsePathExpression.js"}