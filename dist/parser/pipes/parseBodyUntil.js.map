{"version":3,"sources":["../../../src/parser/pipes/parseBodyUntil.js"],"names":["BODY_PARSERS","Comment","Whitespace","Declaration","Statement","parseBodyNode","parseBodyUntil","predicate","children","context","tokenList","rest","body","size","node","type","NodeTypes","WHITESPACE","COMMENT","parsedTokenList","ast"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;AAEA;AACA;AACA,MAAMA,YAAY,GAAG,CAACC,gBAAD,EAAUC,mBAAV,EAAsBC,oBAAtB,EAAmCC,kBAAnC,CAArB;AACA,MAAMC,aAAa,GAAG,4BAAcL,YAAd,CAAtB;AAEA,MAAMM,cAAc,GAAG,kBAAM,CAACC,SAAD,WAA0D;AAAA,MAA9C;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,OAAZ;AAAqBC,IAAAA;AAArB,GAA8C;AAAA,MAAXC,IAAW;;AACrF,MAAIC,IAAI,GAAG,EAAX;;AAEA,SAAOF,SAAS,CAACG,IAAV,GAAiB,CAAjB,IAAsBN,SAAS,CAAC;AAAEE,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAAD,CAAtC,EAAgE;AAC9D,UAAMI,IAAI,GAAGT,aAAa,CAACI,OAAD,EAAUC,SAAV,CAA1B;AACAF,IAAAA,QAAQ,GAAG,mBAAOM,IAAP,EAAaN,QAAb,CAAX;;AACA,QAAIM,IAAI,CAACC,IAAL,KAAcC,qBAAUC,UAAxB,IAAsCH,IAAI,CAACC,IAAL,KAAcC,qBAAUE,OAAlE,EAA2E;AACzEN,MAAAA,IAAI,GAAG,mBAAOE,IAAP,EAAaF,IAAb,CAAP;AACD,KAL6D,CAO9D;;;AACA,UAAMO,eAAe,GAAG,gCAAkBV,OAAlB,EAA2B;AAAEW,MAAAA,GAAG,EAAEN;AAAP,KAA3B,CAAxB;AACAJ,IAAAA,SAAS,GAAG,kBAAMS,eAAe,CAACN,IAAtB,EAA4BH,SAAS,CAACG,IAAtC,EAA4CH,SAA5C,CAAZ;AACD;;AAED,yCAAYC,IAAZ;AAAkBC,IAAAA,IAAlB;AAAwBJ,IAAAA,QAAxB;AAAkCC,IAAAA,OAAlC;AAA2CC,IAAAA;AAA3C;AACD,CAhBsB,CAAvB;eAkBeJ,c","sourcesContent":["import { append, curry, slice } from 'ramda'\n\nimport { NodeTypes } from '../../constants'\nimport generateTokenList from '../../generator/generateTokenList'\nimport Comment from '../nodes/Comment'\nimport Declaration from '../nodes/Declaration'\nimport Statement from '../nodes/Statement'\nimport Whitespace from '../nodes/Whitespace'\nimport parseNextNode from '../util/parseNextNode'\n\n// NOTE BRN: This needs to be slightly different based on which type of block\n// this is (allow, function, etc...)\nconst BODY_PARSERS = [Comment, Whitespace, Declaration, Statement]\nconst parseBodyNode = parseNextNode(BODY_PARSERS)\n\nconst parseBodyUntil = curry((predicate, { children, context, tokenList, ...rest }) => {\n  let body = []\n\n  while (tokenList.size > 0 && predicate({ context, tokenList })) {\n    const node = parseBodyNode(context, tokenList)\n    children = append(node, children)\n    if (node.type !== NodeTypes.WHITESPACE && node.type !== NodeTypes.COMMENT) {\n      body = append(node, body)\n    }\n\n    // NOTE BRN: Remove the parsed tokens from tokenList\n    const parsedTokenList = generateTokenList(context, { ast: node })\n    tokenList = slice(parsedTokenList.size, tokenList.size, tokenList)\n  }\n\n  return { ...rest, body, children, context, tokenList }\n})\n\nexport default parseBodyUntil\n"],"file":"parseBodyUntil.js"}