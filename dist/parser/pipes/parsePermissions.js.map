{"version":3,"sources":["../../../src/parser/pipes/parsePermissions.js"],"names":["parsePermissionAndWhitespace","parseWhitespaceAndComments","parsePermission","parseCommaPermissionAndWhitespace","parseCommaOperator","parsePermissions","props","children","context","tokenList","permissions","first","nextToken","get","size","type","TokenTypes","IDENTIFIER","OPERATOR_COMMA","permission"],"mappings":";;;;;;;AAAA;;AAEA;;AAEA;;AACA;;AACA;;;;;;;;;;AAEA,MAAMA,4BAA4B,GAAG,iBACnCC,mCADmC,EAEnCC,wBAFmC,EAGnCD,mCAHmC,CAArC;AAMA,MAAME,iCAAiC,GAAG,iBAAKC,2BAAL,EAAyBJ,4BAAzB,CAA1C;;AAEA,MAAMK,gBAAgB,GAAIC,KAAD,IAAW;AAClC,MAAI;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,OAAZ;AAAqBC,IAAAA;AAArB,MAAmCH,KAAvC;AACA,MAAII,WAAW,GAAG,EAAlB;AACA,MAAIC,KAAK,GAAG,IAAZ;AACA,MAAIC,SAAS,GAAGH,SAAS,CAACI,GAAV,CAAc,CAAd,CAAhB;;AACA,SACEJ,SAAS,CAACK,IAAV,GAAiB,CAAjB,KACEH,KAAK,IAAIC,SAAS,CAACG,IAAV,KAAmBC,sBAAWC,UAAxC,IACE,CAACN,KAAD,IAAUC,SAAS,CAACG,IAAV,KAAmBC,sBAAWE,cAF3C,CADF,EAIE;AACA,QAAIC,UAAJ;;AACA,QAAIR,KAAJ,EAAW;AACTA,MAAAA,KAAK,GAAG,KAAR;AACC,OAAC;AAAEJ,QAAAA,QAAF;AAAYC,QAAAA,OAAZ;AAAqBW,QAAAA,UAArB;AAAiCV,QAAAA;AAAjC,UAA+CT,4BAA4B,CAAC;AAC5EO,QAAAA,QAD4E;AAE5EC,QAAAA,OAF4E;AAG5EC,QAAAA;AAH4E,OAAD,CAA5E;AAKF,KAPD,MAOO;AACL;AAAC,OAAC;AAAEF,QAAAA,QAAF;AAAYC,QAAAA,OAAZ;AAAqBW,QAAAA,UAArB;AAAiCV,QAAAA;AAAjC,UAA+CN,iCAAiC,CAAC;AACjFI,QAAAA,QADiF;AAEjFC,QAAAA,OAFiF;AAGjFC,QAAAA;AAHiF,OAAD,CAAjF;AAKF;;AACDC,IAAAA,WAAW,GAAG,mBAAOS,UAAP,EAAmBT,WAAnB,CAAd;AACAE,IAAAA,SAAS,GAAGH,SAAS,CAACI,GAAV,CAAc,CAAd,CAAZ;AACD;;AACD,yCAAYP,KAAZ;AAAmBC,IAAAA,QAAnB;AAA6BC,IAAAA,OAA7B;AAAsCE,IAAAA,WAAtC;AAAmDD,IAAAA;AAAnD;AACD,CA7BD;;eA+BeJ,gB","sourcesContent":["import { append, pipe } from 'ramda'\n\nimport { TokenTypes } from '../../constants'\n\nimport parseCommaOperator from './parseCommaOperator'\nimport parsePermission from './parsePermission'\nimport parseWhitespaceAndComments from './parseWhitespaceAndComments'\n\nconst parsePermissionAndWhitespace = pipe(\n  parseWhitespaceAndComments,\n  parsePermission,\n  parseWhitespaceAndComments\n)\n\nconst parseCommaPermissionAndWhitespace = pipe(parseCommaOperator, parsePermissionAndWhitespace)\n\nconst parsePermissions = (props) => {\n  let { children, context, tokenList } = props\n  let permissions = []\n  let first = true\n  let nextToken = tokenList.get(0)\n  while (\n    tokenList.size > 0 &&\n    ((first && nextToken.type === TokenTypes.IDENTIFIER) ||\n      (!first && nextToken.type === TokenTypes.OPERATOR_COMMA))\n  ) {\n    let permission\n    if (first) {\n      first = false\n      ;({ children, context, permission, tokenList } = parsePermissionAndWhitespace({\n        children,\n        context,\n        tokenList\n      }))\n    } else {\n      ;({ children, context, permission, tokenList } = parseCommaPermissionAndWhitespace({\n        children,\n        context,\n        tokenList\n      }))\n    }\n    permissions = append(permission, permissions)\n    nextToken = tokenList.get(0)\n  }\n  return { ...props, children, context, permissions, tokenList }\n}\n\nexport default parsePermissions\n"],"file":"parsePermissions.js"}