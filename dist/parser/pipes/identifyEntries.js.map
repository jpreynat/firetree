{"version":3,"sources":["../../../src/parser/pipes/identifyEntries.js"],"names":["identifyEntryAndWhitespace","skipWhitespaceAndComments","identifyEntry","identifyCommaEntryAndWhitespace","expectCommaOperator","identifyEntries","props","children","context","entries","first","nextChild","CloseCurlyBraceOperator","is","entry"],"mappings":";;;;;;;AAAA;;AAEA;;AAEA;;AACA;;AACA;;;;;;;;;;AAEA,MAAMA,0BAA0B,GAAG,iBACjCC,kCADiC,EAEjCC,sBAFiC,EAGjCD,kCAHiC,CAAnC;AAMA,MAAME,+BAA+B,GAAG,iBAAKC,4BAAL,EAA0BJ,0BAA1B,CAAxC;;AAEA,MAAMK,eAAe,GAAIC,KAAD,IAAW;AACjC,MAAI;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAwBF,KAA5B;AACA,MAAIG,OAAO,GAAG,EAAd;AACA,MAAIC,KAAK,GAAG,IAAZ;AACA,MAAIC,SAAS,GAAG,iBAAKJ,QAAL,CAAhB;;AACA,SAAO,mBAAOA,QAAP,IAAmB,CAAnB,IAAwB,CAACK,iCAAwBC,EAAxB,CAA2BF,SAA3B,CAAhC,EAAuE;AACrE,QAAIG,KAAJ;;AACA,QAAIJ,KAAJ,EAAW;AACTA,MAAAA,KAAK,GAAG,KAAR;AACC,OAAC;AAAEH,QAAAA,QAAF;AAAYC,QAAAA,OAAZ;AAAqBM,QAAAA;AAArB,UAA+Bd,0BAA0B,CAAC;AAC1DO,QAAAA,QAD0D;AAE1DC,QAAAA;AAF0D,OAAD,CAA1D;AAIF,KAND,MAMO;AACL;AAAC,OAAC;AAAED,QAAAA,QAAF;AAAYC,QAAAA,OAAZ;AAAqBM,QAAAA;AAArB,UAA+BX,+BAA+B,CAAC;AAC/DI,QAAAA,QAD+D;AAE/DC,QAAAA;AAF+D,OAAD,CAA/D;AAIF;;AACDC,IAAAA,OAAO,GAAG,mBAAOK,KAAP,EAAcL,OAAd,CAAV;AACAE,IAAAA,SAAS,GAAG,iBAAKJ,QAAL,CAAZ;AACD;;AACD,yCAAYD,KAAZ;AAAmBC,IAAAA,QAAnB;AAA6BC,IAAAA,OAA7B;AAAsCC,IAAAA;AAAtC;AACD,CAvBD;;eAyBeJ,e","sourcesContent":["import { append, head, length, pipe } from 'ramda'\n\nimport CloseCurlyBraceOperator from '../nodes/CloseCurlyBraceOperator'\n\nimport expectCommaOperator from './expectCommaOperator'\nimport identifyEntry from './identifyEntry'\nimport skipWhitespaceAndComments from './skipWhitespaceAndComments'\n\nconst identifyEntryAndWhitespace = pipe(\n  skipWhitespaceAndComments,\n  identifyEntry,\n  skipWhitespaceAndComments\n)\n\nconst identifyCommaEntryAndWhitespace = pipe(expectCommaOperator, identifyEntryAndWhitespace)\n\nconst identifyEntries = (props) => {\n  let { children, context } = props\n  let entries = []\n  let first = true\n  let nextChild = head(children)\n  while (length(children) > 0 && !CloseCurlyBraceOperator.is(nextChild)) {\n    let entry\n    if (first) {\n      first = false\n      ;({ children, context, entry } = identifyEntryAndWhitespace({\n        children,\n        context\n      }))\n    } else {\n      ;({ children, context, entry } = identifyCommaEntryAndWhitespace({\n        children,\n        context\n      }))\n    }\n    entries = append(entry, entries)\n    nextChild = head(children)\n  }\n  return { ...props, children, context, entries }\n}\n\nexport default identifyEntries\n"],"file":"identifyEntries.js"}