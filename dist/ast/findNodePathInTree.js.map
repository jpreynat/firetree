{"version":3,"sources":["../../src/ast/findNodePathInTree.js"],"names":["findWalkee","node","path","predicate","recur","bool","Symbol","for","undefined","children","acc","childKdx","child","newPath","result","keys","findNodePathInTree","tree"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AAEA;;AAEA,MAAMA,UAAU,GAAG,CAACC,IAAD,EAAOC,IAAP,EAAaC,SAAb,EAAwBC,KAAxB,KAAkC;AACnD,QAAMC,IAAI,GAAGF,SAAS,CAACF,IAAD,EAAOC,IAAP,CAAtB;;AACA,MAAIG,IAAJ,EAAU;AACR;AACA;AACA,QAAIA,IAAI,KAAKC,MAAM,CAACC,GAAP,CAAW,OAAX,CAAb,EAAkC;AAChC,aAAOC,SAAP;AACD;;AACD,WAAON,IAAP;AACD;;AACD,QAAM;AAAEO,IAAAA;AAAF,MAAeR,IAArB;;AACA,MAAI,sBAASQ,QAAT,CAAJ,EAAwB;AACtB,WAAO,mBACL,CAACC,GAAD,EAAMC,QAAN,KAAmB;AACjB,YAAMC,KAAK,GAAGH,QAAQ,CAACE,QAAD,CAAtB;AACA,YAAME,OAAO,GAAG,mBAAOX,IAAP,EAAa,CAACS,QAAD,CAAb,CAAhB;AACA,YAAMG,MAAM,GAAGV,KAAK,CAACQ,KAAD,EAAQC,OAAR,EAAiBV,SAAjB,CAApB;;AACA,UAAIW,MAAJ,EAAY;AACV,eAAO,oBAAQA,MAAR,CAAP;AACD;AACF,KARI,EASLN,SATK,EAUL,qBAAQC,QAAR,IAAoBA,QAAQ,CAACM,IAAT,EAApB,GAAsC,iBAAKN,QAAL,CAVjC,CAAP;AAYD;AACF,CAzBD;;AA2BA,MAAMO,kBAAkB,GAAG,kBACzB,oBAAQ,oBAAR,EAA8B,CAACb,SAAD,EAAYc,IAAZ,KAAqB,iBAAKjB,UAAL,EAAiBiB,IAAjB,EAAuB,EAAvB,EAA2Bd,SAA3B,CAAnD,CADyB,CAA3B;eAIea,kB","sourcesContent":["import { isArray, isObject } from 'lodash'\nimport { concat, curry, keys, reduce, reduced } from 'ramda'\n\nimport { measure, walk } from '../utils'\n\nconst findWalkee = (node, path, predicate, recur) => {\n  const bool = predicate(node, path)\n  if (bool) {\n    // NOTE BRN: If we receive the break symbol, it means that the node's children\n    // should not be explored\n    if (bool === Symbol.for('break')) {\n      return undefined\n    }\n    return path\n  }\n  const { children } = node\n  if (isObject(children)) {\n    return reduce(\n      (acc, childKdx) => {\n        const child = children[childKdx]\n        const newPath = concat(path, [childKdx])\n        const result = recur(child, newPath, predicate)\n        if (result) {\n          return reduced(result)\n        }\n      },\n      undefined,\n      isArray(children) ? children.keys() : keys(children)\n    )\n  }\n}\n\nconst findNodePathInTree = curry(\n  measure('findNodePathInTree', (predicate, tree) => walk(findWalkee, tree, [], predicate))\n)\n\nexport default findNodePathInTree\n"],"file":"findNodePathInTree.js"}