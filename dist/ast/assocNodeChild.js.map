{"version":3,"sources":["../../src/ast/assocNodeChild.js"],"names":["assocNodeChild","context","index","child","node","propPath"],"mappings":";;;;;;;AAAA;;AAEA;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,cAAc,GAAG,CAACC,OAAD,EAAUC,KAAV,EAAiBC,KAAjB,EAAwBC,IAAxB,KAAiC;AACtD,QAAMC,QAAQ,GAAG,CAAC,UAAD,EAAaH,KAAb,CAAjB;AACA,SAAO,iBAAK,sBAAUG,QAAV,EAAoBF,KAApB,CAAL,EAAiC,2BAAaF,OAAb,CAAjC,EAAwDG,IAAxD,CAAP;AACD,CAHD;;eAKeJ,c","sourcesContent":["import { assocPath, pipe } from 'ramda'\n\nimport identifyNode from './identifyNode'\n\n/**\n * Assoc a node child within an AST. After the new `child` is inserted into the\n * children, all Nodes in `node` will be re-identified.\n *\n * @function\n * @category ast\n * @since v0.1.0\n * @param {Context} context The current parser Context\n * @param {Integer} index The child index to assoc\n * @param {Node} child The new child to place at the given `index`\n * @param {Node} node The target Node whose child is being assoc'd\n * @returns {Node} A new copy of the Node with the child assoc'd\n * @example\n *\n *\n */\nconst assocNodeChild = (context, index, child, node) => {\n  const propPath = ['children', index]\n  return pipe(assocPath(propPath, child), identifyNode(context))(node)\n}\n\nexport default assocNodeChild\n"],"file":"assocNodeChild.js"}