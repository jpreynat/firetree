{"version":3,"sources":["../../src/ast/filterNodesInTree.js"],"names":["filterWalkee","node","path","predicate","recur","matches","bool","Symbol","for","undefined","children","acc","childKdx","child","newPath","result","keys","filterNodesInTree","tree"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AAEA;;AAEA,MAAMA,YAAY,GAAG,CAACC,IAAD,EAAOC,IAAP,EAAaC,SAAb,EAAwBC,KAAxB,KAAkC;AACrD,MAAIC,OAAO,GAAG,EAAd;AACA,QAAMC,IAAI,GAAGH,SAAS,CAACF,IAAD,EAAOC,IAAP,CAAtB;;AACA,MAAII,IAAJ,EAAU;AACR;AACA;AACA,QAAIA,IAAI,KAAKC,MAAM,CAACC,GAAP,CAAW,OAAX,CAAb,EAAkC;AAChC,aAAOC,SAAP;AACD;;AACDJ,IAAAA,OAAO,GAAG,CAACJ,IAAD,CAAV;AACD;;AACD,QAAM;AAAES,IAAAA;AAAF,MAAeT,IAArB;;AACA,MAAI,CAAC,sBAASS,QAAT,CAAL,EAAyB;AACvB,WAAOL,OAAP;AACD;;AACD,SAAO,mBACL,CAACM,GAAD,EAAMC,QAAN,KAAmB;AACjB,UAAMC,KAAK,GAAGH,QAAQ,CAACE,QAAD,CAAtB;AACA,UAAME,OAAO,GAAG,mBAAOZ,IAAP,EAAa,CAACU,QAAD,CAAb,CAAhB;AACA,UAAMG,MAAM,GAAGX,KAAK,CAACS,KAAD,EAAQC,OAAR,EAAiBX,SAAjB,CAApB;;AACA,QAAIY,MAAJ,EAAY;AACV,aAAO,mBAAOJ,GAAP,EAAYI,MAAZ,CAAP;AACD;;AACD,WAAOJ,GAAP;AACD,GATI,EAULN,OAVK,EAWL,qBAAQK,QAAR,IAAoBA,QAAQ,CAACM,IAAT,EAApB,GAAsC,iBAAKN,QAAL,CAXjC,CAAP;AAaD,CA5BD;;AA8BA,MAAMO,iBAAiB,GAAG,kBACxB,oBAAQ,mBAAR,EAA6B,CAACd,SAAD,EAAYe,IAAZ,KAAqB,iBAAKlB,YAAL,EAAmBkB,IAAnB,EAAyB,EAAzB,EAA6Bf,SAA7B,CAAlD,CADwB,CAA1B;eAIec,iB","sourcesContent":["import { isArray, isObject } from 'lodash'\nimport { concat, curry, keys, reduce } from 'ramda'\n\nimport { measure, walk } from '../utils'\n\nconst filterWalkee = (node, path, predicate, recur) => {\n  let matches = []\n  const bool = predicate(node, path)\n  if (bool) {\n    // NOTE BRN: If we receive the break symbol, it means that the node's children\n    // should not be explored\n    if (bool === Symbol.for('break')) {\n      return undefined\n    }\n    matches = [node]\n  }\n  const { children } = node\n  if (!isObject(children)) {\n    return matches\n  }\n  return reduce(\n    (acc, childKdx) => {\n      const child = children[childKdx]\n      const newPath = concat(path, [childKdx])\n      const result = recur(child, newPath, predicate)\n      if (result) {\n        return concat(acc, result)\n      }\n      return acc\n    },\n    matches,\n    isArray(children) ? children.keys() : keys(children)\n  )\n}\n\nconst filterNodesInTree = curry(\n  measure('filterNodesInTree', (predicate, tree) => walk(filterWalkee, tree, [], predicate))\n)\n\nexport default filterNodesInTree\n"],"file":"filterNodesInTree.js"}