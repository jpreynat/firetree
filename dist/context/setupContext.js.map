{"version":3,"sources":["../../src/context/setupContext.js"],"names":["NamedNodes","name","Node","Nodes","Declarations","parser","type","ParserTypes","DECLARATION","Expressions","EXPRESSION","Keywords","KEYWORD","Operators","OPERATOR","Statements","STATEMENT","Identifiers","Program","Declaration","Expression","Statement","BlockStatement","Identifier","Keyword","Literal","Operator","Comment","Whitespace","Word","PathPartExpression","PathPartWord","PathPartVariable","Range","Entry","setupContext","logger","prettyPrint","colorize"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA;;AACA;;;;;;;;AAqBA,MAAMA,UAAU,GAAG,gBAAKC,IAAD,IAAU;AAC/B;AACA,QAAMC,IAAI,GAAGC,KAAK,CAACF,IAAD,CAAlB;AACAC,EAAAA,IAAI,CAACD,IAAL,GAAYA,IAAZ;AACA,SAAOC,IAAP;AACD,CALkB,EAKhB,iBAAKC,KAAL,CALgB,CAAnB;AAOA,MAAMC,YAAY,GAAG,mBAAQC,MAAD,IAAYA,MAAM,CAACC,IAAP,KAAgBC,uBAAYC,WAA/C,EAA4D,mBAAOR,UAAP,CAA5D,CAArB;AACA,MAAMS,WAAW,GAAG,mBAAQJ,MAAD,IAAYA,MAAM,CAACC,IAAP,KAAgBC,uBAAYG,UAA/C,EAA2D,mBAAOV,UAAP,CAA3D,CAApB;AACA,MAAMW,QAAQ,GAAG,mBAAQN,MAAD,IAAYA,MAAM,CAACC,IAAP,KAAgBC,uBAAYK,OAA/C,EAAwD,mBAAOZ,UAAP,CAAxD,CAAjB;AACA,MAAMa,SAAS,GAAG,mBAAQR,MAAD,IAAYA,MAAM,CAACC,IAAP,KAAgBC,uBAAYO,QAA/C,EAAyD,mBAAOd,UAAP,CAAzD,CAAlB;AACA,MAAMe,UAAU,GAAG,mBAAQV,MAAD,IAAYA,MAAM,CAACC,IAAP,KAAgBC,uBAAYS,SAA/C,EAA0D,mBAAOhB,UAAP,CAA1D,CAAnB;AAEA,MAAMiB,WAAW,GAAG,CAClBC,aADkB,EAElBC,iBAFkB,EAGlBC,gBAHkB,EAIlBC,eAJkB,EAKlBC,oBALkB,EAMlBC,gBANkB,EAOlBC,aAPkB,EAQlBC,aARkB,EASlBC,cATkB,EAUlBC,aAVkB,EAWlBC,gBAXkB,EAYlBC,UAZkB,EAalBC,wBAbkB,EAclBC,kBAdkB,EAelBC,sBAfkB,EAgBlBC,WAhBkB,EAiBlBC,WAjBkB,CAApB;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA;AAAF,IAAa,EAAd,KAAqB;AACxC,SAAO;AACLhC,IAAAA,YADK;AAELK,IAAAA,WAFK;AAGLQ,IAAAA,WAHK;AAILN,IAAAA,QAJK;AAKLE,IAAAA,SALK;AAMLE,IAAAA,UANK;AAOLqB,IAAAA,MAAM,EAAEA,MAAM,IAAI,mBAAK;AAAEC,MAAAA,WAAW,EAAE;AAAEC,QAAAA,QAAQ,EAAE;AAAZ;AAAf,KAAL;AAPb,GAAP;AASD,CAVD;;eAYeH,Y","sourcesContent":["import pino from 'pino'\nimport { filter, keys, map, values } from 'ramda'\n\nimport { ParserTypes } from '../constants'\nimport * as Nodes from '../parser/nodes'\nimport {\n  BlockStatement,\n  Comment,\n  Declaration,\n  Entry,\n  Expression,\n  Identifier,\n  Keyword,\n  Literal,\n  Operator,\n  PathPartExpression,\n  PathPartVariable,\n  PathPartWord,\n  Program,\n  Range,\n  Statement,\n  Whitespace,\n  Word\n} from '../parser/nodes'\n\nconst NamedNodes = map((name) => {\n  // eslint-disable-next-line import/namespace\n  const Node = Nodes[name]\n  Node.name = name\n  return Node\n}, keys(Nodes))\n\nconst Declarations = filter((parser) => parser.type === ParserTypes.DECLARATION, values(NamedNodes))\nconst Expressions = filter((parser) => parser.type === ParserTypes.EXPRESSION, values(NamedNodes))\nconst Keywords = filter((parser) => parser.type === ParserTypes.KEYWORD, values(NamedNodes))\nconst Operators = filter((parser) => parser.type === ParserTypes.OPERATOR, values(NamedNodes))\nconst Statements = filter((parser) => parser.type === ParserTypes.STATEMENT, values(NamedNodes))\n\nconst Identifiers = [\n  Program,\n  Declaration,\n  Expression,\n  Statement,\n  BlockStatement,\n  Identifier,\n  Keyword,\n  Literal,\n  Operator,\n  Comment,\n  Whitespace,\n  Word,\n  PathPartExpression,\n  PathPartWord,\n  PathPartVariable,\n  Range,\n  Entry\n]\n\n/**\n * Sets up the Context object for use by the parser and generator\n * @function\n * @since v0.1.0\n * @category context\n * @returns {Context}\n * @example\n * const contxt = setupContext()\n */\nconst setupContext = ({ logger } = {}) => {\n  return {\n    Declarations,\n    Expressions,\n    Identifiers,\n    Keywords,\n    Operators,\n    Statements,\n    logger: logger || pino({ prettyPrint: { colorize: true } })\n  }\n}\n\nexport default setupContext\n"],"file":"setupContext.js"}